<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>千分无言</title>
  
  <subtitle>人生苦短 我用python</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://hubhack.github.io/"/>
  <updated>2019-08-22T09:20:01.439Z</updated>
  <id>https://hubhack.github.io/</id>
  
  <author>
    <name>mwq</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>restful设计</title>
    <link href="https://hubhack.github.io/web/Restful%20API%E8%AE%BE%E8%AE%A1%E6%9C%80%E4%BD%B3%E5%AE%9E%E8%B7%B5/"/>
    <id>https://hubhack.github.io/web/Restful API设计最佳实践/</id>
    <published>2019-08-22T09:19:32.295Z</published>
    <updated>2019-08-22T09:20:01.439Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Restful"><a href="#Restful" class="headerlink" title="Restful"></a>Restful</h1><p>REST(Representational State Transfer)，表现层状态转移</p><p>它首次出现在2000年Roy Fielding的博士论文中，Roy Fielding是HTTP规范的主要编写者之一</p><p>表现层是资源的表现层，对于网络中的资源就需要URI(Uniform Resource Identiﬁer)来指向</p><h2 id="1、协议"><a href="#1、协议" class="headerlink" title="1、协议"></a>1、协议</h2><p>使用HTTP或者HTTPS。对外若有安全性要求，可以使用HTTPS。但是内部服务间调用可以使用HTTP或HTTPS</p><h2 id="2、HTTP方法"><a href="#2、HTTP方法" class="headerlink" title="2、HTTP方法"></a>2、HTTP方法</h2><p>HTTP请求中的方法表示执行的<strong>动作</strong><br>| 常用方法(动词) | 说明 |<br>|:–|:–|<br>|GET| 获取资源|<br>|POST |创建新的资源|<br>|PUT |更新资源|<br>|PATCH| 部分更新资源|<br>|DELETE |删除资源|</p><h2 id="3、使用名词"><a href="#3、使用名词" class="headerlink" title="3、使用名词"></a>3、使用名词</h2><p>URL指向资源，在URL路径的描述中，只需要出现名词，而不要出现动词。动词由HTTP方法提供</p><p>不要单复数混用，建议名词使用复数</p><p>Restful的核心是资源，URL应该指向资源，所以应该是使用名称表达，而不是动词表达<br>|方法| 路径 |说明|<br>|:–|:–|:–|<br>|GET| /posts| 返回所有文章|<br>|GET| /posts/10 |返回id为10的文章|<br>|POST| /posts |创建新的文章|<br>|PUT| /posts/10 |更新id为10的文章|<br>|DELETE| /posts/10 |删除id为10的文章|<br>|PATCH| /posts/10| 部分更新id为10的文章数据|<br>不要出现下面的访问资源的路径<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">/getAllPosts </span><br><span class="line">/addPost</span><br><span class="line">/updatePost</span><br><span class="line">/delPost</span><br></pre></td></tr></table></figure></p><p>GET方法只是获取资源，而不是改变资源状态。改变资源请使用POST、PUT、DELETE等方法</p><p>例如，使用 <code>GET /posts/10</code> 就可以获取资源了，但是却使用 <code>GET /posts/10/del</code> 或 <code>GET /posts/10?v=del</code> ，本意 是想删除。但这样不好，GET方法请求只为获取资源，不要改变资源状态</p><h3 id="子资源的访问"><a href="#子资源的访问" class="headerlink" title="子资源的访问"></a>子资源的访问</h3><table><thead><tr><th style="text-align:left">方法</th><th style="text-align:left">路径Endpoint</th><th style="text-align:left">说明</th></tr></thead><tbody><tr><td style="text-align:left">GET</td><td style="text-align:left">/posts/10/authors</td><td style="text-align:left">返回id为10的文章的所有作者</td></tr><tr><td style="text-align:left">GET</td><td style="text-align:left">/posts/10/authors/8</td><td style="text-align:left">返回id为10的文章的作者中id为8的</td></tr></tbody></table><h2 id="4、集合功能"><a href="#4、集合功能" class="headerlink" title="4、集合功能"></a>4、集合功能</h2><ul><li>过滤 Filtering<br>指定过滤条件 <code>GET /posts?tag=python</code></li><li>排序 Sorting<br>指定排序条件。有很多种设计风格，例如使用+表示asc，-表示desc。 <code>GET /posts?sort=+title,-id 或 GET /posts?sort=title_asc,id_desc</code><ul><li>分页 Pagination<br>一般情况下，查询返回的记录数非常多，必须分页。 <code>GET /posts?page=5&amp;size=20</code><h2 id="5、状态码"><a href="#5、状态码" class="headerlink" title="5、状态码"></a>5、状态码</h2>使用HTTP响应的状态码表示动作的成功与否。</li></ul></li></ul><p>2XX表示用户请求被服务器端成功的处理；4XX表示用户请求的错误；5XX表示服务器端出错了<br>| Status Code | 说明 | Method| 说明 |<br>|:–|:–| :–| :–|<br>|200| OK |GET| 成功获取资源|<br>|201| CREATED |POST、PUT、PATCH |成功创建或修改|<br>|204| NO CONTENT |DELETE |成功删除资源|<br>|400 |Bad Request| ALL（表示所有方法）|请求中有错误，例如 GET时参数有问题 PUT时提交的数据错误等|<br>|401| Unauthorized |ALL |权限未通过认证|<br>|403| Forbidden| ALL |有无权限都禁止访问该资源|<br>|404 |Not Found| ALL| 请求的资源不存在|<br>|500 |Internal Server Error |ALL |服务器端错|</p><p>详细状态码参考<a href="https://www.w3.org/Protocols/rfc2616/rfc2616-sec10.html" target="_blank" rel="noopener">https://www.w3.org/Protocols/rfc2616/rfc2616-sec10.html</a></p><h2 id="6、错误处理"><a href="#6、错误处理" class="headerlink" title="6、错误处理"></a>6、错误处理</h2><p>在Restful API设计中，错误处理也非常重要。单单从状态码中无法详尽描述错误的信息。</p><ul><li><p>1、返回消息</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&#123;    </span><br><span class="line">error:&quot;User Not Found&quot; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>2、从错误消息中了解到错误号、错误信息、错误描述等信息。甚至更详细的信息可以通过code查阅文档</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&#123;    </span><br><span class="line">&quot;code&quot;:10056,   </span><br><span class="line"> &quot;message&quot;:&quot;Invalid ID&quot;,   </span><br><span class="line">  &quot;description&quot;:&quot;More details&quot;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h2 id="7、版本"><a href="#7、版本" class="headerlink" title="7、版本"></a>7、版本</h2><p>强烈要求使用版本，版本号使用简单数字，例如v</p><p>2种风格</p><ul><li><a href="http://api.magedu.com/v1/posts/10" target="_blank" rel="noopener">http://api.magedu.com/v1/posts/10</a>               这种风格会跨域，适合较大的项目 </li><li><a href="http://www.magedu.com/api/v1/posts/10" target="_blank" rel="noopener">http://www.magedu.com/api/v1/posts/10</a>   不跨域  </li></ul><h2 id="8、返回结果"><a href="#8、返回结果" class="headerlink" title="8、返回结果"></a>8、返回结果</h2><table><thead><tr><th style="text-align:left">方法</th><th style="text-align:left">路径</th><th style="text-align:left">说明</th></tr></thead><tbody><tr><td style="text-align:left">GET</td><td style="text-align:left">/posts</td><td style="text-align:left">返回所有文章的列表</td></tr><tr><td style="text-align:left">GET</td><td style="text-align:left">/posts/10</td><td style="text-align:left">返回id为10的文章对象</td></tr><tr><td style="text-align:left">POST</td><td style="text-align:left">/posts</td><td style="text-align:left">创建新的文章并返回这个对象</td></tr><tr><td style="text-align:left">PUT</td><td style="text-align:left">/posts/10</td><td style="text-align:left">更新id为10的文章并返回这个对象</td></tr><tr><td style="text-align:left">DELETE</td><td style="text-align:left">/posts/10</td><td style="text-align:left">删除id为10的文章返回一个空对象</td></tr><tr><td style="text-align:left">PATCH</td><td style="text-align:left">/posts/10</td><td style="text-align:left">部分更新id为10的文章数据并返回这个对象</td></tr></tbody></table><p><strong>前后端分离，只传数据，所以数据一律采用JSON格式</strong></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;Restful&quot;&gt;&lt;a href=&quot;#Restful&quot; class=&quot;headerlink&quot; title=&quot;Restful&quot;&gt;&lt;/a&gt;Restful&lt;/h1&gt;&lt;p&gt;REST(Representational State Transfer)，表现层状态转移&lt;/p&gt;

      
    
    </summary>
    
      <category term="web" scheme="https://hubhack.github.io/categories/web/"/>
    
    
      <category term="web" scheme="https://hubhack.github.io/tags/web/"/>
    
  </entry>
  
  <entry>
    <title>分布式爬虫</title>
    <link href="https://hubhack.github.io/%E7%88%AC%E8%99%AB/%E7%88%AC%E8%99%AB%E5%AE%9E%E6%88%982-%E5%88%86%E5%B8%83%E5%BC%8F%E5%BC%82%E6%AD%A5%E7%88%AC%E8%99%AB/"/>
    <id>https://hubhack.github.io/爬虫/爬虫实战2-分布式异步爬虫/</id>
    <published>2019-08-22T08:41:09.032Z</published>
    <updated>2019-08-22T08:54:23.788Z</updated>
    
    <content type="html"><![CDATA[<h1 id="多线程爬取博客园"><a href="#多线程爬取博客园" class="headerlink" title="多线程爬取博客园"></a>多线程爬取博客园</h1><p>博客园的新闻分页地址 <a href="https://news.cnblogs.com/n/page/10/" target="_blank" rel="noopener">https://news.cnblogs.com/n/page/10/</a> ，多线程成批爬取新闻的<strong>标题和链接</strong><br><code>https://news.cnblogs.com/n/page/2/</code> ，这个url中变化的是最后的数字一直在变，它是页码<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">from</span> bs4 <span class="keyword">import</span> BeautifulSoup</span><br><span class="line"><span class="keyword">from</span> bs4.element <span class="keyword">import</span> Tag</span><br><span class="line"><span class="keyword">from</span> queue <span class="keyword">import</span> Queue</span><br><span class="line"><span class="keyword">from</span> concurrent.futures <span class="keyword">import</span> ThreadPoolExecutor</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">BASE_URL = <span class="string">'http://news.cnblogs.com'</span></span><br><span class="line">NEWS_PAGE = <span class="string">'/n/page/'</span></span><br><span class="line"><span class="comment"># https://news.cnblogs.com/n/page/2/ 列表页</span></span><br><span class="line"><span class="comment"># https://news.cnblogs.com/n/628919/ 详情页</span></span><br><span class="line"></span><br><span class="line">headers = &#123;</span><br><span class="line">    <span class="string">'User-agent'</span>: <span class="string">"Mozilla/5.0 (Windows; U; Windows NT 6.1; zh-CN) AppleWebKit/537.36 (KHTML,like Gecko)"</span></span><br><span class="line">                  <span class="string">" Version / 5.0.1Safari / 537.36"</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 异步，队列，以后换成第三方队列</span></span><br><span class="line">urls = Queue()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建博客园的新闻urls，每页30条新闻</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">starts_url</span><span class="params">(start, stop, step=<span class="number">1</span>)</span>:</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(start, stop + <span class="number">1</span>, step):</span><br><span class="line">        url = <span class="string">"&#123;&#125;&#123;&#125;&#123;&#125;/"</span>.format(BASE_URL, NEWS_PAGE, i)</span><br><span class="line">        print(url)</span><br><span class="line">        urls.put(url)  <span class="comment"># 加入队列</span></span><br><span class="line">    print(<span class="string">'任务链接创建完毕'</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 爬取页面</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">crawler</span><span class="params">()</span>:</span></span><br><span class="line">    url = urls.get()  <span class="comment"># 阻塞，拿一条</span></span><br><span class="line">    <span class="keyword">with</span> requests.get(url, headers=headers) <span class="keyword">as</span> response:</span><br><span class="line">        html = response.text</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 解析</span></span><br><span class="line">        soup = BeautifulSoup(html, <span class="string">'lxml'</span>)</span><br><span class="line">        <span class="comment"># h2.news_entry &gt; a</span></span><br><span class="line">        <span class="comment"># //h2[@new_entry=""]/a</span></span><br><span class="line">        titles = soup.select(<span class="string">'h2.news_entry &gt; a'</span>)</span><br><span class="line">        <span class="keyword">for</span> title <span class="keyword">in</span> titles:</span><br><span class="line">            print(title.get(<span class="string">'href'</span>), title.text)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># starts_url(1, 1)</span></span><br><span class="line"><span class="comment"># crawler()</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 线程池</span></span><br><span class="line">executor = ThreadPoolExecutor(<span class="number">10</span>)</span><br><span class="line"></span><br><span class="line">executor.submit(starts_url, <span class="number">1</span>, <span class="number">1</span>)</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">5</span>):</span><br><span class="line">    executor.submit(crawler)</span><br></pre></td></tr></table></figure></p><p>解析内容是一个比较耗时的过程，不适合放在crawler中同步处理。同样使用队列解耦</p><p>现在线程都是拿一条数据，执行完就结束了。修改为可以不停的从队列中取数据<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">from</span> bs4 <span class="keyword">import</span> BeautifulSoup</span><br><span class="line"><span class="keyword">from</span> bs4.element <span class="keyword">import</span> Tag</span><br><span class="line"><span class="keyword">from</span> queue <span class="keyword">import</span> Queue</span><br><span class="line"><span class="keyword">from</span> concurrent.futures <span class="keyword">import</span> ThreadPoolExecutor</span><br><span class="line"><span class="keyword">from</span> threading <span class="keyword">import</span> Event</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">BASE_URL = <span class="string">'http://news.cnblogs.com'</span></span><br><span class="line">NEWS_PAGE = <span class="string">'/n/page/'</span></span><br><span class="line"><span class="comment"># https://news.cnblogs.com/n/page/2/ 列表页</span></span><br><span class="line"><span class="comment"># https://news.cnblogs.com/n/628919/ 详情页</span></span><br><span class="line"></span><br><span class="line">headers = &#123;</span><br><span class="line">    <span class="string">'User-agent'</span>: <span class="string">"Mozilla/5.0 (Windows; U; Windows NT 6.1; zh-CN) AppleWebKit/537.36 (KHTML,like Gecko)"</span></span><br><span class="line">                  <span class="string">" Version / 5.0.1Safari / 537.36"</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 异步，队列，以后换成第三方队列</span></span><br><span class="line">urls = Queue()<span class="comment"># 待爬取队列</span></span><br><span class="line">htmls = Queue() <span class="comment"># 待分析队列</span></span><br><span class="line">outputs = Queue() <span class="comment"># 待输出队列</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建博客园的新闻urls，每页30条新闻</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">starts_url</span><span class="params">(start, stop, step=<span class="number">1</span>)</span>:</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(start, stop + <span class="number">1</span>, step):</span><br><span class="line">        url = <span class="string">"&#123;&#125;&#123;&#125;&#123;&#125;/"</span>.format(BASE_URL, NEWS_PAGE, i)</span><br><span class="line">        print(url)</span><br><span class="line">        urls.put(url)  <span class="comment"># 加入队列</span></span><br><span class="line">    print(<span class="string">'任务链接创建完毕'</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 爬取页面</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">crawler</span><span class="params">(e:Event)</span>:</span></span><br><span class="line">    <span class="keyword">while</span> <span class="keyword">not</span> e.is_set():</span><br><span class="line">        url = urls.get()  <span class="comment"># 阻塞，拿一条</span></span><br><span class="line">        <span class="keyword">with</span> requests.get(url, headers=headers) <span class="keyword">as</span> response:</span><br><span class="line">            html = response.text</span><br><span class="line">            htmls.put(html)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 解析页面</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">parse</span><span class="params">(e:Event)</span>:</span></span><br><span class="line">    <span class="comment"># 解析</span></span><br><span class="line">    <span class="keyword">while</span> <span class="keyword">not</span> e.is_set():</span><br><span class="line">        html = htmls.get()</span><br><span class="line"></span><br><span class="line">        soup = BeautifulSoup(html, <span class="string">'lxml'</span>)</span><br><span class="line">        <span class="comment"># h2.news_entry &gt; a</span></span><br><span class="line">        <span class="comment"># //h2[@new_entry=""]/a</span></span><br><span class="line">        titles = soup.select(<span class="string">'h2.news_entry &gt; a'</span>)</span><br><span class="line">        <span class="keyword">for</span> title <span class="keyword">in</span> titles:</span><br><span class="line">            href = BASE_URL + title.get(<span class="string">'href'</span>,<span class="string">''</span>)</span><br><span class="line">            txt = title.text</span><br><span class="line">            val = href, txt</span><br><span class="line">            outputs.put(val)</span><br><span class="line">            print(val)</span><br><span class="line"></span><br><span class="line">event = Event()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 线程池</span></span><br><span class="line">executor = ThreadPoolExecutor(<span class="number">10</span>)</span><br><span class="line"></span><br><span class="line">executor.submit(starts_url, <span class="number">1</span>, <span class="number">1</span>)</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">5</span>):</span><br><span class="line">    executor.submit(crawler, event)</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">5</span>):</span><br><span class="line">    executor.submit(parse, event)</span><br></pre></td></tr></table></figure></p><p>html分析函数parse，分析完成后，需要将结果持久化。不要在parse中直接持久化，放入队列中，统一持久化<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">from</span> bs4 <span class="keyword">import</span> BeautifulSoup</span><br><span class="line"><span class="keyword">from</span> bs4.element <span class="keyword">import</span> Tag</span><br><span class="line"><span class="keyword">from</span> queue <span class="keyword">import</span> Queue</span><br><span class="line"><span class="keyword">from</span> concurrent.futures <span class="keyword">import</span> ThreadPoolExecutor</span><br><span class="line"><span class="keyword">from</span> threading <span class="keyword">import</span> Event</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">BASE_URL = <span class="string">'http://news.cnblogs.com'</span></span><br><span class="line">NEWS_PAGE = <span class="string">'/n/page/'</span></span><br><span class="line"><span class="comment"># https://news.cnblogs.com/n/page/2/ 列表页</span></span><br><span class="line"><span class="comment"># https://news.cnblogs.com/n/628919/ 详情页</span></span><br><span class="line"></span><br><span class="line">headers = &#123;</span><br><span class="line">    <span class="string">'User-agent'</span>: <span class="string">"Mozilla/5.0 (Windows; U; Windows NT 6.1; zh-CN) AppleWebKit/537.36 (KHTML,like Gecko)"</span></span><br><span class="line">                  <span class="string">" Version / 5.0.1Safari / 537.36"</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 异步，队列，以后换成第三方队列</span></span><br><span class="line">urls = Queue()<span class="comment"># 待爬取队列</span></span><br><span class="line">htmls = Queue() <span class="comment"># 待分析队列</span></span><br><span class="line">outputs = Queue() <span class="comment"># 待输出队列</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建博客园的新闻urls，每页30条新闻</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">starts_url</span><span class="params">(start, stop, step=<span class="number">1</span>)</span>:</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(start, stop + <span class="number">1</span>, step):</span><br><span class="line">        url = <span class="string">"&#123;&#125;&#123;&#125;&#123;&#125;/"</span>.format(BASE_URL, NEWS_PAGE, i)</span><br><span class="line">        print(url)</span><br><span class="line">        urls.put(url)  <span class="comment"># 加入队列</span></span><br><span class="line">    print(<span class="string">'任务链接创建完毕'</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 爬取页面</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">crawler</span><span class="params">(e:Event)</span>:</span></span><br><span class="line">    <span class="keyword">while</span> <span class="keyword">not</span> e.is_set():</span><br><span class="line">        url = urls.get()  <span class="comment"># 阻塞，拿一条</span></span><br><span class="line">        <span class="keyword">with</span> requests.get(url, headers=headers) <span class="keyword">as</span> response:</span><br><span class="line">            html = response.text</span><br><span class="line">            htmls.put(html)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 解析页面</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">parse</span><span class="params">(e:Event)</span>:</span></span><br><span class="line">    <span class="comment"># 解析</span></span><br><span class="line">    <span class="keyword">while</span> <span class="keyword">not</span> e.is_set():</span><br><span class="line">        html = htmls.get()</span><br><span class="line"></span><br><span class="line">        soup = BeautifulSoup(html, <span class="string">'lxml'</span>)</span><br><span class="line">        <span class="comment"># h2.news_entry &gt; a</span></span><br><span class="line">        <span class="comment"># //h2[@new_entry=""]/a</span></span><br><span class="line">        titles = soup.select(<span class="string">'h2.news_entry &gt; a'</span>)</span><br><span class="line">        <span class="keyword">for</span> title <span class="keyword">in</span> titles:</span><br><span class="line">            href = BASE_URL + title.get(<span class="string">'href'</span>,<span class="string">''</span>)</span><br><span class="line">            txt = title.text</span><br><span class="line">            val = href, txt</span><br><span class="line">            outputs.put(val)</span><br><span class="line">            <span class="comment"># print(val)</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 持久化</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">persist</span><span class="params">(path, e: Event)</span>:</span></span><br><span class="line">    <span class="keyword">with</span> open(path, <span class="string">'a+'</span>, encoding=<span class="string">'utf-8'</span>) <span class="keyword">as</span> f:</span><br><span class="line">        <span class="keyword">while</span> <span class="keyword">not</span> e.is_set():</span><br><span class="line">            val = outputs.get()</span><br><span class="line">            print(val)</span><br><span class="line">            f.write(<span class="string">"&#123;&#125;\x01&#123;&#125;\n"</span>.format(val[<span class="number">0</span>], val[<span class="number">1</span>]))</span><br><span class="line">            f.flush()</span><br><span class="line"></span><br><span class="line">event = Event()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 线程池</span></span><br><span class="line">executor = ThreadPoolExecutor(<span class="number">10</span>)</span><br><span class="line"></span><br><span class="line">executor.submit(starts_url, <span class="number">1</span>, <span class="number">1</span>)</span><br><span class="line">executor.submit(persist, <span class="string">'d:/news.txt'</span>, event)</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">5</span>):</span><br><span class="line">    executor.submit(crawler, event)</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">4</span>):</span><br><span class="line">    executor.submit(parse, event)</span><br></pre></td></tr></table></figure></p><p>这样一个实用的并行的爬虫就基本完成了，一般提取新的URL源源不断地注入到待爬取队列，就可以实现不间断的爬取了<br>可以很方便的扩展成多进程等版本</p><h1 id="进阶（消息队列）"><a href="#进阶（消息队列）" class="headerlink" title="进阶（消息队列）"></a>进阶（消息队列）</h1><p>将队列换成第三方服务，本次采用较为常用RabbitMQ</p><h2 id="选型"><a href="#选型" class="headerlink" title="选型"></a>选型</h2><h3 id="1、队列工作模式选择"><a href="#1、队列工作模式选择" class="headerlink" title="1、队列工作模式选择"></a>1、队列工作模式选择</h3><ul><li>以爬虫程序的htmls队列为例，这个队列有多个生产者（爬取函数）写入，有多个消费者（解析函数）读取。每一个消息只能被消费一次。所以，采用RabbitMQ的<strong>工作队列模式</strong></li></ul><p>RabbitMQ生产者、消费者两端都可以创建交换机、队列</p><h3 id="2、队列中如何如何分发"><a href="#2、队列中如何如何分发" class="headerlink" title="2、队列中如何如何分发"></a>2、队列中如何如何分发</h3><ul><li>工作队列模式，说到底就是路由模式。RabbitMQ的队列和工作队列模式，交换机都工作在direct，其实都是路由模式，只不过使用了缺省交换机</li></ul><p>我们自己使用，可以单独创建交换机，不使用缺省交换机</p><h3 id="3、队列是否断开删除"><a href="#3、队列是否断开删除" class="headerlink" title="3、队列是否断开删除"></a>3、队列是否断开删除</h3><p>不能。如果每一条数据都要处理，不能因为某一端断开，然后队列就删除了，造成数据丢失</p><h2 id="消息队列类"><a href="#消息队列类" class="headerlink" title="消息队列类"></a>消息队列类</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 新建messagequeue.py</span></span><br><span class="line"><span class="keyword">import</span> pika</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MessageBase</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, host, port, user, password, virtualhost, exchange, queue)</span>:</span></span><br><span class="line">        self.exchange_name = exchange</span><br><span class="line">        self.queue_name = queue</span><br><span class="line"></span><br><span class="line">        url = <span class="string">"amqp://&#123;&#125;:&#123;&#125;@&#123;&#125;:&#123;&#125;/&#123;&#125;"</span>.format(</span><br><span class="line">            user, password, host, port, virtualhost</span><br><span class="line">        )</span><br><span class="line">        params = pika.URLParameters(url)</span><br><span class="line">        self.connection = pika.BlockingConnection(params)</span><br><span class="line">        self.channel = self.connection.channel()</span><br><span class="line">        <span class="comment"># 指定交换机使用路由模式</span></span><br><span class="line">        self.channel.exchange_declare(</span><br><span class="line">            exchange=self.exchange_name,  <span class="comment"># 指定交换机</span></span><br><span class="line">            exchange_type=<span class="string">'direct'</span>  <span class="comment"># 路由</span></span><br><span class="line">        )</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 设置queue，一定要绑定，不使用缺省交换机了</span></span><br><span class="line">        self.channel.queue_declare(queue=self.queue_name, exclusive=<span class="literal">False</span>)</span><br><span class="line">        <span class="comment"># routing_key不指定使用队列名</span></span><br><span class="line">        self.channel.queue_bind(queue=self.queue_name, exchange=self.exchange_name)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Producer</span><span class="params">(MessageBase)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">produce</span><span class="params">(self, message)</span>:</span></span><br><span class="line">        self.channel.basic_publish(</span><br><span class="line">            exchange=self.exchange_name,  <span class="comment"># 使用指定交换机</span></span><br><span class="line">            routing_key=self.queue_name,</span><br><span class="line">            body=message)</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Consumer</span><span class="params">(MessageBase)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">consume</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="comment"># basic_get 非阻塞拿一条不循环</span></span><br><span class="line">        method, props, body = self.channel.basic_get(</span><br><span class="line">            queue=self.queue_name,  <span class="comment"># 去指定的queue上获取数据</span></span><br><span class="line">            auto_ack=<span class="literal">True</span> <span class="comment"># 自动应答</span></span><br><span class="line">        )  <span class="comment"># 不阻塞方法，拿不到就是(None, None, None)</span></span><br><span class="line">        <span class="keyword">return</span> body <span class="comment"># 有可能是None</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    qs = (<span class="string">'urls'</span>, <span class="string">'htmls'</span>, <span class="string">'outputs'</span>)</span><br><span class="line">    <span class="comment"># for q in qs:</span></span><br><span class="line">    <span class="comment">#     p = Producer('192.168.142.140', 5672, 'wayne', 'wayne', 'test', 'news', q)</span></span><br><span class="line">    <span class="comment">#     for i in range(40):</span></span><br><span class="line">    <span class="comment">#         msg = '&#123;&#125;-data-&#123;:02&#125;'.format(q, i)</span></span><br><span class="line">    <span class="comment">#         p.produce(msg)</span></span><br><span class="line"></span><br><span class="line">c1 = Consumer(<span class="string">'192.168.1.5'</span>, <span class="number">5672</span>, <span class="string">'lqx'</span>, <span class="string">'lqx'</span>, <span class="string">'test'</span>, <span class="string">'news'</span>, qs[<span class="number">0</span>])</span><br><span class="line">c2 = Consumer(<span class="string">'192.168.1.5'</span>, <span class="number">5672</span>, <span class="string">'lqx'</span>, <span class="string">'lqx'</span>, <span class="string">'test'</span>, <span class="string">'news'</span>, qs[<span class="number">1</span>])</span><br><span class="line">c3 = Consumer(<span class="string">'192.168.1.5'</span>, <span class="number">5672</span>, <span class="string">'lqx'</span>, <span class="string">'lqx'</span>, <span class="string">'test'</span>, <span class="string">'news'</span>, qs[<span class="number">2</span>])</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">40</span>):</span><br><span class="line">    print(c1.consume())</span><br><span class="line">    print(c2.consume())</span><br><span class="line">    print(c3.consume())</span><br></pre></td></tr></table></figure><h2 id="重构爬虫代码"><a href="#重构爬虫代码" class="headerlink" title="重构爬虫代码"></a>重构爬虫代码</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">from</span> bs4 <span class="keyword">import</span> BeautifulSoup</span><br><span class="line"><span class="keyword">from</span> bs4.element <span class="keyword">import</span> Tag</span><br><span class="line"><span class="keyword">from</span> queue <span class="keyword">import</span> Queue</span><br><span class="line"><span class="keyword">from</span> concurrent.futures <span class="keyword">import</span> ThreadPoolExecutor</span><br><span class="line"><span class="keyword">from</span> threading <span class="keyword">import</span> Event</span><br><span class="line"><span class="keyword">import</span> simplejson</span><br><span class="line"><span class="keyword">from</span> messagequeue <span class="keyword">import</span> Producer, Consumer</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">BASE_URL = <span class="string">'http://news.cnblogs.com'</span></span><br><span class="line">NEWS_PAGE = <span class="string">'/n/page/'</span></span><br><span class="line"><span class="comment"># https://news.cnblogs.com/n/page/2/ 列表页</span></span><br><span class="line"><span class="comment"># https://news.cnblogs.com/n/628919/ 详情页</span></span><br><span class="line"></span><br><span class="line">headers = &#123;</span><br><span class="line">    <span class="string">'User-agent'</span>: <span class="string">"Mozilla/5.0 (Windows; U; Windows NT 6.1; zh-CN) AppleWebKit/537.36 (KHTML,like Gecko)"</span></span><br><span class="line">                  <span class="string">" Version / 5.0.1Safari / 537.36"</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 异步，队列，以后换成第三方队列</span></span><br><span class="line"><span class="comment"># urls = Queue()# 待爬取队列</span></span><br><span class="line"><span class="comment"># htmls = Queue() # 待分析队列</span></span><br><span class="line"><span class="comment"># outputs = Queue() # 待输出队列</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建博客园的新闻urls，每页30条新闻</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">starts_url</span><span class="params">(start, stop, step=<span class="number">1</span>)</span>:</span></span><br><span class="line">    p = Producer(<span class="string">'192.168.1.5'</span>, <span class="number">5672</span>, <span class="string">'lqx'</span>, <span class="string">'lqx'</span>, <span class="string">'test'</span>, <span class="string">'news'</span>, <span class="string">'urls'</span>)</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(start, stop + <span class="number">1</span>, step):</span><br><span class="line">        url = <span class="string">"&#123;&#125;&#123;&#125;&#123;&#125;/"</span>.format(BASE_URL, NEWS_PAGE, i)</span><br><span class="line">        print(url)</span><br><span class="line">        <span class="comment"># urls.put(url)  # 加入队列</span></span><br><span class="line">        p.produce(url)</span><br><span class="line">    print(<span class="string">'任务链接创建完毕'</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 爬取页面</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">crawler</span><span class="params">(e:Event)</span>:</span></span><br><span class="line">    p = Producer(<span class="string">'192.168.1.5'</span>, <span class="number">5672</span>, <span class="string">'lqx'</span>, <span class="string">'lqx'</span>, <span class="string">'test'</span>, <span class="string">'news'</span>, <span class="string">'urls'</span>)</span><br><span class="line">    c = Consumer(<span class="string">'192.168.1.5'</span>, <span class="number">5672</span>, <span class="string">'lqx'</span>, <span class="string">'lqx'</span>, <span class="string">'test'</span>, <span class="string">'news'</span>, <span class="string">'urls'</span>)</span><br><span class="line">    <span class="keyword">while</span> <span class="keyword">not</span> e.wait(<span class="number">1</span>):</span><br><span class="line">        <span class="comment"># url = urls.get()  # 阻塞，拿一条</span></span><br><span class="line">        url = c.consume()</span><br><span class="line">        <span class="keyword">if</span> url:</span><br><span class="line">            <span class="keyword">with</span> requests.get(url, headers=headers) <span class="keyword">as</span> response:</span><br><span class="line">                <span class="keyword">if</span> response.status_code == <span class="number">200</span>:</span><br><span class="line">                    html = response.text</span><br><span class="line">                    <span class="comment">#htmls.put(html)</span></span><br><span class="line">                    p.produce(html)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 解析页面</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">parse</span><span class="params">(e:Event)</span>:</span></span><br><span class="line">    <span class="comment"># 解析</span></span><br><span class="line">    p = Producer(<span class="string">'192.168.1.5'</span>, <span class="number">5672</span>, <span class="string">'lqx'</span>, <span class="string">'lqx'</span>, <span class="string">'test'</span>, <span class="string">'news'</span>, <span class="string">'urls'</span>)</span><br><span class="line">    c = Consumer(<span class="string">'192.168.1.5'</span>, <span class="number">5672</span>, <span class="string">'lqx'</span>, <span class="string">'lqx'</span>, <span class="string">'test'</span>, <span class="string">'news'</span>, <span class="string">'urls'</span>)</span><br><span class="line">    <span class="keyword">while</span> <span class="keyword">not</span> e.wait(<span class="number">1</span>):</span><br><span class="line">        <span class="comment"># html = htmls.get()</span></span><br><span class="line">        html = c.consume()</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> html:</span><br><span class="line">            soup = BeautifulSoup(html, <span class="string">'lxml'</span>)</span><br><span class="line">            <span class="comment"># h2.news_entry &gt; a</span></span><br><span class="line">            <span class="comment"># //h2[@new_entry=""]/a</span></span><br><span class="line">            titles = soup.select(<span class="string">'h2.news_entry &gt; a'</span>)</span><br><span class="line">            <span class="keyword">for</span> title <span class="keyword">in</span> titles:</span><br><span class="line">                val = simplejson.dumps(&#123;</span><br><span class="line">                    <span class="string">'title'</span>: title.text,</span><br><span class="line">                    <span class="string">'url'</span>: BASE_URL + title.get(<span class="string">'href'</span>,<span class="string">''</span>)</span><br><span class="line">                &#125;)</span><br><span class="line">                <span class="comment"># outputs.put(val)</span></span><br><span class="line">                p.produce(val)</span><br><span class="line">                <span class="comment"># print(val)</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 持久化</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">persist</span><span class="params">(path, e: Event)</span>:</span></span><br><span class="line">    <span class="comment"># 以后持久化到数据库当中去</span></span><br><span class="line">    c = Consumer(<span class="string">'192.168.1.5'</span>, <span class="number">5672</span>, <span class="string">'lqx'</span>, <span class="string">'lqx'</span>, <span class="string">'test'</span>, <span class="string">'news'</span>, <span class="string">'urls'</span>)</span><br><span class="line">    <span class="keyword">with</span> open(path, <span class="string">'a+'</span>, encoding=<span class="string">'utf-8'</span>) <span class="keyword">as</span> f:</span><br><span class="line">        <span class="keyword">while</span> <span class="keyword">not</span> e.wait(<span class="number">1</span>):</span><br><span class="line">            <span class="comment"># val = outputs.get()</span></span><br><span class="line">            data = c.consume()</span><br><span class="line">            <span class="keyword">if</span> data:</span><br><span class="line">                val = simplejson.loads(data)</span><br><span class="line">                f.write(<span class="string">"&#123;&#125;\x01&#123;&#125;\n"</span>.format(val[<span class="string">'url'</span>], val[<span class="string">'title'</span>]))</span><br><span class="line">                f.flush()</span><br><span class="line"></span><br><span class="line">event = Event()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 线程池</span></span><br><span class="line">executor = ThreadPoolExecutor(<span class="number">10</span>)</span><br><span class="line"></span><br><span class="line">executor.submit(starts_url, <span class="number">1</span>, <span class="number">2</span>)</span><br><span class="line">executor.submit(persist, <span class="string">'d:/news.txt'</span>, event)</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">5</span>):</span><br><span class="line">    executor.submit(crawler, event)</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">4</span>):</span><br><span class="line">    executor.submit(parse, event)</span><br></pre></td></tr></table></figure><p>爬取、解析、存储、url生成都可以完全独立，分别部署</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;多线程爬取博客园&quot;&gt;&lt;a href=&quot;#多线程爬取博客园&quot; class=&quot;headerlink&quot; title=&quot;多线程爬取博客园&quot;&gt;&lt;/a&gt;多线程爬取博客园&lt;/h1&gt;&lt;p&gt;博客园的新闻分页地址 &lt;a href=&quot;https://news.cnblogs.com/n
      
    
    </summary>
    
      <category term="爬虫" scheme="https://hubhack.github.io/categories/%E7%88%AC%E8%99%AB/"/>
    
    
      <category term="爬虫" scheme="https://hubhack.github.io/tags/%E7%88%AC%E8%99%AB/"/>
    
  </entry>
  
  <entry>
    <title>模拟登录</title>
    <link href="https://hubhack.github.io/%E7%88%AC%E8%99%AB/%E7%88%AC%E8%99%AB%E5%AE%9E%E6%88%98%20-%20%E6%A8%A1%E6%8B%9F%E7%99%BB%E9%99%86oschina/"/>
    <id>https://hubhack.github.io/爬虫/爬虫实战 - 模拟登陆oschina/</id>
    <published>2019-08-22T08:41:09.001Z</published>
    <updated>2019-08-22T08:54:09.934Z</updated>
    
    <content type="html"><![CDATA[<h1 id="模拟登陆oschina（新浪）"><a href="#模拟登陆oschina（新浪）" class="headerlink" title="模拟登陆oschina（新浪）"></a>模拟登陆oschina（新浪）</h1><p>一般登录后，用户就可以一段时间内可以使用该用户身份操作，不需要频繁登录了。这背后往往使用了Cookie技术</p><p>登录后，用户获得一个cookie值，这个值在浏览器当前会话中保存，只要不过期甚至可以保存很久</p><p>用户每次向服务器提交请求时，将这些Cookie提交到服务器，服务器经过分析Cookie中的信息，以确认用户身份，确认是信任的用户身份，就可以继续使用网站功能</p><h2 id="Cookie"><a href="#Cookie" class="headerlink" title="Cookie"></a>Cookie</h2><p>网景公司发明。cookie一般是一个键值对name=value，但还可以包括expire过期时间、path路径、domain域、secure安全、httponly等信息<br><img src="https://img-blog.csdnimg.cn/20190730125400526.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3B5dGhvbl9scXg=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>清空oschina.net的所有cookies，重新登录，勾选”记住密码‘’<br><img src="https://img-blog.csdnimg.cn/20190730125423491.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3B5dGhvbl9scXg=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>登陆前需将所有cookies清除<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">使用 wei.xu@magedu.com/magedu.com18 登录oschina后，HTTP请求头如下</span><br></pre></td></tr></table></figure></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">Host: www.oschina.net</span><br><span class="line">Connection: keep-alive</span><br><span class="line">Upgrade-Insecure-Requests: 1</span><br><span class="line">User-Agent: Mozilla/5.0 (Windows NT 6.1; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/73.0.3683.75 Safari/537.36</span><br><span class="line">Accept: text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3</span><br><span class="line">Referer: https://www.oschina.net/home/login?goto_page=https%3A%2F%2Fwww.oschina.net%2F%3Fnocache%3D1564293263846</span><br><span class="line">Accept-Encoding: gzip, deflate, br</span><br><span class="line">Accept-Language: zh-CN,zh;q=0.9,en;q=0.8</span><br><span class="line">Cookie: aliyungf_tc=AQAAAMgC7FB9xAEADtR2e0KAzgb3hr0a; _user_behavior_=768762a3-dbce-4152-a024-264820556c9c; OSCHINA_SESSION=4DFB86BECA93B1D28BC8FEF2E1478E97; _reg_key_=EwiEfyB66X3jlOb4pNzk; oscid=ZV2oveUqo28xv80qumQtfRqukWzpKq2brNqjn0Y0a5kFTeUQUUbcPj2dwLIiVt%2FuobUFKx4%2FabVv%2BZ5n%2BrJhvE8p%2BKdiM%2FUIONcDpf9cQ%2FCwMTYxj0IZhKrEKkqVYfw%2BdNYj1bbHQEhDiqhDeFBZbsf7ouMp1Msoa4cH6mU1ZtM%3D</span><br></pre></td></tr></table></figure><ul><li>对比登录前后的cookie值，发现登录后有oscid</li><li>那就把这个HTTP 请求头放在代码中</li></ul><p>注意：<strong>每次登录后要重新生成下面的headers</strong><br>使用<code>Postman</code>将请求头改为KV对形式<br><img src="https://img-blog.csdnimg.cn/20190730130346752.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3B5dGhvbl9scXg=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/20190730130436327.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3B5dGhvbl9scXg=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/20190730130503281.png" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/20190730130516829.png" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/20190730130537403.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3B5dGhvbl9scXg=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> bs4 <span class="keyword">import</span> BeautifulSoup</span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"></span><br><span class="line">url = <span class="string">"https://www.oschina.net"</span></span><br><span class="line"></span><br><span class="line">headers = &#123;</span><br><span class="line">    <span class="string">'Host'</span>: <span class="string">"www.oschina.net"</span>,</span><br><span class="line">    <span class="string">'Connection'</span>: <span class="string">"keep-alive"</span>,</span><br><span class="line">    <span class="string">'Upgrade-Insecure-Requests'</span>: <span class="string">"1"</span>,</span><br><span class="line">    <span class="string">'User-Agent'</span>: <span class="string">"Mozilla/5.0 (Windows NT 6.1; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/73.0.3683.75 Safari/537.36"</span>,</span><br><span class="line">    <span class="string">'Accept'</span>: <span class="string">"text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3"</span>,</span><br><span class="line">    <span class="string">'Referer'</span>: <span class="string">"https://www.oschina.net/home/login?goto_page=https%3A%2F%2Fwww.oschina.net%2F%3Fnocache%3D1564293263846"</span>,</span><br><span class="line">    <span class="string">'Accept-Encoding'</span>: <span class="string">"gzip, deflate, br"</span>,</span><br><span class="line">    <span class="string">'Accept-Language'</span>: <span class="string">"zh-CN,zh;q=0.9,en;q=0.8"</span>,</span><br><span class="line">    <span class="string">'Cookie'</span>: <span class="string">"aliyungf_tc=AQAAAMgC7FB9xAEADtR2e0KAzgb3hr0a; _user_behavior_=768762a3-dbce-4152-a024-264820556c9c; OSCHINA_SESSION=4DFB86BECA93B1D28BC8FEF2E1478E97; _reg_key_=EwiEfyB66X3jlOb4pNzk; oscid=ZV2oveUqo28xv80qumQtfRqukWzpKq2brNqjn0Y0a5kFTeUQUUbcPj2dwLIiVt%2FuobUFKx4%2FabVv%2BZ5n%2BrJhvE8p%2BKdiM%2FUIONcDpf9cQ%2FCwMTYxj0IZhKrEKkqVYfw%2BdNYj1bbHQEhDiqhDeFBZbsf7ouMp1Msoa4cH6mU1ZtM%3D"</span>,</span><br><span class="line">    <span class="string">'cache-control'</span>: <span class="string">"no-cache"</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">response = requests.request(<span class="string">"GET"</span>, url, headers=headers)</span><br><span class="line"></span><br><span class="line"><span class="keyword">with</span> response:</span><br><span class="line">    <span class="keyword">with</span> open(<span class="string">'d:/osc.html'</span>, <span class="string">'w'</span>, encoding=<span class="string">'utf-8'</span>) <span class="keyword">as</span> f:</span><br><span class="line">        f.write(response.text)</span><br></pre></td></tr></table></figure></p><p>已登录访问首页，右上角会有用户信息，如下<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"right menu"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">a</span> <span class="attr">class</span>=<span class="string">"item"</span> <span class="attr">href</span>=<span class="string">"https://www.oschina.net/home/go?page=admin%2Fpublish"</span>&gt;</span>投递新闻/软件<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"ui icon dropdown item"</span> <span class="attr">id</span>=<span class="string">"message"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">i</span> <span class="attr">class</span>=<span class="string">"alarm icon"</span>&gt;</span><span class="tag">&lt;/<span class="name">i</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"ui red circular mini label total-count"</span>&gt;</span>-3<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"menu"</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"header message-header"</span>&gt;</span> 暂没有未读消息 <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">a</span> <span class="attr">class</span>=<span class="string">"item "</span> <span class="attr">style</span>=<span class="string">'display: none'</span>&gt;</span><span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"message-list"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"header action clearfix"</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"go-inbox"</span>&gt;</span><span class="tag">&lt;<span class="name">a</span></span></span><br><span class="line"><span class="tag">                            <span class="attr">href</span>=<span class="string">"https://my.oschina.net/u/3881396/admin/inbox"</span>&gt;</span>消息中心<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"mark-read-all"</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"javascript:;"</span>&gt;</span>全部标记为已读<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">a</span> <span class="attr">class</span>=<span class="string">"ui dropdown item toggle-user-sidebar"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"osc-avatar small-portrait _28x28 ui avatar image current-user-avatar"</span></span></span><br><span class="line"><span class="tag">                <span class="attr">title</span>=<span class="string">"magedu_wayne"</span> <span class="attr">data-user-id</span>=<span class="string">"3881396"</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"text-portrait"</span> <span class="attr">style</span>=<span class="string">"background: #16a085"</span>&gt;</span>m<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">i</span> <span class="attr">class</span>=<span class="string">"caret right icon"</span>&gt;</span><span class="tag">&lt;/<span class="name">i</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"mainScreen"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"home-container"</span>&gt;</span></span><br></pre></td></tr></table></figure></p><p>如果没有登录，一定不能在页面中出现用户的名称和userid的<br>未登录访问首页，右上角显示登录、注册链接，如下<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"right menu"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">class</span>=<span class="string">"item"</span> <span class="attr">href</span>=<span class="string">"https://www.oschina.net/home/go?page=admin%2Fpublish"</span>&gt;</span>投递新闻/软件<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">class</span>=<span class="string">"item"</span> <span class="attr">href</span>=<span class="string">"https://www.oschina.net/home/login?</span></span></span><br><span class="line"><span class="tag"><span class="string">goto_page=https%3A%2F%2Fwww.oschina.net%2F"</span>&gt;</span>登录<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">class</span>=<span class="string">"item"</span> <span class="attr">href</span>=<span class="string">"https://www.oschina.net/home/reg?</span></span></span><br><span class="line"><span class="tag"><span class="string">goto_page=https%3A%2F%2Fwww.oschina.net%2F"</span>&gt;</span>注册<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure></p><p>新浪微博等都一样，只要允许记住用户登录，就可以通过上述方法登录后爬取内容</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;模拟登陆oschina（新浪）&quot;&gt;&lt;a href=&quot;#模拟登陆oschina（新浪）&quot; class=&quot;headerlink&quot; title=&quot;模拟登陆oschina（新浪）&quot;&gt;&lt;/a&gt;模拟登陆oschina（新浪）&lt;/h1&gt;&lt;p&gt;一般登录后，用户就可以一段时间内可以
      
    
    </summary>
    
      <category term="爬虫" scheme="https://hubhack.github.io/categories/%E7%88%AC%E8%99%AB/"/>
    
    
      <category term="爬虫" scheme="https://hubhack.github.io/tags/%E7%88%AC%E8%99%AB/"/>
    
  </entry>
  
  <entry>
    <title>爬虫概述</title>
    <link href="https://hubhack.github.io/%E7%88%AC%E8%99%AB/%E7%88%AC%E8%99%AB/"/>
    <id>https://hubhack.github.io/爬虫/爬虫/</id>
    <published>2019-08-22T08:41:08.985Z</published>
    <updated>2019-08-22T08:53:51.304Z</updated>
    
    <content type="html"><![CDATA[<h1 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h1><p>爬虫，应该称为网络爬虫，也叫网页蜘蛛、网络机器人、网络蚂蚁等。<br>搜索引擎，就是网络爬虫的应用者</p><p>为什么到了今天，反而这个词汇被频繁的提起呢？有搜索引擎不就够了吗？<br>实际上，大数据时代的到了，所有的企业都希望通过海量数据发现其中的价值<br>所以，需要爬取对特定网站、特定类别的数据，而搜索引擎不能提供这样的功能，因此，需要自己开发爬虫来解决</p><h2 id="爬虫分类"><a href="#爬虫分类" class="headerlink" title="爬虫分类"></a>爬虫分类</h2><h3 id="通用爬虫"><a href="#通用爬虫" class="headerlink" title="通用爬虫"></a>通用爬虫</h3><p>常见就是搜索引擎，无差别的收集数据、存储，提取关键字，构建索引库，给用户提供搜索接口</p><p><strong>爬取一般流程</strong></p><ol><li>初始一批URL，将这些URL放到待爬取队列</li><li>从队列取出这些URL，通过DNS解析IP，对IP对应的站点下载HTML页面，保存到本地服务器中，爬取完的URL放到已爬取队列</li><li>分析这些网页内容，找出网页里面的其他关心的URL链接，继续执行第2步，直到爬取条件结束</li></ol><p><strong>搜索引擎如何获取一个新网站的URL</strong></p><ul><li>新网站主动提交给搜索引擎</li><li>通过其它网站页面中设置的外链</li><li>搜索引擎和DNS服务商合作，获取最新收录的网站</li></ul><h3 id="聚焦爬虫"><a href="#聚焦爬虫" class="headerlink" title="聚焦爬虫"></a>聚焦爬虫</h3><p>有针对性的编写特定领域数据的爬取程序，针对某些类别数据采集的爬虫，是面向主题的爬虫</p><h2 id="Robots协议"><a href="#Robots协议" class="headerlink" title="Robots协议"></a>Robots协议</h2><p>指定一个<code>robots.txt</code>文件，告诉爬虫引擎什么可以爬取</p><p><code>/</code> 表示网站根目录，表示网站所有目录。<br><code>Allow</code> 允许爬取的目录<br><code>Disallow</code> 禁止爬取的目录<br>可以使用通配符</p><p><strong>淘宝</strong>  <a href="http://www.taobao.com/robots.txt" target="_blank" rel="noopener">http://www.taobao.com/robots.txt</a><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><span class="line">User-agent:  Baiduspider</span><br><span class="line">Allow:  /article</span><br><span class="line">Allow:  /oshtml</span><br><span class="line">Allow:  /ershou</span><br><span class="line">Allow: /$</span><br><span class="line">Disallow:  /product/</span><br><span class="line">Disallow:  /</span><br><span class="line"></span><br><span class="line">User-Agent:  Googlebot</span><br><span class="line">Allow:  /article</span><br><span class="line">Allow:  /oshtml</span><br><span class="line">Allow:  /product</span><br><span class="line">Allow:  /spu</span><br><span class="line">Allow:  /dianpu</span><br><span class="line">Allow:  /oversea</span><br><span class="line">Allow:  /list</span><br><span class="line">Allow:  /ershou</span><br><span class="line">Allow: /$</span><br><span class="line">Disallow:  /</span><br><span class="line"></span><br><span class="line">User-agent:  Bingbot</span><br><span class="line">Allow:  /article</span><br><span class="line">Allow:  /oshtml</span><br><span class="line">Allow:  /product</span><br><span class="line">Allow:  /spu</span><br><span class="line">Allow:  /dianpu</span><br><span class="line">Allow:  /oversea</span><br><span class="line">Allow:  /list</span><br><span class="line">Allow:  /ershou</span><br><span class="line">Allow: /$</span><br><span class="line">Disallow:  /</span><br><span class="line"></span><br><span class="line">User-Agent:  360Spider</span><br><span class="line">Allow:  /article</span><br><span class="line">Allow:  /oshtml</span><br><span class="line">Allow:  /ershou</span><br><span class="line">Disallow:  /</span><br><span class="line"></span><br><span class="line">User-Agent:  Yisouspider</span><br><span class="line">Allow:  /article</span><br><span class="line">Allow:  /oshtml</span><br><span class="line">Allow:  /ershou</span><br><span class="line">Disallow:  /</span><br><span class="line"></span><br><span class="line">User-Agent:  Sogouspider</span><br><span class="line">Allow:  /article</span><br><span class="line">Allow:  /oshtml</span><br><span class="line">Allow:  /product</span><br><span class="line">Allow:  /ershou</span><br><span class="line">Disallow:  /</span><br><span class="line"></span><br><span class="line">User-Agent:  Yahoo!  Slurp</span><br><span class="line">Allow:  /product</span><br><span class="line">Allow:  /spu</span><br><span class="line">Allow:  /dianpu</span><br><span class="line">Allow:  /oversea</span><br><span class="line">Allow:  /list</span><br><span class="line">Allow:  /ershou</span><br><span class="line">Allow: /$</span><br><span class="line">Disallow:  /</span><br><span class="line"></span><br><span class="line">User-Agent:  *</span><br><span class="line">Disallow:  /</span><br></pre></td></tr></table></figure></p><p>明确百度爬虫能爬取的内容<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">User-agent: Baiduspider</span><br><span class="line">Allow: /article</span><br><span class="line">Allow: /oshtml</span><br><span class="line">Allow: /ershou</span><br><span class="line">Disallow: /product/</span><br><span class="line">Disallow: /</span><br></pre></td></tr></table></figure></p><p>其它爬虫，不允许爬取<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">User-Agent: *</span><br><span class="line">Disallow: /</span><br></pre></td></tr></table></figure></p><p><strong>马蜂窝</strong> <a href="http://www.mafengwo.cn/robots.txt" target="_blank" rel="noopener">http://www.mafengwo.cn/robots.txt</a><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">User-agent: *</span><br><span class="line">Disallow: /</span><br><span class="line">Disallow: /poi/detail.php</span><br><span class="line"></span><br><span class="line">Sitemap: http://www.mafengwo.cn/sitemapIndex.xml</span><br></pre></td></tr></table></figure></p><p>这是一个君子协定，“爬亦有道”</p><ul><li>这个协议为了让搜索引擎更有效率搜索自己内容，提供了如Sitemap这样的文件。Sitemap往往是一个XML文件，提供了网站想让大家爬取的内容的更新信息</li><li>这个文件禁止抓取的往往又是可能我们感兴趣的内容，它反而泄露了这些地址</li></ul><h1 id="HTTP请求和响应处理"><a href="#HTTP请求和响应处理" class="headerlink" title="HTTP请求和响应处理"></a>HTTP请求和响应处理</h1><p>其实爬取网页就是通过HTTP协议访问网页，不过通过浏览器访问往往是人的行为，把这种行为变成使用程序来访问</p><h2 id="urllib包"><a href="#urllib包" class="headerlink" title="urllib包"></a>urllib包</h2><p><strong>urllib是标准库</strong>，它一个工具包模块，包含下面模块来处理url：</p><ul><li><code>urllib.request</code> 用于打开和读写url</li><li><code>urllib.error</code> 包含了由 <code>urllib.request</code>引起的异常</li><li><code>urllib.parse</code> 用于解析url</li><li><code>urllib.robotparser</code> 分析 <code>robots.txt</code> 文件</li></ul><p>Python2中提供了urllib和urllib2。urllib提供较为底层的接口，urllib2对urllib进行了进一步封装</p><p>Python3中将urllib合并到了urllib2中，并更名为<strong>标准库urllib包</strong></p><h3 id="urllib-request模块"><a href="#urllib-request模块" class="headerlink" title="urllib.request模块"></a>urllib.request模块</h3><p>模块定义了在基本和摘要式身份验证、 重定向、 cookies等应用中打开 Url (主要是 HTTP) 的函数和类</p><h4 id="urlopen方法"><a href="#urlopen方法" class="headerlink" title="urlopen方法"></a>urlopen方法</h4><p><code>urlopen(url, data=None)</code></p><ul><li>url是链接地址字符串，或请求类的实例</li><li>data提交的数据，如果data为None发起GET请求，否则发起POST请求。见 <code>urllib.request.Request#get_method</code></li><li>返回<code>http.client.HTTPResponse</code>类的响应对象，这是一个类文件对象<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> urllib.request <span class="keyword">import</span> urlopen</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 打开一个url返回一个响应对象，类文件对象</span></span><br><span class="line"><span class="comment"># 下面的链接访问后会有跳转</span></span><br><span class="line">response = urlopen(<span class="string">'http://www.bing.com'</span>) <span class="comment"># GET方法</span></span><br><span class="line">print(response.closed)</span><br><span class="line"></span><br><span class="line"><span class="keyword">with</span> response:</span><br><span class="line">    print(<span class="number">1</span>,type(response)) <span class="comment"># http.client.HTTPResponse 类文件对象</span></span><br><span class="line">    print(<span class="number">2</span>, response.status, response.reason)  <span class="comment"># 请求状态</span></span><br><span class="line">    print(<span class="number">3</span>, response.geturl())  <span class="comment"># 返回真正的URL</span></span><br><span class="line">    print(<span class="number">4</span>, response.info())  <span class="comment"># headers</span></span><br><span class="line">    print(<span class="number">5</span>, response.read())  <span class="comment"># 读取返回的内容</span></span><br><span class="line"></span><br><span class="line">print(response.closed)</span><br></pre></td></tr></table></figure></li></ul><p>执行结果<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">D:\python\venvs\blog01\Scripts\python.exe D:/python/blog<span class="number">-1.0</span>/text.py</span><br><span class="line"><span class="literal">False</span></span><br><span class="line"><span class="number">1</span> &lt;<span class="class"><span class="keyword">class</span> '<span class="title">http</span>.<span class="title">client</span>.<span class="title">HTTPResponse</span>'&gt;</span></span><br><span class="line"><span class="class">2 200 <span class="title">OK</span></span></span><br><span class="line"><span class="class">3 <span class="title">http</span>:</span>//cn.bing.com/</span><br><span class="line"><span class="number">4</span> Cache-Control: private, max-age=<span class="number">0</span></span><br><span class="line">Content-Length: <span class="number">114009</span></span><br><span class="line">Content-Type: text/html; charset=utf<span class="number">-8</span></span><br><span class="line">Vary: Accept-Encoding</span><br><span class="line">P3P: CP=<span class="string">"NON UNI COM NAV STA LOC CURa DEVa PSAa PSDa OUR IND"</span></span><br><span class="line">Set-Cookie: SRCHD=AF=NOFORM; domain=.bing.com; expires=Mon, <span class="number">26</span>-Jul<span class="number">-2021</span> <span class="number">09</span>:<span class="number">29</span>:<span class="number">04</span> GMT; path=/</span><br><span class="line">Set-Cookie: SRCHUID=V=<span class="number">2</span>&amp;GUID=DCAB9EC86F964A45A890787A7EF4CF93&amp;dmnchg=<span class="number">1</span>; domain=.bing.com; expires=Mon, <span class="number">26</span>-Jul<span class="number">-2021</span> <span class="number">09</span>:<span class="number">29</span>:<span class="number">04</span> GMT; path=/</span><br><span class="line">Set-Cookie: SRCHUSR=DOB=<span class="number">20190726</span>; domain=.bing.com; expires=Mon, <span class="number">26</span>-Jul<span class="number">-2021</span> <span class="number">09</span>:<span class="number">29</span>:<span class="number">04</span> GMT; path=/</span><br><span class="line">Set-Cookie: _SS=SID=<span class="number">10</span>B11589C8FA6E3003FE182CC9D46F33; domain=.bing.com; path=/</span><br><span class="line">X-MSEdge-Ref: Ref A: EAB1A96DB5534F5DB9BBD28A6BD85086 Ref B: BJ1EDGE0112 Ref C: <span class="number">2019</span><span class="number">-07</span><span class="number">-26</span>T09:<span class="number">29</span>:<span class="number">04</span>Z</span><br><span class="line">Set-Cookie: _EDGE_S=F=<span class="number">1</span>&amp;SID=<span class="number">10</span>B11589C8FA6E3003FE182CC9D46F33; path=/; httponly; domain=bing.com</span><br><span class="line">Set-Cookie: _EDGE_V=<span class="number">1</span>; path=/; httponly; expires=Wed, <span class="number">19</span>-Aug<span class="number">-2020</span> <span class="number">09</span>:<span class="number">29</span>:<span class="number">04</span> GMT; domain=bing.com</span><br><span class="line">Set-Cookie: MUID=<span class="number">2169749</span>B8FF26D6034DC793E8EDC6CF3; path=/; expires=Wed, <span class="number">19</span>-Aug<span class="number">-2020</span> <span class="number">09</span>:<span class="number">29</span>:<span class="number">04</span> GMT; domain=bing.com</span><br><span class="line">Set-Cookie: MUIDB=<span class="number">2169749</span>B8FF26D6034DC793E8EDC6CF3; path=/; httponly; expires=Wed, <span class="number">19</span>-Aug<span class="number">-2020</span> <span class="number">09</span>:<span class="number">29</span>:<span class="number">04</span> GMT</span><br><span class="line">Date: Fri, <span class="number">26</span> Jul <span class="number">2019</span> <span class="number">09</span>:<span class="number">29</span>:<span class="number">03</span> GMT</span><br><span class="line">Connection: close</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="number">5</span> <span class="string">b'&lt;!DOCTYPE html&gt;&lt;html lang="zh"&gt;&lt;script type="text/javascript" &gt;//&lt;![CDATA[\r\nsi_ST=new Date\r\n//]]&gt;&lt;/s'</span></span><br><span class="line">···</span><br><span class="line">···</span><br><span class="line"><span class="literal">True</span></span><br><span class="line"></span><br><span class="line">Process finished <span class="keyword">with</span> exit code <span class="number">0</span></span><br></pre></td></tr></table></figure></p><p>上例，通过<code>urllib.request.urlopen</code>方法，发起一个HTTP的GET请求，WEB服务器返回了网页内容。响应的数据被封装到类文件对象中，可以通过<code>read方法</code>、<code>readline方法</code>、<code>readlines方法</code>获取数据，<code>status</code>和<code>reason</code>属性表示返回的状态码，<code>info</code>方法返回头信息，等等</p><h4 id="User-Agent问题"><a href="#User-Agent问题" class="headerlink" title="User-Agent问题"></a>User-Agent问题</h4><p>上例的代码非常精简，即可以获得网站的响应数据。但目前urlopen方法通过url字符串和data发起HTTP的请求</p><ul><li>如果想修改HTTP头，例如useragent，就得借助其他方式</li></ul><p>源码中构造的useragent如下<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># urllib.request.OpenerDirector</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">OpenerDirector</span>:</span> </span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self)</span>:</span> </span><br><span class="line">client_version = <span class="string">"Python-urllib/%s"</span> % __version__ </span><br><span class="line">self.addheaders = [(<span class="string">'User-agent'</span>, client_version)]</span><br></pre></td></tr></table></figure></p><p>当前显示为 <code>Python-urllib/3.6</code><br>有些网站是反爬虫的，所以要把爬虫伪装成浏览器。随便打开一个浏览器，复制浏览器的<strong>UA值</strong>，用来伪装</p><ul><li><strong>UA值</strong>获取方式：<br><img src="https://img-blog.csdnimg.cn/2019072617344289.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3B5dGhvbl9scXg=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><h4 id="Request类"><a href="#Request类" class="headerlink" title="Request类"></a>Request类</h4><code>Request(url, data=None, headers={})</code></li><li>初始化方法，构造一个请求对象</li><li>可添加一个header的字典</li><li>data参数决定是GET还是POST请求</li></ul><p><code>add_header(key, val)</code> 为header中增加一个键值对<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> urllib.request <span class="keyword">import</span> urlopen, Request</span><br><span class="line"><span class="keyword">from</span> http.client <span class="keyword">import</span> HTTPResponse</span><br><span class="line"><span class="keyword">import</span> random</span><br><span class="line"></span><br><span class="line"><span class="comment"># 打开一个url返回一个Request请求对象</span></span><br><span class="line"><span class="comment"># url = 'https://movie.douban.com/' # 注意尾部的斜杠一定要有</span></span><br><span class="line">url = <span class="string">'http://www.bing.com/'</span></span><br><span class="line"></span><br><span class="line">ua_list = [</span><br><span class="line">    <span class="string">"Mozilla/5.0 (Windows NT 6.1; Win64; x64) AppleWebKit/537.36 \</span></span><br><span class="line"><span class="string">    (KHTML, like Gecko)Chrome / 57.0.2987.133 Safari / 537.36"</span>,<span class="comment"># chrome"</span></span><br><span class="line">    <span class="string">"Mozilla/5.0 (Windows; U; Windows NT 6.1; zh-CN) AppleWebKit/537.36\</span></span><br><span class="line"><span class="string">     (KHTML, like Gecko)Version / 5.0.1 Safari / 537.36"</span>, <span class="comment"># safafi</span></span><br><span class="line">    <span class="string">"Mozilla/5.0 (Windows NT 6.1; Win64; x64; rv:50.0) Gecko/20100101 Firefox/50.0"</span>,<span class="comment"># Firefox</span></span><br><span class="line">    <span class="string">"Mozilla/5.0 (compatible; MSIE 9.0; Windows NT 6.1; Trident/5.0)"</span>  <span class="comment"># IE</span></span><br><span class="line">]</span><br><span class="line"></span><br><span class="line">ua = random.choice(ua_list) <span class="comment"># pick one</span></span><br><span class="line"><span class="comment"># ua需要加到请求头中</span></span><br><span class="line">request = Request(url)</span><br><span class="line">request.add_header(<span class="string">'User-Agent'</span>, ua)</span><br><span class="line">print(type(request))</span><br><span class="line"></span><br><span class="line">response:HTTPResponse = urlopen(request, timeout=<span class="number">20</span>) <span class="comment"># request对象或者url都可以</span></span><br><span class="line">print(type(response))</span><br><span class="line"></span><br><span class="line"><span class="keyword">with</span> response:</span><br><span class="line">    print(<span class="number">1</span>,response.status, response.getcode(), response.reason) <span class="comment"># 状态，getcode本质上就是返回status</span></span><br><span class="line">    print(<span class="number">2</span>, response.geturl()) <span class="comment"># 返回数据的url。如果重定向，这个url和原始url不一样</span></span><br><span class="line">    <span class="comment"># 例如原始url是http://www.bing.com/，返回http://cn.bing.com/</span></span><br><span class="line">    print(<span class="number">3</span>, response.info())  <span class="comment"># 返回响应头headers</span></span><br><span class="line">    print(<span class="number">4</span>, response.read())  <span class="comment"># 读取返回的内容</span></span><br><span class="line"></span><br><span class="line">print(<span class="number">5</span>, request.get_header(<span class="string">'User-agent'</span>))</span><br><span class="line">print(<span class="number">6</span>, request.headers)</span><br><span class="line">print(<span class="number">7</span>, <span class="string">'user-agent'</span>.capitalize())</span><br></pre></td></tr></table></figure></p><p>执行结果<br><img src="https://img-blog.csdnimg.cn/20190726174525507.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3B5dGhvbl9scXg=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h3 id="urllib-parse模块"><a href="#urllib-parse模块" class="headerlink" title="urllib.parse模块"></a>urllib.parse模块</h3><p>该模块可以完成对url的编解码<br>先看一段代码，进行编码<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> urllib <span class="keyword">import</span> parse</span><br><span class="line"></span><br><span class="line">u = parse.urlencode(<span class="string">'https://www.bing.com/search'</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 运行结果如下</span></span><br><span class="line">Traceback (most recent call last):</span><br><span class="line">  File <span class="string">"C:\Users\mayn\AppData\Local\Programs\Python\Python36\Lib\urllib\parse.py"</span>, line <span class="number">854</span>, <span class="keyword">in</span> urlencode</span><br><span class="line">    <span class="keyword">raise</span> TypeError</span><br><span class="line">TypeError</span><br><span class="line"></span><br><span class="line">During handling of the above exception, another exception occurred:</span><br><span class="line"></span><br><span class="line">Traceback (most recent call last):</span><br><span class="line">  File <span class="string">"D:/python/blog-1.0/text.py"</span>, line <span class="number">3</span>, <span class="keyword">in</span> &lt;module&gt;</span><br><span class="line">    u = parse.urlencode(<span class="string">'https://www.bing.com/search'</span>)</span><br><span class="line">  File <span class="string">"C:\Users\mayn\AppData\Local\Programs\Python\Python36\Lib\urllib\parse.py"</span>, line <span class="number">862</span>, <span class="keyword">in</span> urlencode</span><br><span class="line">    <span class="string">"or mapping object"</span>).with_traceback(tb)</span><br><span class="line">  File <span class="string">"C:\Users\mayn\AppData\Local\Programs\Python\Python36\Lib\urllib\parse.py"</span>, line <span class="number">854</span>, <span class="keyword">in</span> urlencode</span><br><span class="line">    <span class="keyword">raise</span> TypeError</span><br><span class="line">TypeError: <span class="keyword">not</span> a valid non-string sequence <span class="keyword">or</span> mapping object</span><br></pre></td></tr></table></figure></p><p><code>urlencode函数</code>第一参数要求是一个字典或者二元组序列<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> urllib <span class="keyword">import</span> parse</span><br><span class="line"></span><br><span class="line">u = parse.urlencode(&#123;</span><br><span class="line">    <span class="string">'url'</span>:<span class="string">'https://www.bing.com/search'</span>,</span><br><span class="line">    <span class="string">'p_url'</span>:<span class="string">'https://cn.bing.com/search?q=豆瓣&amp;qs=n'</span></span><br><span class="line">&#125;)</span><br><span class="line">print(u)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 运行结果如下</span></span><br><span class="line"></span><br><span class="line">url=https%<span class="number">3</span>A%<span class="number">2</span>F%<span class="number">2</span>Fwww.bing.com%<span class="number">2</span>Fsearch&amp;\</span><br><span class="line">p_url=https%<span class="number">3</span>A%<span class="number">2</span>F%<span class="number">2</span>Fcn.bing.com%<span class="number">2</span>Fsearch%<span class="number">3</span>Fq%<span class="number">3</span>D%E8%B1%<span class="number">86</span>%E7%<span class="number">93</span>%A3%<span class="number">26</span>qs%<span class="number">3</span>Dn</span><br></pre></td></tr></table></figure></p><p>从运行结果来看冒号、斜杠、&amp;、等号、问号等符号全部被编码了，%之后实际上是单字节十六进制表示的值</p><ul><li>一般来说url中的地址部分，一般不需要使用中文路径，但是参数部分，不管GET还是POST方法，提交的数据中，可能有斜杆、等号、问号等符号，这样这些字符表示数据，不表示元字符</li><li>如果直接发给服务器端，就会导致接收方无法判断谁是元字符，谁是数据了</li><li>为了安全，一般会将数据部分的字符做url编码，这样就不会有歧义了</li><li>后来可以传送中文，同样会做编码，一般先按照字符集的encoding要求转换成字节序列，每一个字节对应的十六进制字符串前加上百分号即可</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> urllib <span class="keyword">import</span> parse</span><br><span class="line"></span><br><span class="line">u = parse.urlencode(&#123;<span class="string">'q'</span>:<span class="string">'豆瓣'</span>&#125;)</span><br><span class="line">url= <span class="string">"https://cn.bing.com/search?"</span>.format(u)</span><br><span class="line">print(url) <span class="comment"># https://cn.bing.com/search?</span></span><br><span class="line"></span><br><span class="line">print(<span class="string">'豆'</span>.encode(<span class="string">'utf-8'</span>)) <span class="comment"># b'\xe8\xb1\x86'</span></span><br><span class="line"></span><br><span class="line">print(parse.unquote(u)) <span class="comment"># q=豆瓣</span></span><br><span class="line">print(parse.unquote(url)) <span class="comment"># https://cn.bing.com/search?</span></span><br></pre></td></tr></table></figure><h2 id="提交方法method"><a href="#提交方法method" class="headerlink" title="提交方法method"></a>提交方法method</h2><p>最常用的HTTP交互数据的方法是GET、POST</p><ul><li>GET方法，数据是通过URL传递的，也就是说数据是在HTTP报文的header部分</li><li>POST方法，数据是放在HTTP报文的body部分提交的</li></ul><p>数据都是键值对形式，多个参数之间使用&amp;符号连接。例如<code>a=1&amp;b=abc</code></p><h3 id="GET方法"><a href="#GET方法" class="headerlink" title="GET方法"></a>GET方法</h3><p>连接 必应 搜索引擎官网，获取一个搜索的URL <code>https://cn.bing.com/search?q=豆瓣</code></p><p>需求<br>请写程序完成对关键字的bing搜索，将返回的结果保存到一个网页文件<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> urllib.request <span class="keyword">import</span> Request, urlopen</span><br><span class="line"><span class="keyword">from</span> urllib.parse <span class="keyword">import</span> urlencode</span><br><span class="line"></span><br><span class="line">keyword = input(<span class="string">'&gt;&gt; 请输入搜索关键字'</span>)</span><br><span class="line">data = urlencode(&#123;</span><br><span class="line">    <span class="string">'q'</span>:keyword</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">base_url = <span class="string">'http://cn.bing.com/search'</span></span><br><span class="line">url = <span class="string">'&#123;&#125;?&#123;&#125;'</span>.format(base_url, data)</span><br><span class="line">print(url)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 伪装</span></span><br><span class="line">ua = <span class="string">"Mozilla/5.0 (Windows NT 6.1) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/55.0.2883.75 Safari/537.36"</span></span><br><span class="line">request = Request(url, headers=&#123;<span class="string">'User-agent'</span>:ua&#125;)</span><br><span class="line"></span><br><span class="line">response = urlopen(request)</span><br><span class="line"><span class="keyword">with</span> response:</span><br><span class="line">    <span class="keyword">with</span> open(<span class="string">'d:/bing.html'</span>, <span class="string">'wb'</span>) <span class="keyword">as</span> f:</span><br><span class="line">        f.write(response.read())</span><br><span class="line"></span><br><span class="line">print(<span class="string">'成功'</span>)</span><br></pre></td></tr></table></figure></p><p>注：生成的网页不会将读取文件里的二次请求数据写入。如<code>src=**</code></p><h3 id="POST方法"><a href="#POST方法" class="headerlink" title="POST方法"></a>POST方法</h3><p><a href="http://httpbin.org/" target="_blank" rel="noopener">http://httpbin.org/</a> 测试网站<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> urllib.request <span class="keyword">import</span> Request, urlopen</span><br><span class="line"><span class="keyword">from</span> urllib.parse <span class="keyword">import</span> urlencode</span><br><span class="line"></span><br><span class="line">request = Request(<span class="string">'http://httpbin.org/post'</span>)</span><br><span class="line">request.add_header(</span><br><span class="line">    <span class="string">'User-agent'</span>,</span><br><span class="line">    <span class="string">"Mozilla/5.0 (Windows NT 6.1) AppleWebKit/537.36 (KHTML, \</span></span><br><span class="line"><span class="string">    like Gecko) Chrome/55.0.2883.75Safari / 537.36"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line">data = urlencode(&#123;<span class="string">'name'</span>:<span class="string">'张三,@=/&amp;*'</span>, <span class="string">'age'</span>:<span class="string">'6'</span>&#125;)</span><br><span class="line">print(data)</span><br><span class="line"></span><br><span class="line"><span class="comment"># res = urlopen(request, data='name=张三,@=/&amp;*,&amp;age=6'.encode()) # 不做url编码有风险</span></span><br><span class="line">res = urlopen(request, data=data.encode()) <span class="comment"># POST方法，Form提交数据</span></span><br><span class="line"><span class="keyword">with</span> res:</span><br><span class="line">    j = res.read().decode()  <span class="comment"># json</span></span><br><span class="line">    print(j)</span><br></pre></td></tr></table></figure></p><p><img src="https://img-blog.csdnimg.cn/20190726181931791.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3B5dGhvbl9scXg=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h3 id="处理JSON数据"><a href="#处理JSON数据" class="headerlink" title="处理JSON数据"></a>处理JSON数据</h3><p>查看“豆瓣电影”，看到“最近热门电影”的“热门”<br><img src="https://img-blog.csdnimg.cn/20190726182058172.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3B5dGhvbl9scXg=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>通过分析，我们知道这部分内容，是通过<code>AJAX</code>从后台拿到的Json数据<br><img src="https://img-blog.csdnimg.cn/20190726182729741.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3B5dGhvbl9scXg=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>访问URL是</p><ul><li><code>https://movie.douban.com/j/search_subjects?type=movie&amp;tag=%E7%83%AD%E9%97%A8&amp;page_limit=50&amp;page_start=0</code> </li><li>utf-8编码的中文“热门”</li></ul><p>服务器返回的Json数据如下<br><img src="https://img-blog.csdnimg.cn/20190726182843494.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3B5dGhvbl9scXg=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>轮播组件，共需要50条数据</p><p><code>https://movie.douban.com/j/search_subjects?type=movie&amp;tag=%E7%83%AD%E9%97%A8&amp;page_limit=50&amp;page_start=0</code> </p><ul><li>tag 标签“热门”，表示热门电影</li><li>type 数据类型，movie是电影</li><li>page_limit 表示返回数据的总数</li><li>page_start 表示数据偏移<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> urllib.request <span class="keyword">import</span> Request, urlopen</span><br><span class="line"><span class="keyword">from</span> urllib.parse <span class="keyword">import</span> urlencode</span><br><span class="line"></span><br><span class="line">url = <span class="string">'https://movie.douban.com/j/search_subjects'</span></span><br><span class="line">request = Request(url)</span><br><span class="line">request.add_header(</span><br><span class="line">    <span class="string">'User-agent'</span>,</span><br><span class="line">    <span class="string">"Mozilla/5.0 (Windows NT 6.1) AppleWebKit/537.36\</span></span><br><span class="line"><span class="string">     (KHTML, like Gecko) Chrome/55.0.2883.75Safari / 537.36"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line">data = urlencode(&#123;</span><br><span class="line">    <span class="string">'type'</span>: <span class="string">'movie'</span>,</span><br><span class="line">    <span class="string">'tag'</span>: <span class="string">'热门'</span>,</span><br><span class="line">    <span class="string">'page_limit'</span>: <span class="number">10</span>,</span><br><span class="line">    <span class="string">'page_start'</span>: <span class="number">10</span></span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment"># POST方法</span></span><br><span class="line">res = urlopen(request, data=data.encode())</span><br><span class="line"><span class="keyword">with</span> res:</span><br><span class="line">    print(res._method)</span><br><span class="line">    print(res.read().decode())</span><br><span class="line"></span><br><span class="line"><span class="comment"># GET方法</span></span><br><span class="line"><span class="keyword">with</span> urlopen(<span class="string">'&#123;&#125;?&#123;&#125;'</span>.format(url, data)) <span class="keyword">as</span> res:</span><br><span class="line">    print(res._method)</span><br><span class="line">    print(res.read().decode())</span><br></pre></td></tr></table></figure></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">POST</span><br><span class="line">&#123;<span class="string">"subjects"</span>:[&#123;<span class="string">"rate"</span>:<span class="string">"6.9"</span>,<span class="string">"cover_x"</span>:<span class="number">7142</span>,<span class="string">"title"</span>:<span class="string">"飞驰人生"</span>,<span class="string">"url"</span>:<span class="string">"https:\/\/movie.douban.com\/subject\/30163509\/"</span>,\</span><br><span class="line"><span class="string">"playable"</span>:true,<span class="string">"cover"</span>:<span class="string">"https://img3.doubanio.com\/view\/photo\/s_ratio_poster\/public\/p2542973862.jpg"</span></span><br><span class="line">......</span><br><span class="line"><span class="comment"># 一共10条</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">GET</span><br><span class="line">&#123;<span class="string">"subjects"</span>:[&#123;<span class="string">"rate"</span>:<span class="string">"6.9"</span>,<span class="string">"cover_x"</span>:<span class="number">7142</span>,<span class="string">"title"</span>:<span class="string">"飞驰人生"</span>\</span><br><span class="line">,<span class="string">"url"</span>:<span class="string">"https:\/\/movie.douban.com\/subject\/30163509\/"</span>,<span class="string">"playable"</span>:true,\</span><br><span class="line"><span class="string">"cover"</span>:<span class="string">"https://img3.doubanio.com\/view\/photo\/s_ratio_poster\/public\/p2542973862.jpg"</span></span><br><span class="line"><span class="comment"># 一共10条</span></span><br><span class="line">...</span><br></pre></td></tr></table></figure><h1 id="HTTPS证书忽略"><a href="#HTTPS证书忽略" class="headerlink" title="HTTPS证书忽略"></a>HTTPS证书忽略</h1><p>HTTPS使用SSL安全套接层协议，在传输层对网络数据进行加密。HTTPS使用的时候需要证书，而证书需要CA认证</p><ul><li>CA(Certificate Authority)是数字证书认证中心的简称，是指发放、管理、废除数字证书的机构</li><li>CA是受信任的第三方，有CA签发的证书具有可信性。如果用户由于信任了CA签发的证书导致的损失，可以追究CA的法律责任</li><li>CA是层级结构，下级CA信任上级CA，且有上级CA颁发给下级CA证书并认证</li></ul><p>一些网站，例如淘宝，使用HTTPS加密数据更加安全<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> urllib.request <span class="keyword">import</span> Request, urlopen</span><br><span class="line"></span><br><span class="line"><span class="comment"># request = Request('http://www.12306.cn/mormhweb/') # 可以访问</span></span><br><span class="line"><span class="comment"># request = Request('https://www.baidu.com/') # 可以访问</span></span><br><span class="line">request = Request(<span class="string">'https://www.12306.cn/mormhweb/'</span>)  <span class="comment"># 报SSL认证异常</span></span><br><span class="line">request.add_header(</span><br><span class="line">    <span class="string">'User-agent'</span>,</span><br><span class="line">    <span class="string">"Mozilla/5.0 (Windows NT 6.1) AppleWebKit/537.36 \</span></span><br><span class="line"><span class="string">    (KHTML, like Gecko) Chrome/55.0.2883.75Safari / 537.36"</span></span><br><span class="line">)</span><br><span class="line"><span class="comment"># ssl.CertificateError: hostname 'www.12306.cn' doesn't match either of ......</span></span><br><span class="line"><span class="keyword">with</span> urlopen(request) <span class="keyword">as</span> res:</span><br><span class="line">    print(res._method)</span><br><span class="line">    print(res.read())</span><br></pre></td></tr></table></figure></p><p>通过HTTPS访问12306的时候，失败的原因在于12306的证书未通过CA认证，它是自己生成的证书，不可信。而其它网站访问，如 <code>https://www.baidu.com/</code> 并没有提示的原因，它的证书的发行者受信任，且早就存储在当前系统中</p><p>使用<code>ssl模块</code>可忽略证书不安全信息<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> urllib.request <span class="keyword">import</span> Request, urlopen</span><br><span class="line"><span class="keyword">import</span> ssl <span class="comment"># 导入ssl模块</span></span><br><span class="line"><span class="comment"># request = Request('http://www.12306.cn/mormhweb/') # 可以访问</span></span><br><span class="line"><span class="comment"># request = Request('https://www.baidu.com/') # 可以访问</span></span><br><span class="line">request = Request(<span class="string">'https://www.12306.cn/mormhweb/'</span>)  <span class="comment"># 报SSL认证异常</span></span><br><span class="line">request.add_header(</span><br><span class="line">    <span class="string">'User-agent'</span>,</span><br><span class="line">    <span class="string">"Mozilla/5.0 (Windows NT 6.1) AppleWebKit/537.36 \</span></span><br><span class="line"><span class="string">    (KHTML, like Gecko) Chrome/55.0.2883.75Safari / 537.36"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 忽略不信任的证书</span></span><br><span class="line">context = ssl._create_unverified_context()</span><br><span class="line">res = urlopen(request, context=context)</span><br><span class="line"></span><br><span class="line"><span class="comment"># ssl.CertificateError: hostname 'www.12306.cn' doesn't match either of ......</span></span><br><span class="line"><span class="keyword">with</span> res:</span><br><span class="line">    print(res._method)</span><br><span class="line">    print(res.read())</span><br></pre></td></tr></table></figure></p><h2 id="urllib3库"><a href="#urllib3库" class="headerlink" title="urllib3库"></a>urllib3库</h2><p><a href="https://urllib3.readthedocs.io/en/latest/" target="_blank" rel="noopener">https://urllib3.readthedocs.io/en/latest/</a><br>标准库urllib缺少了一些关键的功能，非标准库的第三方库urllib3提供了，比如说连接池管理</p><p>安装<br><code>$ pip install urllib3</code><br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> urllib3</span><br><span class="line"></span><br><span class="line"><span class="comment"># 打开一个url返回一个对象</span></span><br><span class="line">url = <span class="string">'https://movie.douban.com/'</span></span><br><span class="line"></span><br><span class="line">ua = <span class="string">"Mozilla/5.0 (Windows NT 6.1) AppleWebKit/537.36 \</span></span><br><span class="line"><span class="string">(KHTML, like Gecko) Chrome/55.0.2883.75 Safari/537.36"</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 连接池管理器</span></span><br><span class="line"><span class="keyword">with</span> urllib3.PoolManager() <span class="keyword">as</span> http:</span><br><span class="line">    response = http.request(<span class="string">'GET'</span>, url, headers=&#123;</span><br><span class="line">        <span class="string">'User-Agent'</span>: ua</span><br><span class="line">    &#125;)</span><br><span class="line">    print(type(response)) // &lt;<span class="class"><span class="keyword">class</span> '<span class="title">urllib3</span>.<span class="title">response</span>.<span class="title">HTTPResponse</span>'&gt;</span></span><br><span class="line"><span class="class">    <span class="title">print</span><span class="params">(response.status, response.reason)</span> // 200 <span class="title">OK</span></span></span><br><span class="line"><span class="class">    <span class="title">print</span><span class="params">(response.headers)</span></span></span><br><span class="line"><span class="class">    <span class="title">print</span><span class="params">(response.data)</span></span></span><br></pre></td></tr></table></figure></p><h2 id="requests库"><a href="#requests库" class="headerlink" title="requests库"></a>requests库</h2><p>requests使用了urllib3，但是API更加友好，推荐使用</p><p>安装 <code>$ pip install requests</code><br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"></span><br><span class="line">ua = <span class="string">"Mozilla/5.0 (Windows NT 6.1) \</span></span><br><span class="line"><span class="string">AppleWebKit/537.36 (KHTML, like Gecko) \</span></span><br><span class="line"><span class="string">Chrome/55.0.2883.75Safari / 537.36"</span></span><br><span class="line"></span><br><span class="line">url = <span class="string">'https://movie.douban.com/'</span></span><br><span class="line"></span><br><span class="line">response = requests.request(<span class="string">'GET'</span>, url, headers=&#123;<span class="string">'User-Agent'</span>: ua&#125;)</span><br><span class="line"></span><br><span class="line"><span class="keyword">with</span> response:</span><br><span class="line">    print(type(response))</span><br><span class="line">    print(response.url)</span><br><span class="line">    print(response.status_code)</span><br><span class="line">    print(response.request.headers)  <span class="comment"># 请求头</span></span><br><span class="line">    print(response.headers)  <span class="comment"># 响应头</span></span><br><span class="line">    response.encoding = <span class="string">'utf-8'</span></span><br><span class="line">    print(response.text[:<span class="number">200</span>])  <span class="comment"># HTML的内容</span></span><br><span class="line">    <span class="keyword">with</span> open(<span class="string">'d:/movie.html'</span>, <span class="string">'w'</span>, encoding=<span class="string">'utf-8'</span>) <span class="keyword">as</span> f:</span><br><span class="line">        f.write(response.text)  <span class="comment"># 保存文件，以后备用</span></span><br></pre></td></tr></table></figure></p><p><img src="https://img-blog.csdnimg.cn/20190726184412709.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3B5dGhvbl9scXg=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>requests默认使用Session对象，是为了在多次和服务器端交互中保留会话的信息，例如cookie<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"></span><br><span class="line">ua = <span class="string">"Mozilla/5.0 (Windows NT 6.1) \</span></span><br><span class="line"><span class="string">AppleWebKit/537.36 (KHTML, like Gecko) \</span></span><br><span class="line"><span class="string">Chrome/55.0.2883.75Safari / 537.36"</span></span><br><span class="line"></span><br><span class="line">urls = [<span class="string">'https://cn.bing.com/search?q=python'</span>, <span class="string">'https://cn.bing.com/search?q=python'</span>]</span><br><span class="line">session = requests.Session()</span><br><span class="line"></span><br><span class="line"><span class="keyword">with</span> session:</span><br><span class="line">    <span class="keyword">for</span> url <span class="keyword">in</span> urls:</span><br><span class="line">        response = session.get(url, headers=&#123;<span class="string">'User-Agent'</span>: ua&#125;)</span><br><span class="line">        <span class="comment"># response = requests.request('GET', url, headers=&#123;'User-agent':ua&#125;) # 观察两种方式区别</span></span><br><span class="line">        <span class="keyword">with</span> response:</span><br><span class="line">            print(response.request.headers)  <span class="comment"># 请求头</span></span><br><span class="line">            print(response.cookies)  <span class="comment"># 响应的cookie</span></span><br><span class="line">            print(response.text[:<span class="number">20</span>])  <span class="comment"># HTML的内容</span></span><br><span class="line">            print(<span class="string">'-'</span> * <span class="number">30</span>)</span><br></pre></td></tr></table></figure></p><p><img src="https://img-blog.csdnimg.cn/20190726184835217.png" alt="在这里插入图片描述"><br>使用session访问，第二次带上了cookie</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;概述&quot;&gt;&lt;a href=&quot;#概述&quot; class=&quot;headerlink&quot; title=&quot;概述&quot;&gt;&lt;/a&gt;概述&lt;/h1&gt;&lt;p&gt;爬虫，应该称为网络爬虫，也叫网页蜘蛛、网络机器人、网络蚂蚁等。&lt;br&gt;搜索引擎，就是网络爬虫的应用者&lt;/p&gt;
&lt;p&gt;为什么到了今天，反而这个
      
    
    </summary>
    
      <category term="爬虫" scheme="https://hubhack.github.io/categories/%E7%88%AC%E8%99%AB/"/>
    
    
      <category term="爬虫" scheme="https://hubhack.github.io/tags/%E7%88%AC%E8%99%AB/"/>
    
  </entry>
  
  <entry>
    <title>scrapy</title>
    <link href="https://hubhack.github.io/%E7%88%AC%E8%99%AB/%E7%88%AC%E8%99%AB%20--%20Scrapy%E6%A1%86%E6%9E%B6/"/>
    <id>https://hubhack.github.io/爬虫/爬虫 -- Scrapy框架/</id>
    <published>2019-08-22T08:41:08.970Z</published>
    <updated>2019-08-22T08:53:36.630Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Scrapy框架"><a href="#Scrapy框架" class="headerlink" title="Scrapy框架"></a>Scrapy框架</h1><p>Scrapy是用Python实现的一个为了爬取网站数据，提取结构性数据而编写的应用框架。 可以应用在包括数据挖掘、信息处理或存储历史数据等一系列的程序中</p><p>Scrapy使用Twisted基于事件的高效异步网络框架来处理网络通信，可以加快下载速度，不用自己去实现异步框架，并且包含了各种中间件接口，可以灵活的完成各种需求</p><h2 id="Scrapy架构"><a href="#Scrapy架构" class="headerlink" title="Scrapy架构"></a>Scrapy架构</h2><p><img src="https://img-blog.csdnimg.cn/20190801140352854.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3B5dGhvbl9scXg=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h3 id="Scrapy-Engine"><a href="#Scrapy-Engine" class="headerlink" title="Scrapy Engine"></a>Scrapy Engine</h3><ul><li>引擎，负责控制数据流在系统中所有组件中流动，并在相应动作发生时触发事件。 此组件相当于爬虫的“大脑”，是整个爬虫的调度中心<h3 id="调度器-Scheduler"><a href="#调度器-Scheduler" class="headerlink" title="调度器(Scheduler)"></a>调度器(Scheduler)</h3></li><li>调度器接收从引擎发送过来的request，并将他们入队，以便之后引擎请求他们时提供给引擎</li><li>初始的爬取URL和后续在页面中获取的待爬取的URL将放入调度器中，等待爬取。同时调度器会自动<strong>去除重复的URL</strong>（如果特定的URL不需要去重也可以通过设置实现，如post请求的URL）<h3 id="下载器-Downloader"><a href="#下载器-Downloader" class="headerlink" title="下载器(Downloader)"></a>下载器(Downloader)</h3></li><li>下载器负责获取页面数据并提供给引擎，而后提供给spider<h3 id="Spiders爬虫"><a href="#Spiders爬虫" class="headerlink" title="Spiders爬虫"></a>Spiders爬虫</h3>Spider是编写的类，作用如下：</li><li>Scrapy用户编写用于分析response并提取item(即获取到的item)</li><li>额外跟进的URL，将额外跟进的URL提交给引擎，加入到Scheduler调度器中。将每个spider负责处理一个特定(或一些)网站<h3 id="Item-Pipeline"><a href="#Item-Pipeline" class="headerlink" title="Item Pipeline"></a>Item Pipeline</h3></li><li>Item Pipeline负责处理被spider提取出来的item。典型的处理有清理、 验证及持久化(例如存取到数据库中)</li><li>当页面被爬虫解析所需的数据存入Item后，将被发送到项目管道(Pipeline)，并经过设置好次序的pipeline程序处理这些数据，最后将存入本地文件或存入数据库</li><li>类似管道 <code>$ ls | grep test</code> 或者类似于Django 模板中的过滤器</li></ul><p>以下是<code>item pipeline</code>的一些典型应用：</p><ul><li>清理HTML数据</li><li>验证爬取的数据(检查item包含某些字段)</li><li>查重(或丢弃)</li><li>将爬取结果保存到数据库中</li></ul><h3 id="下载器中间件-Downloader-middlewares"><a href="#下载器中间件-Downloader-middlewares" class="headerlink" title="下载器中间件(Downloader middlewares)"></a>下载器中间件(Downloader middlewares)</h3><p>简单讲就是自定义扩展下载功能的组件</p><ul><li><p>下载器中间件，是在引擎和下载器之间的特定钩子(specific hook)，处理它们之间的请求request和响应response。 它提供了一个简便的机制，通过插入自定义代码来扩展Scrapy功能</p></li><li><p>通过设置下载器中间件可以实现爬虫自动更换<code>user-agent</code>、<code>IP</code>等功能</p><h3 id="Spider中间件-Spider-middlewares"><a href="#Spider中间件-Spider-middlewares" class="headerlink" title="Spider中间件(Spider middlewares)"></a>Spider中间件(Spider middlewares)</h3><p>Spider中间件，是在引擎和Spider之间的特定钩子(specific hook)，处理spider的输入(response)和输出(items或requests)。 也提供了同样的简便机制，通过插入自定义代码来扩展Scrapy功能</p><h2 id="数据流-Data-flow"><a href="#数据流-Data-flow" class="headerlink" title="数据流(Data flow)"></a>数据流(Data flow)</h2></li></ul><ol><li>引擎打开一个网站(open a domain)，找到处理该网站的Spider并向该spider请求第一个（批）要爬取的<br>URL(s)</li><li>引擎从Spider中获取到第一个要爬取的URL并加入到调度器(Scheduler)作为请求以备调度</li><li>引擎向调度器请求下一个要爬取的URL</li><li>调度器返回下一个要爬取的URL给引擎，引擎将URL通过下载中间件并转发给下载器(Downloader)</li><li>一旦页面下载完毕，下载器生成一个该页面的Response，并将其通过下载中间件发送给引擎</li><li>引擎从下载器中接收到Response，然后通过Spider中间件发送给Spider处理</li><li>Spider处理Response并返回提取到的Item及(跟进的)新的Request给引擎</li><li>引擎将Spider返回的Item交给Item Pipeline，将Spider返回的Request交给调度器</li><li>(从第二步)重复执行，直到调度器中没有待处理的request，引擎关闭</li></ol><p>注意：只有当调度器中没有任何request了，整个程序才会停止执行。如果有下载失败的URL，会重新下载 </p><h2 id="安装scrapy"><a href="#安装scrapy" class="headerlink" title="安装scrapy"></a>安装scrapy</h2><ul><li>安装wheel支持<br><code>$ pip install wheel</code></li></ul><ul><li><p>安装scrapy框架<br><code>$ pip install scrapy</code></p></li><li><p>window下，为了避免windows编译安装twisted依赖，安装下面的二进制包<br><code>$ pip install Twisted-18.4.0-cp35-cp35m-win_amd64.whl</code></p></li></ul><p>windows下出现如下问题<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">copying src\twisted\words\xish\xpathparser.g -&gt; build\lib.win-amd64-3.5\twisted\words\xish</span><br><span class="line"> running build_ext</span><br><span class="line"> building &apos;twisted.test.raiser&apos; extension</span><br><span class="line"> error: Microsoft Visual C++ 14.0 is required. Get it with &quot;Microsoft Visual C++ Build </span><br><span class="line">Tools&quot;: http://landinghub.visualstudio.com/visual-cpp-build-tools</span><br><span class="line">解决方案是，下载编译好的twisted，https://www.lfd.uci.edu/~gohlke/pythonlibs/#twisted</span><br><span class="line">python3.5 下载 Twisted-18.4.0-cp35-cp35m-win_amd64.whl</span><br><span class="line">python3.6 下载 Twisted-18.4.0-cp36-cp36m-win_amd64.whl</span><br><span class="line"></span><br><span class="line">安装twisted</span><br><span class="line">$ pip install Twisted-18.4.0-cp35-cp35m-win_amd64.whl</span><br><span class="line">之后在安装scrapy就没有什么问题了</span><br></pre></td></tr></table></figure></p><p>安装好，使用scrapy命令看看<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">&gt; scrapy</span><br><span class="line">Scrapy 1.5.0 - no active project</span><br><span class="line"></span><br><span class="line">Usage:</span><br><span class="line">scrapy &lt;command&gt; [options] [args]</span><br><span class="line"></span><br><span class="line">Available commands:</span><br><span class="line">bench Runquick benchmark test</span><br><span class="line">check Check spider contracts</span><br><span class="line">crawl Run a spider</span><br><span class="line">edit Edit spider</span><br><span class="line">fetch Fetch a URL using the Scrapy downloader</span><br><span class="line">genspider Generate new spider using pre-defined templates</span><br><span class="line">list List available spiders</span><br><span class="line">parse Parse URL (using its spider) and print the results</span><br><span class="line">runspider Run a self-contained spider (without creating a project)</span><br><span class="line">settings Get settings values</span><br><span class="line">shell Interactive scraping console</span><br><span class="line">startproject Create new project</span><br><span class="line">version Print Scrapy version</span><br><span class="line">view Open URL in browser, as seen by Scrapy</span><br></pre></td></tr></table></figure></p><h1 id="Scrapy开发"><a href="#Scrapy开发" class="headerlink" title="Scrapy开发"></a>Scrapy开发</h1><h2 id="项目编写流程"><a href="#项目编写流程" class="headerlink" title="项目编写流程"></a>项目编写流程</h2><ol><li>创建项目<br>使用 <code>scrapy startproject proname</code> 创建一个scrapy项目<br><code>scrapy startproject &lt;project_name&gt; [project_dir]</code></li><li>编写item<br>在<code>items.py</code>中编写Item类，明确从response中提取的item</li><li>编写爬虫<br>编写<code>spiders/proname_spider.py</code>，即爬取网站的spider并提取出item</li><li>编写item pipeline<br>item的处理，可以存储<h2 id="1-创建项目"><a href="#1-创建项目" class="headerlink" title="1 创建项目"></a>1 创建项目</h2>豆瓣书评爬取</li></ol><p>标签为“编程”，第一页、第二页链接<br><a href="https://book.douban.com/tag/%E7%BC%96%E7%A8%8B?start=0&amp;type=T" target="_blank" rel="noopener">https://book.douban.com/tag/%E7%BC%96%E7%A8%8B?start=0&amp;type=T</a><br><a href="https://book.douban.com/tag/%E7%BC%96%E7%A8%8B?start=20&amp;type=T" target="_blank" rel="noopener">https://book.douban.com/tag/%E7%BC%96%E7%A8%8B?start=20&amp;type=T</a></p><p>随便找一个目录来创建项目，执行下面命令<br><code>$ scrapy startproject first .</code><br>会产生如下目录和文件<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">first</span><br><span class="line"> ├─ scrapy.cfg</span><br><span class="line"> └─ first</span><br><span class="line"> ├─ items.py</span><br><span class="line"> ├─ middlewares.py</span><br><span class="line"> ├─ pipelines.py</span><br><span class="line"> ├─ settings.py</span><br><span class="line"> ├─ __init__.py</span><br><span class="line"> └─ spiders</span><br><span class="line"> └─ __init__.py</span><br></pre></td></tr></table></figure></p><ul><li><p><code>first</code>：外部的first目录是整个项目目录，内部的first目录是整个项目的全局目录</p></li><li><p><code>scrapy.cfg</code>：必须有的重要的项目的配置文件</p></li><li><p><code>first</code> 项目目录</p></li><li><code>__init__.py</code> 必须有，包文件</li><li><code>items.py</code> 定义Item类，从<code>scrapy.Item</code>继承，里面定义<code>scrapy.Field</code>类实例</li><li><code>pipelines.py</code> 重要的是<code>process_item()</code>方法，处理item</li><li><code>settings.py</code>：<ul><li><code>BOT_NAME</code> 爬虫名</li><li><code>ROBOTSTXT_OBEY = True</code> 是否遵从robots协议</li><li><code>USER_AGENT = &#39;&#39;</code> 指定爬取时使用</li><li><code>CONCURRENT_REQEUST = 16</code> 默认16个并行</li><li><code>DOWNLOAD_DELAY = 3</code> 下载延时，一般要设置，不宜过快发起连续请求</li><li><code>COOKIES_ENABLED = False</code> 缺省是启用，一般需要登录时才需要开启cookie</li><li><code>SPIDER_MIDDLEWARES</code> 爬虫中间件</li><li><code>DOWNLOADER_MIDDLEWARES</code> 下载中间件<ul><li><code>&#39;first.middlewares.FirstDownloaderMiddleware&#39;: 543</code><br>543 越小优先级越高</li></ul></li><li><code>ITEM_PIPELINES</code> 管道配置<ul><li><code>&#39;firstscrapy.pipelines.FirstscrapyPipeline&#39;: 300</code><br>item交给哪一个管道处理，300 越小优先级越高</li></ul></li></ul></li><li><code>spiders</code>目录<br>  <code>__init__.py</code> 必须有，可以在这里写爬虫类，也可以写爬虫子模块<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># first/settings.py参考</span></span><br><span class="line">BOT_NAME = <span class="string">'first'</span></span><br><span class="line">SPIDER_MODULES = [<span class="string">'first.spiders'</span>]</span><br><span class="line">NEWSPIDER_MODULE = <span class="string">'first.spiders'</span></span><br><span class="line"></span><br><span class="line">USER_AGENT = <span class="string">"Mozilla/5.0 (Windows NT 6.1)AppleWebKit/537.36 (KHTML, like Gecko) Chrome/55.0.2883.75 Safari/537.36"</span></span><br><span class="line">ROBOTSTXT_OBEY = <span class="literal">False</span></span><br><span class="line"></span><br><span class="line">DOWNLOAD_DELAY = <span class="number">3</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Disable cookies (enabled by default)</span></span><br><span class="line">COOKIES_ENABLED = <span class="literal">False</span></span><br></pre></td></tr></table></figure></li></ul><p>注意一定要更改<code>User-Agent</code>，否则访问 <a href="https://book.douban.com/" target="_blank" rel="noopener">https://book.douban.com/</a> 会返回403</p><h2 id="2-编写Item"><a href="#2-编写Item" class="headerlink" title="2 编写Item"></a>2 编写Item</h2><p>在<code>items.py</code>中编写<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> scrapy</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">BookItem</span><span class="params">(scrapy.Item)</span>:</span></span><br><span class="line">title = scrapy.Field() <span class="comment"># 书名</span></span><br><span class="line">rate = scrapy.Field() <span class="comment"># 评分</span></span><br></pre></td></tr></table></figure></p><h2 id="3-编写爬虫"><a href="#3-编写爬虫" class="headerlink" title="3 编写爬虫"></a>3 编写爬虫</h2><p>为爬取豆瓣书评编写爬虫类，在spiders目录下</p><ul><li>编写的爬虫类需要继承自<code>scrapy.Spider</code>，在这个类中定义爬虫名、爬取范围、其实地址等<ul><li>在<code>scrapy.Spider</code>中parse方法未实现，所以子类应该实现parse方法。该方法传入response对象</li></ul></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># scrapy源码中</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Spider</span><span class="params">()</span>:</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">parse</span><span class="params">(self, response)</span>:</span> <span class="comment"># 解析返回的内容</span></span><br><span class="line"><span class="keyword">raise</span> NotImplementedError</span><br></pre></td></tr></table></figure><p>爬取读书频道，tag为“编程”的书名和评分<br><a href="https://book.douban.com/tag/%E7%BC%96%E7%A8%8B?start=20&amp;type=T" target="_blank" rel="noopener">https://book.douban.com/tag/%E7%BC%96%E7%A8%8B?start=20&amp;type=T</a><br>使用模板创建spider， <code>$ scrapy genspider -t basic book douban.com</code><br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> scrapy</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">BookSpider</span><span class="params">(scrapy.Spider)</span>:</span> <span class="comment"># BookSpider </span></span><br><span class="line">name = <span class="string">'doubanbook'</span> <span class="comment"># 爬虫名，可修改，重要 </span></span><br><span class="line">allowed_domains = [<span class="string">'douban.com'</span>] <span class="comment"># 爬虫爬取范围 </span></span><br><span class="line">url = <span class="string">'https://book.douban.com/tag/%E7%BC%96%E7%A8%8B?start=0&amp;type=T'</span> </span><br><span class="line">start_urls = [url] <span class="comment"># 起始URL </span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 下载器获取了WEB Server的response就行了，parse就是解析响应的内容 </span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">parse</span><span class="params">(self, response)</span>:</span> </span><br><span class="line">print(type(response), <span class="string">'~~~~~~~~~'</span>) <span class="comment">#scrapy.http.response.html.HtmlResponse </span></span><br><span class="line">print(response) </span><br><span class="line">print(<span class="string">'-'</span> * <span class="number">30</span>)</span><br></pre></td></tr></table></figure></p><p>使用crawl爬取子命令<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">$ scrapy list</span><br><span class="line">$ scrapy crawl -h</span><br><span class="line">scrapy crawl [options] &lt;spider&gt;</span><br><span class="line"></span><br><span class="line">指定爬虫名称开始爬取</span><br><span class="line">$ scrapy crawl doubanbook</span><br><span class="line"></span><br><span class="line">可以不打印日志</span><br><span class="line">$ scrapy crawl doubanbook --nolog</span><br></pre></td></tr></table></figure></p><p>如果在windows下运行发生twisted的异常 <code>ModuleNotFoundError: No module named &#39;win32api&#39;</code> ，请安装 <code>$ pip install pywin32</code></p><p>response是服务器端HTTP响应，它是<code>scrapy.http.response.html.HtmlResponse</code>类。由此，修改代码如下<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> scrapy</span><br><span class="line"><span class="keyword">from</span> scrapy.http.response.html <span class="keyword">import</span> HtmlResponse</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">BookSpider</span><span class="params">(scrapy.Spider)</span>:</span> <span class="comment"># BookSpider</span></span><br><span class="line">name = <span class="string">'doubanbook'</span> <span class="comment"># 爬虫名 </span></span><br><span class="line">allowed_domains = [<span class="string">'douban.com'</span>] <span class="comment"># 爬虫爬取范围 </span></span><br><span class="line">url = <span class="string">'https://book.douban.com/tag/%E7%BC%96%E7%A8%8B?start=0&amp;type=T'</span> </span><br><span class="line">start_urls = [url] <span class="comment"># 起始URL </span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 下载器获取了WEB Server的response就行了，parse就是解析响应的内容 </span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">parse</span><span class="params">(self, response:HtmlResponse)</span>:</span> </span><br><span class="line">print(type(response)) <span class="comment">#scrapy.http.response.html.HtmlResponse </span></span><br><span class="line">print(<span class="string">'-'</span>*<span class="number">30</span>) </span><br><span class="line">print(type(response.text), type(response.body))</span><br><span class="line">print(<span class="string">'-'</span>*<span class="number">30</span>)</span><br><span class="line">print(response.encoding)</span><br><span class="line"><span class="keyword">with</span> open(<span class="string">'o:/testbook.html'</span>, <span class="string">'w'</span>, encoding=<span class="string">'utf-8'</span>) <span class="keyword">as</span> f:</span><br><span class="line"><span class="keyword">try</span>: </span><br><span class="line">f.write(response.text) </span><br><span class="line">f.flush() </span><br><span class="line"><span class="keyword">except</span> Exception <span class="keyword">as</span> e: </span><br><span class="line">print(e)</span><br></pre></td></tr></table></figure></p><h2 id="3-1-解析HTML"><a href="#3-1-解析HTML" class="headerlink" title="3.1 解析HTML"></a>3.1 解析HTML</h2><p>爬虫获得的内容response对象，可以使用解析库来解析<br>scrapy包装了lxml，父类TextResponse类也提供了xpath方法和css方法，可以混合使用这两套接口解析HTML</p><p>选择器参考 <a href="https://scrapy-chs.readthedocs.io/zh_CN/0.24/topics/selectors.html#id3" target="_blank" rel="noopener">https://scrapy-chs.readthedocs.io/zh_CN/0.24/topics/selectors.html#id3</a><br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> scrapy</span><br><span class="line"><span class="keyword">from</span> scrapy.http.response.html <span class="keyword">import</span> HtmlResponse</span><br><span class="line"></span><br><span class="line">response = HtmlResponse(<span class="string">'file:///O:/testbook.html'</span>, encoding=<span class="string">'utf-8'</span>) <span class="comment"># 构造对象</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">with</span> open(<span class="string">'o:/testbook.html'</span>, encoding=<span class="string">'utf8'</span>) <span class="keyword">as</span> f: </span><br><span class="line">response._set_body(f.read()) <span class="comment"># 填充数据 </span></span><br><span class="line"><span class="comment">#print(response.text)</span></span><br><span class="line"> </span><br><span class="line"><span class="comment"># 获取所有标题及评分</span></span><br><span class="line"><span class="comment"># xpath解析 </span></span><br><span class="line">subjects = response.xpath(<span class="string">'//li[@class="subject-item"]'</span>) </span><br><span class="line"><span class="keyword">for</span> subject <span class="keyword">in</span> subjects: </span><br><span class="line">title = subject.xpath(<span class="string">'.//h2/a/text()'</span>).extract() <span class="comment"># list </span></span><br><span class="line">print(title[<span class="number">0</span>].strip())</span><br><span class="line"></span><br><span class="line">rate = subject.xpath(<span class="string">'.//span[@class="rating_nums"]/text()'</span>).extract()</span><br><span class="line">print(rate[<span class="number">0</span>].strip()) </span><br><span class="line"></span><br><span class="line">print(<span class="string">'-'</span>*<span class="number">30</span>) </span><br><span class="line"><span class="comment"># css解析 </span></span><br><span class="line">subjects = response.css(<span class="string">'li.subject-item'</span>) </span><br><span class="line"><span class="keyword">for</span> subject <span class="keyword">in</span> subjects: </span><br><span class="line">title = subject.css(<span class="string">'h2 a::text'</span>).extract() </span><br><span class="line">print(title[<span class="number">0</span>].strip()) </span><br><span class="line"></span><br><span class="line">rate = subject.css(<span class="string">'span.rating_nums::text'</span>).extract() </span><br><span class="line">print(rate[<span class="number">0</span>].strip()) </span><br><span class="line">print(<span class="string">'-'</span>*<span class="number">30</span>)</span><br><span class="line"> </span><br><span class="line"><span class="comment"># xpath和css混合使用、正则表达式匹配 </span></span><br><span class="line">subjects = response.css(<span class="string">'li.subject-item'</span>) </span><br><span class="line"><span class="keyword">for</span> subject <span class="keyword">in</span> subjects:</span><br><span class="line"><span class="comment"># 提取链接</span></span><br><span class="line">href =subject.xpath(<span class="string">'.//h2'</span>).css(<span class="string">'a::attr(href)'</span>).extract()</span><br><span class="line">print(href[<span class="number">0</span>])</span><br><span class="line"></span><br><span class="line"><span class="comment"># 使用正则表达式</span></span><br><span class="line">id = subject.xpath(<span class="string">'.//h2/a/@href'</span>).re(<span class="string">r'\d*99\d*'</span>)</span><br><span class="line"><span class="keyword">if</span> id: </span><br><span class="line">print(id[<span class="number">0</span>]) </span><br><span class="line"></span><br><span class="line"><span class="comment"># 要求显示9分以上数据 </span></span><br><span class="line">rate = subject.xpath(<span class="string">'.//span[@class="rating_nums"]/text()'</span>).re(<span class="string">r'^9.*'</span>) </span><br><span class="line"><span class="comment"># rate = subject.css('span.rating_nums::text').re(r'^9\..*') </span></span><br><span class="line"><span class="keyword">if</span> rate: </span><br><span class="line">print(rate)</span><br></pre></td></tr></table></figure></p><h2 id="3-2-item封装数据"><a href="#3-2-item封装数据" class="headerlink" title="3.2 item封装数据"></a>3.2 item封装数据</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># spiders/bookspider.py</span></span><br><span class="line"><span class="keyword">import</span> scrapy</span><br><span class="line"><span class="keyword">from</span> scrapy.http.response.html <span class="keyword">import</span> HtmlResponse</span><br><span class="line"><span class="keyword">from</span> ..items <span class="keyword">import</span> BookItem</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">BookSpider</span><span class="params">(scrapy.Spider)</span>:</span> <span class="comment"># BookSpider</span></span><br><span class="line">name = <span class="string">'doubanbook'</span> <span class="comment"># 爬虫名 </span></span><br><span class="line">allowed_domains = [<span class="string">'douban.com'</span>] <span class="comment"># 爬虫爬取范围 </span></span><br><span class="line">url = <span class="string">'https://book.douban.com/tag/%E7%BC%96%E7%A8%8B?start=0&amp;type=T'</span></span><br><span class="line">start_urls = [url] <span class="comment"># 起始URL</span></span><br><span class="line"> </span><br><span class="line"><span class="comment"># 下载器获取了WEB Server的response就行了，parse就是解析响应的内容 </span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">parse</span><span class="params">(self, response:HtmlResponse)</span>:</span> </span><br><span class="line">items = [] </span><br><span class="line"><span class="comment"># xpath解析 </span></span><br><span class="line">subjects = response.xpath(<span class="string">'//li[@class="subject-item"]'</span>) </span><br><span class="line"><span class="keyword">for</span> subject <span class="keyword">in</span> subjects: </span><br><span class="line">title = subject.xpath(<span class="string">'.//h2/a/text()'</span>).extract() </span><br><span class="line">rate = subject.xpath(<span class="string">'.//span[@class="rating_nums"]/text()'</span>).extract_first() </span><br><span class="line">item = BookItem() </span><br><span class="line">item[<span class="string">'title'</span>] = title[<span class="number">0</span>].strip() </span><br><span class="line">item[<span class="string">'rate'</span>] = rate.strip() </span><br><span class="line">items.append(item)</span><br><span class="line"> </span><br><span class="line">print(items)</span><br><span class="line"> </span><br><span class="line"><span class="keyword">return</span> items <span class="comment"># 一定要return，否则保存不下来</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 使用命令保存return的数据</span></span><br><span class="line"><span class="comment"># scrapy crawl -h</span></span><br><span class="line"><span class="comment"># --output=FILE, -o FILE dump scraped items into FILE (use - for stdout)</span></span><br><span class="line"><span class="comment"># 文件扩展名支持'json', 'jsonlines', 'jl', 'csv', 'xml', 'marshal', 'pickle'</span></span><br><span class="line"><span class="comment"># scrapy crawl doubanbook -o dbbooks.json</span></span><br></pre></td></tr></table></figure><p>得到下图数据<br><img src="https://img-blog.csdnimg.cn/20190801144129237.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3B5dGhvbl9scXg=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>注意上图的数据已经是unicode字符，汉字的unicode表达</p><h2 id="4-pipeline处理"><a href="#4-pipeline处理" class="headerlink" title="4 pipeline处理"></a>4 pipeline处理</h2><p>将bookspider.py中BookSpider改成生成器，只需要把 <code>return items</code> 改造成 <code>yield item</code> ，即由产生一个列表变成yield一个个item</p><p>脚手架帮我们创建了一个pipelines.py文件和一个类</p><h3 id="4-1-开启pipeline"><a href="#4-1-开启pipeline" class="headerlink" title="4.1 开启pipeline"></a>4.1 开启pipeline</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Configure item pipelines</span></span><br><span class="line"><span class="comment"># See https://doc.scrapy.org/en/latest/topics/item-pipeline.html</span></span><br><span class="line">ITEM_PIPELINES = &#123;</span><br><span class="line"><span class="string">'first.pipelines.FirstPipeline'</span>: <span class="number">300</span>,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>整数300表示优先级，越小越高。取值范围为0-1000</p><h3 id="4-2-常用方法"><a href="#4-2-常用方法" class="headerlink" title="4.2 常用方法"></a>4.2 常用方法</h3><table><thead><tr><th style="text-align:left">名称</th><th style="text-align:left">参数</th><th style="text-align:left"></th></tr></thead><tbody><tr><td style="text-align:left"><code>process_item(self, item, spider)</code></td><td style="text-align:left">item爬取的一个个数据<br>spider表示item的爬取者<br>每一个item处理都调用<br>返回一个Item对象，或抛出DropItem异常<br>被丢弃的Item对象将不会被之后的pipeline组件处理</td><td style="text-align:left">必须</td></tr><tr><td style="text-align:left"><code>open_spider(self, spider)</code></td><td style="text-align:left">spider表示被开启的spider 调用一次</td><td style="text-align:left">可选</td></tr><tr><td style="text-align:left"><code>close_spider(self, spider)</code></td><td style="text-align:left">spider表示被关闭的spider 调用一次</td><td style="text-align:left">可选</td></tr><tr><td style="text-align:left"><code>__init__(self)</code></td><td style="text-align:left">spider实例创建时调用一次</td><td style="text-align:left">可选</td></tr></tbody></table><p><strong>常用方法</strong><br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">FirstPipeline</span><span class="params">(object)</span>:</span> </span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self)</span>:</span> <span class="comment"># 全局设置 </span></span><br><span class="line">print(<span class="string">'~~~~~~~~~~ init ~~~~~~~~~~~~'</span>) </span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">open_spider</span><span class="params">(self, spider)</span>:</span> <span class="comment"># 当某spider开启时调用 </span></span><br><span class="line">print(spider,<span class="string">'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~'</span>) </span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">process_item</span><span class="params">(self, item, spider)</span>:</span> </span><br><span class="line"><span class="comment"># item 获取的item；spider 获取该item的spider </span></span><br><span class="line"><span class="keyword">return</span> item </span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">close_spider</span><span class="params">(self, spider)</span>:</span> <span class="comment"># 当某spider关闭时调用 </span></span><br><span class="line">print(spider,<span class="string">'========================================'</span>)</span><br></pre></td></tr></table></figure></p><h4 id="需求"><a href="#需求" class="headerlink" title="需求"></a>需求</h4><p>通过pipeline将爬取的数据存入json文件中<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># spider/bookspider.py</span></span><br><span class="line"><span class="keyword">import</span> scrapy</span><br><span class="line"><span class="keyword">from</span> scrapy.http.response.html <span class="keyword">import</span> HtmlResponse</span><br><span class="line"><span class="keyword">from</span> ..items <span class="keyword">import</span> BookItem</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">BookSpider</span><span class="params">(scrapy.Spider)</span>:</span> <span class="comment"># BookSpider</span></span><br><span class="line">name = <span class="string">'doubanbook'</span> <span class="comment"># 爬虫名 </span></span><br><span class="line">allowed_domains = [<span class="string">'douban.com'</span>] <span class="comment"># 爬虫爬取范围 </span></span><br><span class="line">url = <span class="string">'https://book.douban.com/tag/%E7%BC%96%E7%A8%8B?start=0&amp;type=T'</span> </span><br><span class="line">start_urls = [url] <span class="comment"># 起始URL</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># spider上自定义配置信息 </span></span><br><span class="line">custom_settings = &#123; </span><br><span class="line"><span class="string">'filename'</span> : <span class="string">'o:/books.json'</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment"># 下载器获取了WEB Server的response就行了，parse就是解析响应的内容</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">parse</span><span class="params">(self, response:HtmlResponse)</span>:</span></span><br><span class="line"><span class="comment">#items = [] </span></span><br><span class="line"><span class="comment"># xpath解析 </span></span><br><span class="line">subjects = response.xpath(<span class="string">'//li[@class="subject-item"]'</span>) </span><br><span class="line"><span class="keyword">for</span> subject <span class="keyword">in</span> subjects:</span><br><span class="line">title = subject.xpath(<span class="string">'.//h2/a/text()'</span>).extract() </span><br><span class="line">rate =subject.xpath(<span class="string">'.//span[@class="rating_nums"]/text()'</span>).extract_first() </span><br><span class="line">item = BookItem() </span><br><span class="line">item[<span class="string">'title'</span>] = title[<span class="number">0</span>].strip() </span><br><span class="line">item[<span class="string">'rate'</span>] = rate.strip() </span><br><span class="line"><span class="comment">#items.append(item)</span></span><br><span class="line"> </span><br><span class="line"><span class="keyword">yield</span> item </span><br><span class="line"><span class="comment">#return items</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># pipelines.py</span></span><br><span class="line"><span class="keyword">import</span> simplejson <span class="keyword">as</span> json</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">FirstPipeline</span><span class="params">(object)</span>:</span> </span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self)</span>:</span> <span class="comment"># 全局设置 </span></span><br><span class="line">print(<span class="string">'~~~~~~~~~~ init ~~~~~~~~~~~~'</span>)</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">open_spider</span><span class="params">(self, spider)</span>:</span> <span class="comment"># 当某spider开启时调用 </span></span><br><span class="line">print(<span class="string">'&#123;&#125; ~~~~~~~~~~~~~~~~~~~~'</span>.format(spider)) </span><br><span class="line">print(spider.settings.get(<span class="string">'filename'</span>)) </span><br><span class="line">self.file = open(spider.settings[<span class="string">'filename'</span>], <span class="string">'w'</span>, encoding=<span class="string">'utf-8'</span>) </span><br><span class="line">self.file.write(<span class="string">'[\n'</span>)</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">process_item</span><span class="params">(self, item, spider)</span>:</span> </span><br><span class="line"><span class="comment"># item 获取的item；spider 获取该item的spider </span></span><br><span class="line">self.file.write(json.dumps(dict(item)) + <span class="string">',\n'</span>) </span><br><span class="line"><span class="keyword">return</span> item</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">close_spider</span><span class="params">(self, spider)</span>:</span> <span class="comment"># 当某spider关闭时调用</span></span><br><span class="line">self.file.write(<span class="string">']'</span>) </span><br><span class="line">self.file.close() </span><br><span class="line">print(<span class="string">'&#123;&#125; ======================='</span>.format(spider)) </span><br><span class="line">print(<span class="string">'-'</span>*<span class="number">30</span>)</span><br></pre></td></tr></table></figure></p><h2 id="5-url提取"><a href="#5-url提取" class="headerlink" title="5 url提取"></a>5 url提取</h2><p>如果要爬取下一页内容，可以自己分析每一页的页码变化，也可以通过提取分页栏的链接<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># spider/bookspider.py</span></span><br><span class="line"><span class="keyword">import</span> scrapy</span><br><span class="line"><span class="keyword">from</span> scrapy.http.response.html <span class="keyword">import</span> HtmlResponse</span><br><span class="line"><span class="keyword">from</span> ..items <span class="keyword">import</span> BookItem</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">BookSpider</span><span class="params">(scrapy.Spider)</span>:</span> <span class="comment"># BookSpider </span></span><br><span class="line">name = <span class="string">'doubanbook'</span> <span class="comment"># 爬虫名</span></span><br><span class="line">allowed_domains = [<span class="string">'douban.com'</span>] <span class="comment"># 爬虫爬取范围</span></span><br><span class="line">url = <span class="string">'https://book.douban.com/tag/%E7%BC%96%E7%A8%8B?start=0&amp;type=T'</span> </span><br><span class="line">start_urls = [url] <span class="comment"># 起始URL</span></span><br><span class="line"> </span><br><span class="line"><span class="comment"># spider上自定义配置信息 </span></span><br><span class="line">custom_settings = &#123; </span><br><span class="line"><span class="string">'filename'</span> : <span class="string">'o:/books.json'</span></span><br><span class="line"> &#125;</span><br><span class="line"> </span><br><span class="line"><span class="comment"># 下载器获取了WEB Server的response就行了，parse就是解析响应的内容 </span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">parse</span><span class="params">(self, response:HtmlResponse)</span>:</span> </span><br><span class="line"><span class="comment">#items = [] </span></span><br><span class="line"><span class="comment"># xpath解析 </span></span><br><span class="line"><span class="comment"># 获取下一页，只是测试，所以使用re来控制页码 </span></span><br><span class="line">print(<span class="string">'-'</span> * <span class="number">30</span>)</span><br><span class="line">urls = response.xpath(<span class="string">'//div[@class="paginator"]/span[@class="next"]/a/@href'</span>).re(</span><br><span class="line"><span class="string">r'.*start=[24]\d[^\d].*'</span>) </span><br><span class="line">print(urls)</span><br><span class="line">print(<span class="string">'-'</span> * <span class="number">30</span>)</span><br><span class="line"><span class="keyword">yield</span> <span class="keyword">from</span> (scrapy.Request(response.urljoin(url)) <span class="keyword">for</span> url <span class="keyword">in</span> urls) </span><br><span class="line">print(<span class="string">'++++++++++++++++++++++++'</span>)</span><br><span class="line"> </span><br><span class="line">subjects = response.xpath(<span class="string">'//li[@class="subject-item"]'</span>) </span><br><span class="line"><span class="keyword">for</span> subject <span class="keyword">in</span> subjects:</span><br><span class="line"><span class="comment"># 解决图书副标题拼接 </span></span><br><span class="line">title = <span class="string">""</span>.join(map(<span class="keyword">lambda</span> x:x.strip(), subject.xpath(<span class="string">'.//h2/a//text()'</span>).extract())) </span><br><span class="line">rate = subject.xpath(<span class="string">'.//span[@class="rating_nums"]/text()'</span>).extract_first() </span><br><span class="line"><span class="comment">#print(rate) # 有的没有评分，要注意可能返回None</span></span><br><span class="line"> </span><br><span class="line">item = BookItem()</span><br><span class="line">item[<span class="string">'title'</span>] = title</span><br><span class="line">item[<span class="string">'rate'</span>] = rate </span><br><span class="line"><span class="comment">#items.append(item) </span></span><br><span class="line"><span class="keyword">yield</span> item</span><br><span class="line"> </span><br><span class="line"><span class="comment">#return items</span></span><br></pre></td></tr></table></figure></p><p><code></code></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;Scrapy框架&quot;&gt;&lt;a href=&quot;#Scrapy框架&quot; class=&quot;headerlink&quot; title=&quot;Scrapy框架&quot;&gt;&lt;/a&gt;Scrapy框架&lt;/h1&gt;&lt;p&gt;Scrapy是用Python实现的一个为了爬取网站数据，提取结构性数据而编写的应用框架。 可
      
    
    </summary>
    
      <category term="爬虫" scheme="https://hubhack.github.io/categories/%E7%88%AC%E8%99%AB/"/>
    
    
      <category term="爬虫" scheme="https://hubhack.github.io/tags/%E7%88%AC%E8%99%AB/"/>
    
  </entry>
  
  <entry>
    <title>http解析, json解析</title>
    <link href="https://hubhack.github.io/%E7%88%AC%E8%99%AB/%E7%88%AC%E8%99%AB%20--%20HTML%E8%A7%A3%E6%9E%90%E3%80%81Json%E8%A7%A3%E6%9E%90/"/>
    <id>https://hubhack.github.io/爬虫/爬虫 -- HTML解析、Json解析/</id>
    <published>2019-08-22T08:41:08.954Z</published>
    <updated>2019-08-22T08:53:26.259Z</updated>
    
    <content type="html"><![CDATA[<h1 id="HTML解析"><a href="#HTML解析" class="headerlink" title="HTML解析"></a>HTML解析</h1><p>HTML的内容返回给浏览器，浏览器就会解析它，并对它渲染</p><p>HTML 超文本表示语言设计的初衷就是为了超越普通文本，让文本表现力更强</p><p>XML 扩展标记语言，不是为了代替HTML，而是觉得HTML的设计中包含了过多的格式，承担了一部分数据之外的任务，所以才设计了XML只用来描述数据</p><p>HTML和XML都有结构，使用标记形成树型的嵌套结构DOM（Document Object Model）来解析这种嵌套树型结构，浏览器往往都提供了对DOM操作的API，可以用面向对象的方式来操作DOM</p><h2 id="XPath"><a href="#XPath" class="headerlink" title="XPath"></a>XPath</h2><p><a href="http://www.w3school.com.cn/xpath/index.asp" target="_blank" rel="noopener">http://www.w3school.com.cn/xpath/index.asp</a> 中文教程<br>XPath 是一门在 XML 文档中查找信息的语言。XPath 可用来在 XML 文档中对元素和属性进行遍历</p><p>工具<br>XMLQuire win7+需要.NET框架4.0-4.5。<br>测试XML、XPath</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="utf-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bookstore</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">book</span> <span class="attr">id</span>=<span class="string">"bk101"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">author</span>&gt;</span>Gambardella, Matthew<span class="tag">&lt;/<span class="name">author</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>XML Developer's Guide<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">genre</span>&gt;</span>Computer<span class="tag">&lt;/<span class="name">genre</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">price</span>&gt;</span>44.95<span class="tag">&lt;/<span class="name">price</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">publish_date</span>&gt;</span>2000-10-01<span class="tag">&lt;/<span class="name">publish_date</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">description</span>&gt;</span>An in-depth look at creating applications</span><br><span class="line">      with XML.<span class="tag">&lt;/<span class="name">description</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">book</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">book</span> <span class="attr">id</span>=<span class="string">"bk102"</span> <span class="attr">class</span>=<span class="string">"bookinfo even"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">author</span>&gt;</span>Ralls, Kim<span class="tag">&lt;/<span class="name">author</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Midnight Rain<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">genre</span>&gt;</span>Fantasy<span class="tag">&lt;/<span class="name">genre</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">price</span>&gt;</span>5.95<span class="tag">&lt;/<span class="name">price</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">publish_date</span>&gt;</span>2000-12-16<span class="tag">&lt;/<span class="name">publish_date</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">description</span>&gt;</span>A former architect battles corporate zombies,</span><br><span class="line">      an evil sorceress, and her own childhood to become queen</span><br><span class="line">      of the world.<span class="tag">&lt;/<span class="name">description</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">book</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">book</span> <span class="attr">id</span>=<span class="string">"bk103"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">author</span>&gt;</span>Corets, Eva<span class="tag">&lt;/<span class="name">author</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Maeve Ascendant<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">genre</span>&gt;</span>Fantasy<span class="tag">&lt;/<span class="name">genre</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">price</span>&gt;</span>5.95<span class="tag">&lt;/<span class="name">price</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">publish_date</span>&gt;</span>2000-11-17<span class="tag">&lt;/<span class="name">publish_date</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">description</span>&gt;</span>After the collapse of a nanotechnology</span><br><span class="line">      society in England, the young survivors lay the</span><br><span class="line">      foundation for a new society.<span class="tag">&lt;/<span class="name">description</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">book</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">book</span> <span class="attr">id</span>=<span class="string">"bk104"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">author</span>&gt;</span>Corets, Eva<span class="tag">&lt;/<span class="name">author</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Oberon's Legacy<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">genre</span>&gt;</span>Fantasy<span class="tag">&lt;/<span class="name">genre</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">price</span>&gt;</span>5.95<span class="tag">&lt;/<span class="name">price</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">publish_date</span>&gt;</span>2001-03-10<span class="tag">&lt;/<span class="name">publish_date</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">description</span>&gt;</span>In post-apocalypse England, the mysterious</span><br><span class="line">      agent known only as Oberon helps to create a new life</span><br><span class="line">      for the inhabitants of London. Sequel to Maeve</span><br><span class="line">      Ascendant.<span class="tag">&lt;/<span class="name">description</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">book</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bookstore</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="节点"><a href="#节点" class="headerlink" title="节点"></a>节点</h3><p>在 XPath 中，有七种类型的节点：元素、属性、文本、命名空间、处理指令、注释以及文档（根）节点</p><ul><li><code>/</code>根结点</li><li><code>&lt;bookstore&gt;</code> 元素节点</li><li><code>&lt;author&gt;Corets, Eva&lt;/author&gt;</code> 元素节点</li><li><code>id=&quot;bk104&quot;</code> 是属性节点，id是元素节点book的属性</li></ul><p>节点之间的嵌套形成<strong>父子(parent、children)关系</strong><br>具有同一个父节点的不同节点是<strong>兄弟(sibling)关系</strong></p><h3 id="节点选择"><a href="#节点选择" class="headerlink" title="节点选择"></a>节点选择</h3><table><thead><tr><th style="text-align:left">操作符或表达式</th><th style="text-align:left">含义</th></tr></thead><tbody><tr><td style="text-align:left"><code>/</code></td><td style="text-align:left">从根节点开始找</td></tr><tr><td style="text-align:left"><code>//</code></td><td style="text-align:left">从当前节点开始的任意层找</td></tr><tr><td style="text-align:left"><code>.</code></td><td style="text-align:left">当前节点</td></tr><tr><td style="text-align:left"><code>..</code></td><td style="text-align:left">当前节点的父节点</td></tr><tr><td style="text-align:left">@</td><td style="text-align:left">选择属性</td></tr><tr><td style="text-align:left"><code>节点名</code></td><td style="text-align:left">选取所有这个节点名的节点</td></tr><tr><td style="text-align:left"><code>*</code></td><td style="text-align:left">匹配任意元素节点</td></tr><tr><td style="text-align:left"><code>@*</code></td><td style="text-align:left">匹配任意属性节点</td></tr><tr><td style="text-align:left"><code>node()</code></td><td style="text-align:left">匹配任意类型的节点</td></tr><tr><td style="text-align:left"><code>text()</code></td><td style="text-align:left">匹配text类型节点</td></tr></tbody></table><h3 id="谓语（Predicates）"><a href="#谓语（Predicates）" class="headerlink" title="谓语（Predicates）"></a>谓语（Predicates）</h3><p>谓语用来查找某个特定的节点或者包含某个指定的值的节点</p><ul><li><strong>谓语被嵌在方括号中</strong></li><li>谓语就是查询的条件<br>即在路径选择时，在中括号内指定查询条件<h3 id="XPath-轴（Axes）"><a href="#XPath-轴（Axes）" class="headerlink" title="XPath 轴（Axes）"></a>XPath 轴（Axes）</h3>轴的意思是相对于当前节点的节点集<br>|  轴名称| 结果 |<br>|:–|:–|<br>|<code>ancestor</code> |选取当前节点的所有先辈（父、祖父等）|<br>|<code>ancestor-or-self</code> |选取当前节点的所有先辈（父、祖父等）以及当前节点本身|<br>|<code>attribute</code> |选取当前节点的所有属性<br><code>@id</code> 等价于 <code>attribute::id</code>|<br>|<code>child</code>| 选取当前节点的所有子元素<br><code>title</code> 等价于 <code>child:title</code>|<br>|<code>descendant</code> |选取当前节点的所有后代元素（子、孙等）|<br>|<code>descendant-or-self</code> |选取当前节点的所有后代元素（子、孙等）以及当前节点本身|<br>|<code>following</code> |选取文档中当前节点的结束标签之后的所有节点|<br>|<code>namespace</code> |选取当前节点的所有命名空间节点|<br>|<code>parent</code> |选取当前节点的父节点|<br>|<code>preceding</code>| 直到所有这个节点的父辈节点，顺序选择每个父辈节点前的所有同级节点|<br>|<code>preceding-sibling</code> |选取当前节点之前的所有同级节点|<br>|<code>self</code> |选取当前节点<br><code>.</code> 等价于 <code>self::node()</code>|<h3 id="步Step"><a href="#步Step" class="headerlink" title="步Step"></a>步Step</h3>步的语法 <code>轴名称::节点测试[谓语]</code><br>|  例子| 结果 |<br>|:–|:–|<br>|<code>child::book</code>  |选取所有属于当前节点的子元素的 book 节点 |<br>|<code>attribute::lang</code>  |选取当前节点的 lang 属性 |<br>|<code>child::*</code> |选取当前节点的所有子元素 |<br>|<code>attribute::*</code>  |选取当前节点的所有属性 |<br>|<code>child::text()</code>  |选取当前节点的所有文本子节点 |<br>|<code>child::node()</code>  |选取当前节点的所有子节点 |<br>|<code>descendant::book</code>  |选取当前节点的所有 book 后代 |<br>|<code>ancestor::book</code> | 选择当前节点的所有 book 先辈 |<br>|<code>ancestor-or-self::book</code>  |选取当前节点的所有 book 先辈以及当前节点（如果此节点是 book 节点） |<br>|<code>child::*/child::price</code>  |选取当前节点的所有 price 孙节点 |<br><img src="https://img-blog.csdnimg.cn/20190729114630567.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3B5dGhvbl9scXg=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/2019072911463632.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3B5dGhvbl9scXg=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></li></ul><h3 id="XPATH实例"><a href="#XPATH实例" class="headerlink" title="XPATH实例"></a>XPATH实例</h3><p>以斜杠开始的称为绝对路径，表示从根开始</p><p>不以斜杆开始的称为相对路径，一般都是依照当前节点来计算。当前节点在上下文环境中，当前节点很可能已经不是根节点了</p><p>一般为了方便，往往xml如果层次很深，都会使用<code>//</code>来查找节点<br>|  路径表达式| 含义 |<br>|:–|:–|<br>|<code>title</code> |选取当前节点下所有title子节点|<br>|<code>/book</code> |从根结点找子节点是book的，找不到|<br>|<code>book/title</code> |当前节点下所有子节点book下的title节点|<br>|<code>//title</code> |从根节点向下找任意层中title的节点|<br>|<code>book//title</code> |当前节点下所有book子节点下任意层次的title节点|<br>|<code>//@id</code> |任意层下含有id的 <strong>属性</strong>，取回的是属性|<br>|<code>//book[@id]</code>| 任意层下含有id属性的book节点|<br>|<code>//*[@id]</code>| 任意层下含有id属性的节点|<br>|<code>//book[@id=&quot;bk102&quot;]</code>| 任意层下含有id属性且等于’bk102’的book节点|<br>|<code>/bookstore/book[1]</code> |根节点bookstore下第一个book节点，从1开始|<br>|<code>/bookstore/book[1]/@id</code>| 根节点bookstore下第一个book节点的id属性|<br>|<code>/bookstore/book[last()-1]</code>| 根节点bookstore下倒数第二个book节点，函数last()|<br>|<code>/bookstore/*</code>| 匹配根节点bookstore的所有子节点，不递归|<br>|<code>//*</code>| 匹配所有子孙节点|<br>|<code>//*[@*]</code>| 匹配所有有属性的节点|<br>|<code>//book[@*]</code>| 匹配所有有属性的book节点|<br>|<code>//@*</code>| 匹配所有属性|<br>|<code>//book/title| //price</code> |匹配book下的title节点或者任意层下的price|<br>|<code>//book[position()=2]</code>| 匹配book节点，取第二个|<br>|<code>//book[position()&lt;last()-1]</code> |匹配book节点，取位置小于倒数第二个|<br>|<code>//book[price&gt;40]</code>| 匹配price节点值大于40的book节点|<br>|<code>//book[2]/node()</code> |匹配位置为2的book节点下的所有类型的节点|<br>|<code>//book[1]/text()</code>| 匹配第一个book节点下的所有文本子节点|<br>|<code>//book[1]//text()</code>| 匹配第一个book节点下的所有文本节点|<br>|<code>//*[local-name()=&#39;book&#39;]</code>|匹配所有节点且不带限定名的节点名称为book的所有节点<br>local-name函数取不带限定名的名称|<br>|<code>//book/child::node()[local-name()=&#39;price&#39; and text()&lt;10]</code>|所有book节点的子节点中名字叫做price的且其内容小于10的节点<br>等价于 <code>//book/price[text()&lt;10]</code>|<br>||<code>//book[price&lt;6]/price</code> <br><code>//book/price[text()&lt;6]</code> <br><code>//book/child::node()[local-name()=&#39;price&#39; and text()&lt;6]</code> <br>这三种等价 |<br>|<code>//book//*[self::title or self::price]</code>|所有book节点下子孙节点，这些节点是title或者price<br>等价于<code>//book//title | //book/price</code><br> 也等价于<code>//book//*[local-name()=&#39;title&#39; or local￾name()=&#39;price&#39;]</code><br>|<code>//*[@class]</code>| 所有有class属性的节点|<br>|<code>//*[@class=&quot;bookinfo even&quot;]</code>| 所有属性为<code>&quot;bookinfo even&quot;</code>的节点|<br>|<code>//*[contains(@class, &#39;even&#39;)]</code> |属性class中包含even字符串的节点|<br>|<code>//*[contains(local-name(), &#39;book&#39;)]</code>| 标签名包含book的节点|<br><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line">//book/title</span><br><span class="line">//book//title</span><br><span class="line">//title</span><br><span class="line"></span><br><span class="line">title</span><br><span class="line">//div</span><br><span class="line">//@*</span><br><span class="line">//*[@id]</span><br><span class="line">//* 元素节点</span><br><span class="line">//text() 文本</span><br><span class="line">//node() 全部节点</span><br><span class="line">/bookstore//*</span><br><span class="line"></span><br><span class="line">//book[@id=<span class="string">"bk102"</span>]</span><br><span class="line">//book[<span class="number">2</span>]</span><br><span class="line">//book[<span class="number">2</span>]/title</span><br><span class="line">//book[<span class="number">2</span>]/title/text()</span><br><span class="line">//book[last()]/title/text()</span><br><span class="line">//book[last()]//text()</span><br><span class="line">//book[last()<span class="number">-1</span>]/title</span><br><span class="line">//book[last()<span class="number">-1</span>]/@id</span><br><span class="line"></span><br><span class="line">//book/title | //book/price</span><br><span class="line">//book/title | //book/price | //book//text()</span><br><span class="line">//book[position()=<span class="number">2</span>]</span><br><span class="line">//book[position()=<span class="number">1</span> <span class="keyword">or</span> position()=<span class="number">3</span>]</span><br><span class="line">//book[position()&gt;<span class="number">1</span> <span class="keyword">and</span> position()&lt;<span class="number">4</span>]</span><br><span class="line">//book[position() &lt; last()]/title</span><br><span class="line">//*[local-name()=<span class="string">'book'</span>] 等价 //book</span><br><span class="line"></span><br><span class="line">//book[price]/price/text()</span><br><span class="line">//book[price &gt; <span class="number">40</span>]/price</span><br><span class="line">//book/price/text()</span><br><span class="line">//book/child::node()[local-name()=<span class="string">"price"</span> <span class="keyword">and</span> text() &gt; <span class="number">10</span>]</span><br><span class="line">//book/child::price</span><br><span class="line">//title/../self::node()</span><br><span class="line">//title/ancestor::node()</span><br><span class="line">//title/ancestor::node()[starts-<span class="keyword">with</span>(local-name(), <span class="string">'book'</span>)]</span><br><span class="line">//title/ancestor::node()[contains(local-name(), <span class="string">'store'</span>)]</span><br><span class="line">//book//*[self::price <span class="keyword">or</span> self::title] 等价 //book/title | //book/price</span><br><span class="line">//book//node()[self::price <span class="keyword">or</span> self::title]</span><br><span class="line"></span><br><span class="line">//book//@<span class="class"><span class="keyword">class</span> </span></span><br><span class="line"><span class="class">//<span class="title">book</span>//*[@<span class="title">class</span>]</span></span><br><span class="line"><span class="class"></span></span><br><span class="line">&lt;book id="bk102" class="bookinfo even"&gt;</span><br><span class="line">//*[@<span class="class"><span class="keyword">class</span>]</span></span><br><span class="line">//book[@class="bookinfo even"] =表示exact</span><br><span class="line">//book[contains(@class, 'bookinfo')]</span><br><span class="line">//book[contains(@class, 'even')]</span><br></pre></td></tr></table></figure></p><h2 id="lxml"><a href="#lxml" class="headerlink" title="lxml"></a>lxml</h2><p>lxml是Python下功能丰富的XML、HTML解析库，性能非常好，是对libxml2 和 libxslt的封装</p><p>最新版支持Python 2.6+，python3支持到3.6</p><p>CentOS编译安装需要<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"># yum install libxml2-devel libxslt-devel</span><br></pre></td></tr></table></figure></p><p>注意，不同平台不一样，参看 <a href="http://lxml.de/installation.html" target="_blank" rel="noopener">http://lxml.de/installation.html</a></p><p><strong>lxml安装</strong><br><code>$ pip install lxml</code><br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> lxml <span class="keyword">import</span> etree</span><br><span class="line"></span><br><span class="line">root = etree.Element(<span class="string">'html'</span>)</span><br><span class="line">print(type(root)) <span class="comment"># &lt;class 'lxml.etree._Element'&gt;</span></span><br><span class="line">print(root.tag) <span class="comment"># html</span></span><br><span class="line"></span><br><span class="line">body = etree.Element(<span class="string">'body'</span>)</span><br><span class="line">root.append(body)</span><br><span class="line"></span><br><span class="line">print(etree.tostring(root)) <span class="comment"># b'&lt;html&gt;&lt;body/&gt;&lt;/html&gt;'</span></span><br><span class="line"></span><br><span class="line">sub = etree.SubElement(body, <span class="string">'child1'</span>) <span class="comment"># 增加子节点</span></span><br><span class="line">print(type(sub)) <span class="comment"># &lt;class 'lxml.etree._Element'&gt;</span></span><br><span class="line">sub = etree.SubElement(body, <span class="string">'child2'</span>).append(etree.Element(<span class="string">'child21'</span>))</span><br><span class="line"></span><br><span class="line">html = etree.tostring(root, pretty_print=<span class="literal">True</span>).decode()</span><br><span class="line">print(html)</span><br><span class="line"><span class="comment">#&lt;html&gt;</span></span><br><span class="line"><span class="comment">#  &lt;body&gt;</span></span><br><span class="line"><span class="comment">#    &lt;child1/&gt;</span></span><br><span class="line"><span class="comment">#    &lt;child2&gt;</span></span><br><span class="line"><span class="comment">#      &lt;child21/&gt;</span></span><br><span class="line"><span class="comment">#    &lt;/child2&gt;</span></span><br><span class="line"><span class="comment">#  &lt;/body&gt;</span></span><br><span class="line"><span class="comment">#&lt;/html&gt;</span></span><br><span class="line"></span><br><span class="line">r = etree.HTML(html)</span><br><span class="line">print(r.tag) <span class="comment"># html</span></span><br><span class="line">print(r.xpath(<span class="string">'//*[contains(local-name(), "child")]'</span>))</span><br><span class="line"><span class="comment"># [&lt;Element child1 at 0x1ee49c1de08&gt;, &lt;Element child2 at 0x1ee49c1ddc8&gt;, &lt;Element child21 at 0x1ee49c1de48&gt;]</span></span><br></pre></td></tr></table></figure></p><p>etree还提供了2个有用的函数</p><ul><li><code>etree.HTML(text)</code> 解析HTML文档，返回根节点</li><li><code>anode.xpath(&#39;xpath路径&#39;)</code> 对节点使用xpath语法<h3 id="练习：爬取“口碑榜”"><a href="#练习：爬取“口碑榜”" class="headerlink" title="练习：爬取“口碑榜”"></a>练习：爬取“口碑榜”</h3>从豆瓣电影中提取“本周口碑榜”<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> lxml <span class="keyword">import</span> etree</span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"></span><br><span class="line">url = <span class="string">'https://movie.douban.com'</span></span><br><span class="line">ua = <span class="string">"Mozilla/5.0 (Windows NT 6.1) AppleWebKit/537.36 (KHTML, like Gecko) "</span> \</span><br><span class="line">     <span class="string">"Chrome/55.0.2883.75 Safari/537.36"</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">with</span> requests.get(url, headers=&#123;<span class="string">'User-agent'</span>:ua&#125;) <span class="keyword">as</span> response:</span><br><span class="line">    content = response.text <span class="comment"># HTML内容</span></span><br><span class="line"></span><br><span class="line">    html = etree.HTML(content) <span class="comment"># 分析HTML，返回DOM根节点</span></span><br><span class="line">    titles = html.xpath(<span class="string">"//div[@class='billboard-bd']//tr/td/a/text()"</span>) <span class="comment"># 返回文本列表</span></span><br><span class="line">    <span class="keyword">for</span> t <span class="keyword">in</span> titles: <span class="comment"># 豆瓣电影之 本周口碑榜</span></span><br><span class="line">        print(t)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 执行结果        </span></span><br><span class="line">哪吒之魔童降世</span><br><span class="line">痛苦与荣耀</span><br><span class="line">疾速备战</span><br><span class="line">老男孩</span><br><span class="line">策马狂奔</span><br><span class="line"><span class="number">1988</span>年的妮可</span><br><span class="line">尤利</span><br><span class="line">了不起的巴斯特</span><br><span class="line">铁道：家色</span><br><span class="line">惊慌妈妈</span><br></pre></td></tr></table></figure></li></ul><p><img src="https://img-blog.csdnimg.cn/20190729163431337.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3B5dGhvbl9scXg=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h2 id="BeautifulSoup4"><a href="#BeautifulSoup4" class="headerlink" title="BeautifulSoup4"></a>BeautifulSoup4</h2><p>BeautifulSoup可以从HTML、XML中提取数据。目前BS4在持续开发</p><p>官方中文文档<br><a href="https://www.crummy.com/software/BeautifulSoup/bs4/doc.zh/" target="_blank" rel="noopener">https://www.crummy.com/software/BeautifulSoup/bs4/doc.zh/</a></p><h3 id="安装"><a href="#安装" class="headerlink" title="安装"></a><strong>安装</strong></h3><p><code>$ pip install beautifulsoup4</code></p><p><strong>导入</strong><br><code>from bs4 import BeautifulSoup</code></p><h3 id="初始化"><a href="#初始化" class="headerlink" title="初始化"></a><strong>初始化</strong></h3><p><code>BeautifulSoup(markup=&quot;&quot;, features=None)</code></p><ul><li>markup，被解析对象，可以是文件对象或者html字符串</li><li>features指定解析器</li><li>返回一个文档对象</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> bs4 <span class="keyword">import</span> BeautifulSoup</span><br><span class="line"></span><br><span class="line"><span class="comment"># 文件对象</span></span><br><span class="line">soup = BeautifulSoup(open(<span class="string">"test.html"</span>))</span><br><span class="line"></span><br><span class="line"><span class="comment"># 标记字符串</span></span><br><span class="line">soup = BeautifulSoup(<span class="string">"&lt;html&gt;data&lt;/html&gt;"</span>)</span><br></pre></td></tr></table></figure><p>可以不指定解析器，就依赖系统已经安装的解析器库了<br><img src="https://img-blog.csdnimg.cn/20190729164352440.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3B5dGhvbl9scXg=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><ul><li><code>BeautifulSoup(markup, &quot;html.parser&quot;)</code> 使用Python标准库，容错差且性能一般</li><li><code>BeautifulSoup(markup, &quot;lxml&quot;)</code> 容错能力强，速度快。需要安装系统C库</li><li>推荐使用lxml作为解析器，效率高</li><li>请手动指定解析器，以保证代码在所有运行环境中解析器一致</li></ul><p>使用下面内容构建test.html使用bs4解析它<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>首页<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>helloworld<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"main"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h3</span> <span class="attr">class</span>=<span class="string">"title highlight"</span>&gt;</span>python高级班<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"content"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">p</span> <span class="attr">id</span>=<span class="string">'first'</span>&gt;</span>字典<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">p</span> <span class="attr">id</span>=<span class="string">'second'</span>&gt;</span>列表<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"hidden"</span> <span class="attr">name</span>=<span class="string">"_csrf"</span> <span class="attr">value</span>=<span class="string">"7139e401481ef2f46ce98b22af4f4bed"</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- comment --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">img</span> <span class="attr">id</span>=<span class="string">"bg1"</span> <span class="attr">src</span>=<span class="string">"http://www.bing.cn/"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">img</span> <span class="attr">id</span>=<span class="string">"bg2"</span> <span class="attr">src</span>=<span class="string">"http://httpbin.org/"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>bottom<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure></p><h3 id="四种对象"><a href="#四种对象" class="headerlink" title="四种对象"></a>四种对象</h3><p>BeautifulSoup将HTML文档解析成复杂的树型结构，每个节点都是Python的对象，可分为4种：</p><ul><li>BeautifulSoup、Tag、NavigableString、Comment</li></ul><h4 id="BeautifulSoup对象"><a href="#BeautifulSoup对象" class="headerlink" title="BeautifulSoup对象"></a>BeautifulSoup对象</h4><p>BeautifulSoup对象代表整个文档</p><h4 id="Tag对象"><a href="#Tag对象" class="headerlink" title="Tag对象"></a>Tag对象</h4><p>它对应着HTML中的标签。有2个常用的属性：</p><ol><li>name：Tag对象的名称，就是标签名称</li><li>attrs：标签的属性字典<br> 多值属性，对于class属性可能是下面的形式， <code>&lt;h3 class=&quot;title highlight&quot;&gt;python高级班&lt;/h3&gt;</code> ，这个属性就是多值<code>({&#39;class&#39;: [&#39;title&#39;, &#39;highlight&#39;]})</code><br> 属性可以被修改、删除<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> bs4 <span class="keyword">import</span> BeautifulSoup</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">with</span> open(<span class="string">'d:/test.html'</span>, encoding=<span class="string">'utf-8'</span>) <span class="keyword">as</span> f:</span><br><span class="line">    soup = BeautifulSoup(f, <span class="string">'lxml'</span>)</span><br><span class="line">    print(soup.builder) <span class="comment"># &lt;bs4.builder._lxml.LXMLTreeBuilder object at 0x000001D75A2D5C88&gt;</span></span><br><span class="line">    print(soup) <span class="comment"># 输出整个解析的文档对象</span></span><br><span class="line">    print(soup.prettify()) <span class="comment"># # 格式输出</span></span><br><span class="line">    print(soup.div, type(soup.div)) <span class="comment"># bs4.element.Tag, Tag对象</span></span><br><span class="line">    print(soup.div.name, soup.div.attrs) <span class="comment"># div &#123;'id': 'main'&#125;</span></span><br><span class="line">    print(soup.div[<span class="string">'class'</span>]) <span class="comment"># KeyError: div没有class属性</span></span><br><span class="line">    print(soup.div.get(<span class="string">'class'</span>)) <span class="comment"># None</span></span><br><span class="line">    print(soup.h3[<span class="string">'class'</span>]) <span class="comment"># 多值属性 ['title', 'highlight']</span></span><br><span class="line">    print(soup.h3.get(<span class="string">'class'</span>)) <span class="comment"># ['title', 'highlight']</span></span><br><span class="line">    print(soup.h3.attrs.get(<span class="string">'class'</span>)) <span class="comment"># ['title', 'highlight']</span></span><br><span class="line">    print(soup.img.get(<span class="string">'src'</span>)) <span class="comment"># http://www.bing.cn/</span></span><br><span class="line">    soup.img[<span class="string">'src'</span>] = <span class="string">'http://www.python.org/'</span><span class="comment"># 修改属性</span></span><br><span class="line">    print(soup.img[<span class="string">'src'</span>]) <span class="comment"># http://www.python.org/</span></span><br><span class="line">    print(soup.a)  <span class="comment"># 找不到返回None</span></span><br><span class="line">    <span class="keyword">del</span> soup.h3[<span class="string">'class'</span>]  <span class="comment"># 删除属性</span></span><br><span class="line">    print(soup.h3.get(<span class="string">'class'</span>)) <span class="comment"># None</span></span><br></pre></td></tr></table></figure></li></ol><p>注意，一般不使用上面这种方式来操作HTML，此代码是为了熟悉对象类型</p><h4 id="NavigableString"><a href="#NavigableString" class="headerlink" title="NavigableString"></a>NavigableString</h4><p>如果只想输出标记内的文本，而不关心标记的话，就要使用NavigableString<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">print(soup.div.p.string) <span class="comment"># 第一个div下第一个p的字符串</span></span><br><span class="line">print(soup.p.string) <span class="comment"># 同上</span></span><br></pre></td></tr></table></figure></p><h4 id="注释对象"><a href="#注释对象" class="headerlink" title="注释对象"></a>注释对象</h4><p>这就是HTML中的注释，它被BeautifulSoup解析后对应Comment对象</p><h3 id="遍历文档树"><a href="#遍历文档树" class="headerlink" title="遍历文档树"></a>遍历文档树</h3><p>在文档树中找到关心的内容才是日常的工作，也就是说如何遍历树中的节点。使用上面的<code>test.html</code>来测试</p><h4 id="使用Tag"><a href="#使用Tag" class="headerlink" title="使用Tag"></a>使用Tag</h4><ul><li><code>soup.div</code> 可以找到从根节点开始查找第一个div节点</li><li><code>soup.div.p</code> 说明从根节点开始找到第一个div后返回一个Tag对象，这个Tag对象下继续找第一个p，找到返回Tag对象</li><li><code>soup.p</code> 说明遍历是深度优先，返回了文字“字典”，而不是文字<code>“bottom”</code></li></ul><h4 id="遍历直接子节点"><a href="#遍历直接子节点" class="headerlink" title="遍历直接子节点"></a>遍历直接子节点</h4><ul><li><code>print(soup.div.contents)</code> # 将对象的所有类型直接子节点以列表方式输出</li><li><code>print(soup.div.children)</code> # 返回子节点的迭代器</li><li><code>print(list(soup.div.children))</code> # 等价于<code>soup.div.contents</code></li></ul><h4 id="遍历所有子孙节点"><a href="#遍历所有子孙节点" class="headerlink" title="遍历所有子孙节点"></a>遍历所有子孙节点</h4><p><code>print(list(soup.div.descendants))</code> # 返回第一个div节点的所有类型子孙节点，可以看出迭代次序是深度优先<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> bs4 <span class="keyword">import</span> BeautifulSoup</span><br><span class="line"><span class="keyword">from</span> bs4.element <span class="keyword">import</span> Tag</span><br><span class="line"></span><br><span class="line"><span class="keyword">with</span> open(<span class="string">'d:/test.html'</span>, encoding=<span class="string">'utf-8'</span>) <span class="keyword">as</span> f:</span><br><span class="line">    soup = BeautifulSoup(f, <span class="string">'lxml'</span>)</span><br><span class="line">    print(soup.p.string) <span class="comment"># 字典</span></span><br><span class="line">    print(<span class="string">'-'</span> * <span class="number">30</span>)</span><br><span class="line">    print(soup.div.contents)</span><br><span class="line">    print(<span class="string">'='</span> * <span class="number">30</span>)</span><br><span class="line">    <span class="keyword">for</span> c <span class="keyword">in</span> soup.div.children:</span><br><span class="line">        print(c.name)</span><br><span class="line">    print(<span class="string">'~'</span> * <span class="number">30</span>)</span><br><span class="line">    print(list(map(</span><br><span class="line">        <span class="keyword">lambda</span> x:x.name <span class="keyword">if</span> x.name <span class="keyword">else</span> x,</span><br><span class="line">        soup.div.descendants)))</span><br><span class="line"></span><br><span class="line"><span class="comment"># 执行结果</span></span><br><span class="line">字典</span><br><span class="line">------------------------------</span><br><span class="line">['\n', &lt;h3 class="title highlight"&gt;python高级班&lt;/h3&gt;, '\n', &lt;div class="content"&gt;</span><br><span class="line">&lt;p id="first"&gt;字典&lt;/p&gt;</span><br><span class="line">&lt;p id="second"&gt;列表&lt;/p&gt;</span><br><span class="line">&lt;input name=<span class="string">"_csrf"</span> type=<span class="string">"hidden"</span> value=<span class="string">"7139e401481ef2f46ce98b22af4f4bed"</span>/&gt;</span><br><span class="line">&lt;!-- comment --&gt;</span><br><span class="line">&lt;img id=<span class="string">"bg1"</span> src=<span class="string">"http://www.bing.cn/"</span>/&gt;</span><br><span class="line">&lt;img id=<span class="string">"bg2"</span> src=<span class="string">"http://httpbin.org/"</span>/&gt;</span><br><span class="line">&lt;/div&gt;, '\n']</span><br><span class="line">==============================</span><br><span class="line"><span class="literal">None</span></span><br><span class="line">h3</span><br><span class="line"><span class="literal">None</span></span><br><span class="line">div</span><br><span class="line"><span class="literal">None</span></span><br><span class="line">~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~</span><br><span class="line">[<span class="string">'\n'</span>, <span class="string">'h3'</span>, <span class="string">'python高级班'</span>, <span class="string">'\n'</span>, <span class="string">'div'</span>, <span class="string">'\n'</span>, <span class="string">'p'</span>, <span class="string">'字典'</span>, <span class="string">'\n'</span>, <span class="string">'p'</span>, <span class="string">'列表'</span>, <span class="string">'\n'</span>, <span class="string">'input'</span>, <span class="string">'\n'</span>, <span class="string">' comment '</span>, <span class="string">'\n'</span>, <span class="string">'img'</span>, <span class="string">'\n'</span>, <span class="string">'img'</span>, <span class="string">'\n'</span>, <span class="string">'\n'</span>]</span><br></pre></td></tr></table></figure></p><h4 id="遍历字符串"><a href="#遍历字符串" class="headerlink" title="遍历字符串"></a>遍历字符串</h4><p>在前面的例子中，soup.div.string返回None，是因为string要求soup.div只能有一个NavigableString类型子节点，也就是如这样 <code>&lt;div&gt;only string&lt;/div&gt;</code></p><p>如果div有很多子孙节点，如何提取字符串<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">print(soup.div.string) <span class="comment"># 返回None，因为多于1个子节点</span></span><br><span class="line">print(<span class="string">""</span>.join(soup.div.strings)) <span class="comment"># 返回迭代器，带多余的空白字符</span></span><br><span class="line">print(<span class="string">""</span>.join(soup.div.stripped_strings)) <span class="comment"># 返回迭代器，去除多余空白符</span></span><br></pre></td></tr></table></figure></p><h4 id="遍历祖先节点"><a href="#遍历祖先节点" class="headerlink" title="遍历祖先节点"></a>遍历祖先节点</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">print(soup.parent) <span class="comment"># None 根节点没有父节点</span></span><br><span class="line">print(soup.div.parent.name) <span class="comment"># body，第一个div的父节点</span></span><br><span class="line">print(soup.p.parent.parent.get(<span class="string">'id'</span>)) <span class="comment"># 取id属性，main</span></span><br><span class="line">print(list(map(<span class="keyword">lambda</span> x: x.name, soup.p.parents))) <span class="comment"># 父迭代器，由近及远</span></span><br></pre></td></tr></table></figure><h4 id="遍历兄弟节点"><a href="#遍历兄弟节点" class="headerlink" title="遍历兄弟节点"></a>遍历兄弟节点</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">print(<span class="string">'&#123;&#125; [&#123;&#125;]'</span>.format(<span class="number">1</span>, soup.p.next_sibling)) <span class="comment"># 第一个p元素的下一个兄弟节点，注意可能是一个文本节点</span></span><br><span class="line">print(<span class="string">'&#123;&#125; [&#123;&#125;]'</span>.format(<span class="number">2</span>, soup.p.previous_sibling))</span><br><span class="line">print(list(soup.p.next_siblings)) <span class="comment"># previous_siblings</span></span><br></pre></td></tr></table></figure><h4 id="遍历其他元素"><a href="#遍历其他元素" class="headerlink" title="遍历其他元素"></a>遍历其他元素</h4><p><code>next_element</code>是下一个可被解析的对象（字符串或tag），和下一个兄弟节点<code>next_sibling</code>不一样<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">print(soup.p.next_element) <span class="comment"># 返回"字典"2个字</span></span><br><span class="line">print(soup.p.next_element.next_element.next_element)</span><br><span class="line">print(list(soup.p.next_elements))</span><br></pre></td></tr></table></figure></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> bs4 <span class="keyword">import</span> BeautifulSoup</span><br><span class="line"><span class="keyword">from</span> bs4.element <span class="keyword">import</span> Tag</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">with</span> open(<span class="string">'d:/test.html'</span>, encoding=<span class="string">'utf-8'</span>) <span class="keyword">as</span> f:</span><br><span class="line">    soup = BeautifulSoup(f, <span class="string">'lxml'</span>) <span class="comment"># 字典</span></span><br><span class="line">    print(soup.p.next_element)</span><br><span class="line">    print(<span class="string">'-'</span> * <span class="number">30</span>)</span><br><span class="line">    print(soup.p.next_element.next_element.next_element)</span><br><span class="line">    print(<span class="string">'='</span> * <span class="number">30</span>)</span><br><span class="line">    print(soup.p.next_sibling.next_sibling.next_sibling)</span><br><span class="line">    print(<span class="string">'~'</span> * <span class="number">30</span>)</span><br><span class="line">    <span class="comment"># 对比下面的差异</span></span><br><span class="line">    print(list(soup.p.next_elements))</span><br><span class="line">    print(<span class="string">'*'</span> * <span class="number">30</span>)</span><br><span class="line">    print(list(soup.p.next_siblings))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 执行结果</span></span><br><span class="line">字典</span><br><span class="line">------------------------------</span><br><span class="line">&lt;p id="second"&gt;列表&lt;/p&gt;</span><br><span class="line">==============================</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~</span><br><span class="line">['字典', '\n', &lt;p id="second"&gt;列表&lt;/p&gt;, '列表', '\n',\</span><br><span class="line"> &lt;input name=<span class="string">"_csrf"</span> type=<span class="string">"hidden"</span> value=<span class="string">"7139e401481ef2f46ce98b22af4f4bed"</span>/&gt;, \</span><br><span class="line"> <span class="string">'\n'</span>, <span class="string">' comment '</span>, <span class="string">'\n'</span>, &lt;img id=<span class="string">"bg1"</span> src=<span class="string">"http://www.bing.cn/"</span>/&gt;, \</span><br><span class="line"> '\n', &lt;img id="bg2" src="http://httpbin.org/"/&gt;, '\n', '\n', '\n', &lt;p&gt;bottom&lt;/p&gt;, 'bottom', '\n', '\n']</span><br><span class="line">******************************</span><br><span class="line">['\n', &lt;p id="second"&gt;列表&lt;/p&gt;, '\n', &lt;input name="_csrf" type="hidden" value="7139e401481ef2f46ce98b22af4f4bed"/&gt;, \</span><br><span class="line"><span class="string">'\n'</span>, <span class="string">' comment '</span>, <span class="string">'\n'</span>, &lt;img id=<span class="string">"bg1"</span> src=<span class="string">"http://www.bing.cn/"</span>/&gt;, <span class="string">'\n'</span>, \</span><br><span class="line">&lt;img id=<span class="string">"bg2"</span> src=<span class="string">"http://httpbin.org/"</span>/&gt;, <span class="string">'\n'</span>]</span><br></pre></td></tr></table></figure><h3 id="搜索文档树"><a href="#搜索文档树" class="headerlink" title="搜索文档树"></a>搜索文档树</h3><p>find系有很多方法，请自行查帮助</p><p>find_all方法，立即返回一个列表<br><code>find_all(name=None, attrs={}, recursive=True, text=None, limit=None, **kwargs)</code></p><h4 id="name"><a href="#name" class="headerlink" title="name"></a>name</h4><p>官方称为<strong>filter过滤器</strong>，这个参数可以是以下类型：</p><ol><li><p>字符串<br>一个标签名称的字符串，会按照这个字符串全长匹配标签名</p> <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">print(soup.find_all(<span class="string">'p'</span>)) <span class="comment"># 返回文档中所有p标签</span></span><br></pre></td></tr></table></figure></li><li><p>正则表达式对象<br>按照“正则表达式对象”的模式匹配标签名</p> <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> reprint(soup.find_all(re.compile(<span class="string">'^h\d'</span>))) <span class="comment"># 标签名以h开头后接数字</span></span><br></pre></td></tr></table></figure></li><li><p>列表</p> <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">print(soup.find_all([<span class="string">'p'</span>, <span class="string">'h1'</span>, <span class="string">'h3'</span>])) <span class="comment"># 或关系，找出列表所有的标签</span></span><br><span class="line">print(soup.find_all(re.compile(<span class="string">r'^(p|h\d)$'</span>))) <span class="comment"># 使用正则完成</span></span><br></pre></td></tr></table></figure></li><li><p>True或None<br>True或None，则<code>find_all</code>返回全部非字符串节点、非注释节点，就是Tag标签类型</p> <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">print(list(map(<span class="keyword">lambda</span> x:x.name, soup.find_all(<span class="literal">True</span>))))</span><br><span class="line">print(list(map(<span class="keyword">lambda</span> x:x.name, soup.find_all(<span class="literal">None</span>))))</span><br><span class="line">print(list(map(<span class="keyword">lambda</span> x:x.name, soup.find_all())))</span><br></pre></td></tr></table></figure></li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> bs4 <span class="keyword">import</span> BeautifulSoup</span><br><span class="line"><span class="keyword">from</span> bs4.element <span class="keyword">import</span> Tag</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">with</span> open(<span class="string">'d:/test.html'</span>, encoding=<span class="string">'utf-8'</span>) <span class="keyword">as</span> f:</span><br><span class="line">    soup = BeautifulSoup(f, <span class="string">'lxml'</span>)</span><br><span class="line">    values = [<span class="literal">True</span>, <span class="literal">None</span>, <span class="literal">False</span>]</span><br><span class="line">    <span class="keyword">for</span> value <span class="keyword">in</span> values:</span><br><span class="line">        all = soup.find_all(value)</span><br><span class="line">        print(type(all[<span class="number">0</span>]))</span><br><span class="line">        print(len(all))</span><br><span class="line"></span><br><span class="line">    print(<span class="string">'-'</span> * <span class="number">30</span>)</span><br><span class="line">    count = <span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span> i,t <span class="keyword">in</span> enumerate(soup.descendants):</span><br><span class="line">        print(i, type(t), t.name)</span><br><span class="line">        <span class="keyword">if</span> isinstance(t, Tag):<span class="comment"># 只对Tag类型计数</span></span><br><span class="line">            count +=<span class="number">1</span></span><br><span class="line">    print(count)</span><br><span class="line"><span class="comment"># 执行结果</span></span><br><span class="line">&lt;<span class="class"><span class="keyword">class</span> '<span class="title">bs4</span>.<span class="title">element</span>.<span class="title">Tag</span>'&gt;</span></span><br><span class="line"><span class="class">15</span></span><br><span class="line"><span class="class">&lt;<span class="title">class</span> '<span class="title">bs4</span>.<span class="title">element</span>.<span class="title">Tag</span>'&gt;</span></span><br><span class="line"><span class="class">15</span></span><br><span class="line"><span class="class">&lt;<span class="title">class</span> '<span class="title">bs4</span>.<span class="title">element</span>.<span class="title">Tag</span>'&gt;</span></span><br><span class="line"><span class="class">15</span></span><br><span class="line"><span class="class">------------------------------</span></span><br><span class="line"><span class="class">0 &lt;<span class="title">class</span> '<span class="title">bs4</span>.<span class="title">element</span>.<span class="title">Doctype</span>'&gt; <span class="title">None</span></span></span><br><span class="line"><span class="class">1 &lt;<span class="title">class</span> '<span class="title">bs4</span>.<span class="title">element</span>.<span class="title">Tag</span>'&gt; <span class="title">html</span></span></span><br><span class="line"><span class="class">2 &lt;<span class="title">class</span> '<span class="title">bs4</span>.<span class="title">element</span>.<span class="title">NavigableString</span>'&gt; <span class="title">None</span></span></span><br><span class="line"><span class="class">3 &lt;<span class="title">class</span> '<span class="title">bs4</span>.<span class="title">element</span>.<span class="title">Tag</span>'&gt; <span class="title">head</span></span></span><br><span class="line"><span class="class">4 &lt;<span class="title">class</span> '<span class="title">bs4</span>.<span class="title">element</span>.<span class="title">NavigableString</span>'&gt; <span class="title">None</span></span></span><br><span class="line"><span class="class">5 &lt;<span class="title">class</span> '<span class="title">bs4</span>.<span class="title">element</span>.<span class="title">Tag</span>'&gt; <span class="title">meta</span></span></span><br><span class="line"><span class="class">6 &lt;<span class="title">class</span> '<span class="title">bs4</span>.<span class="title">element</span>.<span class="title">NavigableString</span>'&gt; <span class="title">None</span></span></span><br><span class="line"><span class="class">7 &lt;<span class="title">class</span> '<span class="title">bs4</span>.<span class="title">element</span>.<span class="title">Tag</span>'&gt; <span class="title">title</span></span></span><br><span class="line"><span class="class">8 &lt;<span class="title">class</span> '<span class="title">bs4</span>.<span class="title">element</span>.<span class="title">NavigableString</span>'&gt; <span class="title">None</span></span></span><br><span class="line"><span class="class">9 &lt;<span class="title">class</span> '<span class="title">bs4</span>.<span class="title">element</span>.<span class="title">NavigableString</span>'&gt; <span class="title">None</span></span></span><br><span class="line"><span class="class">10 &lt;<span class="title">class</span> '<span class="title">bs4</span>.<span class="title">element</span>.<span class="title">NavigableString</span>'&gt; <span class="title">None</span></span></span><br><span class="line"><span class="class">11 &lt;<span class="title">class</span> '<span class="title">bs4</span>.<span class="title">element</span>.<span class="title">Tag</span>'&gt; <span class="title">body</span></span></span><br><span class="line"><span class="class">12 &lt;<span class="title">class</span> '<span class="title">bs4</span>.<span class="title">element</span>.<span class="title">NavigableString</span>'&gt; <span class="title">None</span></span></span><br><span class="line"><span class="class">13 &lt;<span class="title">class</span> '<span class="title">bs4</span>.<span class="title">element</span>.<span class="title">Tag</span>'&gt; <span class="title">h1</span></span></span><br><span class="line"><span class="class">14 &lt;<span class="title">class</span> '<span class="title">bs4</span>.<span class="title">element</span>.<span class="title">NavigableString</span>'&gt; <span class="title">None</span></span></span><br><span class="line"><span class="class">15 &lt;<span class="title">class</span> '<span class="title">bs4</span>.<span class="title">element</span>.<span class="title">NavigableString</span>'&gt; <span class="title">None</span></span></span><br><span class="line"><span class="class">16 &lt;<span class="title">class</span> '<span class="title">bs4</span>.<span class="title">element</span>.<span class="title">Tag</span>'&gt; <span class="title">div</span></span></span><br><span class="line"><span class="class">17 &lt;<span class="title">class</span> '<span class="title">bs4</span>.<span class="title">element</span>.<span class="title">NavigableString</span>'&gt; <span class="title">None</span></span></span><br><span class="line"><span class="class">18 &lt;<span class="title">class</span> '<span class="title">bs4</span>.<span class="title">element</span>.<span class="title">Tag</span>'&gt; <span class="title">h3</span></span></span><br><span class="line"><span class="class">19 &lt;<span class="title">class</span> '<span class="title">bs4</span>.<span class="title">element</span>.<span class="title">NavigableString</span>'&gt; <span class="title">None</span></span></span><br><span class="line"><span class="class">20 &lt;<span class="title">class</span> '<span class="title">bs4</span>.<span class="title">element</span>.<span class="title">NavigableString</span>'&gt; <span class="title">None</span></span></span><br><span class="line"><span class="class">21 &lt;<span class="title">class</span> '<span class="title">bs4</span>.<span class="title">element</span>.<span class="title">Tag</span>'&gt; <span class="title">div</span></span></span><br><span class="line"><span class="class">22 &lt;<span class="title">class</span> '<span class="title">bs4</span>.<span class="title">element</span>.<span class="title">NavigableString</span>'&gt; <span class="title">None</span></span></span><br><span class="line"><span class="class">23 &lt;<span class="title">class</span> '<span class="title">bs4</span>.<span class="title">element</span>.<span class="title">Tag</span>'&gt; <span class="title">p</span></span></span><br><span class="line"><span class="class">24 &lt;<span class="title">class</span> '<span class="title">bs4</span>.<span class="title">element</span>.<span class="title">NavigableString</span>'&gt; <span class="title">None</span></span></span><br><span class="line"><span class="class">25 &lt;<span class="title">class</span> '<span class="title">bs4</span>.<span class="title">element</span>.<span class="title">NavigableString</span>'&gt; <span class="title">None</span></span></span><br><span class="line"><span class="class">26 &lt;<span class="title">class</span> '<span class="title">bs4</span>.<span class="title">element</span>.<span class="title">Tag</span>'&gt; <span class="title">p</span></span></span><br><span class="line"><span class="class">27 &lt;<span class="title">class</span> '<span class="title">bs4</span>.<span class="title">element</span>.<span class="title">NavigableString</span>'&gt; <span class="title">None</span></span></span><br><span class="line"><span class="class">28 &lt;<span class="title">class</span> '<span class="title">bs4</span>.<span class="title">element</span>.<span class="title">NavigableString</span>'&gt; <span class="title">None</span></span></span><br><span class="line"><span class="class">29 &lt;<span class="title">class</span> '<span class="title">bs4</span>.<span class="title">element</span>.<span class="title">Tag</span>'&gt; <span class="title">input</span></span></span><br><span class="line"><span class="class">30 &lt;<span class="title">class</span> '<span class="title">bs4</span>.<span class="title">element</span>.<span class="title">NavigableString</span>'&gt; <span class="title">None</span></span></span><br><span class="line"><span class="class">31 &lt;<span class="title">class</span> '<span class="title">bs4</span>.<span class="title">element</span>.<span class="title">Comment</span>'&gt; <span class="title">None</span></span></span><br><span class="line"><span class="class">32 &lt;<span class="title">class</span> '<span class="title">bs4</span>.<span class="title">element</span>.<span class="title">NavigableString</span>'&gt; <span class="title">None</span></span></span><br><span class="line"><span class="class">33 &lt;<span class="title">class</span> '<span class="title">bs4</span>.<span class="title">element</span>.<span class="title">Tag</span>'&gt; <span class="title">img</span></span></span><br><span class="line"><span class="class">34 &lt;<span class="title">class</span> '<span class="title">bs4</span>.<span class="title">element</span>.<span class="title">NavigableString</span>'&gt; <span class="title">None</span></span></span><br><span class="line"><span class="class">35 &lt;<span class="title">class</span> '<span class="title">bs4</span>.<span class="title">element</span>.<span class="title">Tag</span>'&gt; <span class="title">img</span></span></span><br><span class="line"><span class="class">36 &lt;<span class="title">class</span> '<span class="title">bs4</span>.<span class="title">element</span>.<span class="title">NavigableString</span>'&gt; <span class="title">None</span></span></span><br><span class="line"><span class="class">37 &lt;<span class="title">class</span> '<span class="title">bs4</span>.<span class="title">element</span>.<span class="title">NavigableString</span>'&gt; <span class="title">None</span></span></span><br><span class="line"><span class="class">38 &lt;<span class="title">class</span> '<span class="title">bs4</span>.<span class="title">element</span>.<span class="title">NavigableString</span>'&gt; <span class="title">None</span></span></span><br><span class="line"><span class="class">39 &lt;<span class="title">class</span> '<span class="title">bs4</span>.<span class="title">element</span>.<span class="title">Tag</span>'&gt; <span class="title">p</span></span></span><br><span class="line"><span class="class">40 &lt;<span class="title">class</span> '<span class="title">bs4</span>.<span class="title">element</span>.<span class="title">NavigableString</span>'&gt; <span class="title">None</span></span></span><br><span class="line"><span class="class">41 &lt;<span class="title">class</span> '<span class="title">bs4</span>.<span class="title">element</span>.<span class="title">NavigableString</span>'&gt; <span class="title">None</span></span></span><br><span class="line"><span class="class">42 &lt;<span class="title">class</span> '<span class="title">bs4</span>.<span class="title">element</span>.<span class="title">NavigableString</span>'&gt; <span class="title">None</span></span></span><br><span class="line"><span class="class">15</span></span><br></pre></td></tr></table></figure><p>数目一致，所以返回的是Tag类型的节点，源码中确实返回的Tag类型</p><pre><code>5. 函数如果使用以上过滤器还不能提取出想要的节点，可以使用函数，此函数仅只能接收一个参数如果这个函数返回True，表示当前节点匹配；返回False则是不匹配</code></pre><ul><li>练习：找出所有有class属性且有多个值的节点<br>符合这个要求只有h3标签<figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> bs4 <span class="keyword">import</span> BeautifulSoup</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">many_classes</span><span class="params">(tag)</span>:</span></span><br><span class="line">    <span class="comment"># print(type(tag))</span></span><br><span class="line">    <span class="comment"># print(tag.attrs)</span></span><br><span class="line">    <span class="keyword">return</span> len(tag.attrs.get(<span class="string">'class'</span>, [])) &gt; <span class="number">1</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">with</span> open(<span class="string">'d:/test.html'</span>, encoding=<span class="string">'utf-8'</span>) <span class="keyword">as</span> f:</span><br><span class="line">    soup = BeautifulSoup(f, <span class="string">'lxml'</span>)</span><br><span class="line">    print(soup.find_all(many_classes))</span><br><span class="line"></span><br><span class="line"><span class="comment"># 执行结果</span></span><br><span class="line">[&lt;h3 class="title highlight"&gt;python高级班&lt;/h3&gt;]</span><br></pre></td></tr></table></figure></li></ul><h4 id="keyword传参"><a href="#keyword传参" class="headerlink" title="keyword传参"></a>keyword传参</h4><p>使用关键字传参，如果参数名不是find系函数已定义的位置参数名，参数会被kwargs收集并被当做标签的属性来搜索<br>属性的传参可以是字符串、正则表达式对象、True、列表<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">print(soup.find_all(id=<span class="string">'first'</span>)) <span class="comment"># id为first的所有节点列表</span></span><br><span class="line">print(soup.find_all(id=re.compile(<span class="string">'\w+'</span>))) <span class="comment"># 相当于找有id的所有节点</span></span><br><span class="line">print(soup.find_all(id=<span class="literal">True</span>)) <span class="comment"># 所有有id的节点</span></span><br><span class="line">print(list(map(<span class="keyword">lambda</span> x:x[<span class="string">'id'</span>], soup.find_all(id=<span class="literal">True</span>))))</span><br><span class="line">print(soup.find_all(id=[<span class="string">'first'</span>, re.compile(<span class="string">r'^sec'</span>)])) <span class="comment"># 指定id的名称列表</span></span><br><span class="line">print(soup.find_all(id=<span class="literal">True</span>, src=<span class="literal">True</span>)) <span class="comment"># 相当于条件and，既有id又有src属性的节点列表</span></span><br></pre></td></tr></table></figure></p><h4 id="css的class的特殊处理"><a href="#css的class的特殊处理" class="headerlink" title="css的class的特殊处理"></a>css的class的特殊处理</h4><p>class是Python关键字，所以使用 <code>class_</code> 。class是多值属性，可以匹配其中任意一个，也可以可以完全匹配<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">print(soup.find_all(class_=<span class="string">"content"</span>))</span><br><span class="line">print(soup.find_all(class_=<span class="string">"title"</span>)) <span class="comment"># 可以使用任意一个css类</span></span><br><span class="line">print(soup.find_all(class_=<span class="string">"highlight"</span>)) <span class="comment"># 可以使用任意一个css类</span></span><br><span class="line">print(soup.find_all(class_=<span class="string">"highlight title"</span>)) <span class="comment"># 顺序错了，找不到</span></span><br><span class="line">print(soup.find_all(class_=<span class="string">"title highlight"</span>)) <span class="comment"># 顺序一致，找到，就是字符串完全匹配</span></span><br></pre></td></tr></table></figure></p><h4 id="attrs参数"><a href="#attrs参数" class="headerlink" title="attrs参数"></a>attrs参数</h4><p>attrs接收一个字典，字典的key为属性名，value可以是字符串、正则表达式对象、True、列表。可以多个属性<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">print(soup.find_all(attrs=&#123;<span class="string">'class'</span>:<span class="string">'title'</span>&#125;))</span><br><span class="line">print(soup.find_all(attrs=&#123;<span class="string">'class'</span>:<span class="string">'highlight'</span>&#125;))</span><br><span class="line">print(soup.find_all(attrs=&#123;<span class="string">'class'</span>:<span class="string">'title highlight'</span>&#125;))</span><br><span class="line">print(soup.find_all(attrs=&#123;<span class="string">'id'</span>:<span class="literal">True</span>&#125;))</span><br><span class="line">print(soup.find_all(attrs=&#123;<span class="string">'id'</span>:re.compile(<span class="string">r'\d$'</span>)&#125;))</span><br><span class="line">print(list(map(<span class="keyword">lambda</span> x:x.name, soup.find_all(attrs=&#123;<span class="string">'id'</span>:<span class="literal">True</span>, <span class="string">'src'</span>:<span class="literal">True</span>&#125;))))</span><br></pre></td></tr></table></figure></p><h4 id="text参数"><a href="#text参数" class="headerlink" title="text参数"></a>text参数</h4><p>可以通过text参数搜索文档中的字符串内容，接受字符串、正则表达式对象、True、列表<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">print(list(map(<span class="keyword">lambda</span> x: (type(x), x),soup.find_all(text=re.compile(<span class="string">'\w+'</span>)))))<span class="comment"># 返回文本类节点</span></span><br><span class="line">print(list(map(<span class="keyword">lambda</span> x: (type(x), x),soup.find_all(text=re.compile(<span class="string">'[a-z]+'</span>)))))</span><br><span class="line">print(soup.find_all(re.compile(<span class="string">r'^(h|p)'</span>),text=re.compile(<span class="string">'[a-z]+'</span>)))<span class="comment"># 相当于过滤出Tag对象，并看它的string是否符合text参数的要求，返回Tag对象</span></span><br></pre></td></tr></table></figure></p><h4 id="limit参数"><a href="#limit参数" class="headerlink" title="limit参数"></a>limit参数</h4><p>限制返回结果的数量<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">print(soup.find_all(id=<span class="literal">True</span>, limit=<span class="number">3</span>)) <span class="comment"># 返回列表中有3个结果</span></span><br></pre></td></tr></table></figure></p><h4 id="recursive-参数"><a href="#recursive-参数" class="headerlink" title="recursive 参数"></a>recursive 参数</h4><p>默认是递归搜索所有子孙节点，如果不需要请设置为False</p><h4 id="简化写法"><a href="#简化写法" class="headerlink" title="简化写法"></a>简化写法</h4><p><code>find_all()</code>是非常常用的方法，可以简化省略掉<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">print(soup(<span class="string">'img'</span>)) <span class="comment"># 所有img标签对象的列表，不等价于soup.img</span></span><br><span class="line">print(soup.img) <span class="comment"># 深度优先第一个img</span></span><br><span class="line"></span><br><span class="line">print(soup.a.find_all(text=<span class="literal">True</span>)) <span class="comment"># 返回文本</span></span><br><span class="line">print(soup.a(text=<span class="literal">True</span>)) <span class="comment"># 返回文本，和上面等价</span></span><br><span class="line">print(soup(<span class="string">'a'</span>, text=<span class="literal">True</span>)) <span class="comment"># 返回a标签对象</span></span><br><span class="line"></span><br><span class="line">print(soup.find_all(<span class="string">'img'</span>, attrs=&#123;<span class="string">'id'</span>:<span class="string">'bg1'</span>&#125;))</span><br><span class="line">print(soup(<span class="string">'img'</span>, attrs=&#123;<span class="string">'id'</span>:<span class="string">'bg1'</span>&#125;)) <span class="comment"># find_all的省略</span></span><br><span class="line">print(soup(<span class="string">'img'</span>, attrs=&#123;<span class="string">'id'</span>:re.compile(<span class="string">'1'</span>)&#125;))</span><br></pre></td></tr></table></figure></p><h4 id="find方法"><a href="#find方法" class="headerlink" title="find方法"></a>find方法</h4><p><code>find( name , attrs , recursive , text , **kwargs )</code><br>参数几乎和<code>find_all</code>一样</p><ul><li>找到了，<code>find_all</code>返回一个列表，而find返回一个单值，元素对象</li><li>找不到，<code>find_all</code>返回一个空列表，而find返回一个None<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">print(soup.find(<span class="string">'img'</span>, attrs=&#123;<span class="string">'id'</span>:<span class="string">'bg1'</span>&#125;).attrs.get(<span class="string">'src'</span>, <span class="string">'magedu'</span>))</span><br><span class="line">print(soup.find(<span class="string">'img'</span>, attrs=&#123;<span class="string">'id'</span>:<span class="string">'bg1'</span>&#125;).get(<span class="string">'src'</span>)) <span class="comment"># 简化了attrs</span></span><br><span class="line">print(soup.find(<span class="string">'img'</span>, attrs=&#123;<span class="string">'id'</span>:<span class="string">'bg1'</span>&#125;)[<span class="string">'src'</span>])</span><br></pre></td></tr></table></figure></li></ul><h3 id="CSS选择器"><a href="#CSS选择器" class="headerlink" title="CSS选择器"></a>CSS选择器</h3><p>和JQuery一样，可以使用CSS选择器来查找节点</p><ul><li>使用<code>soup.select()方</code>法，select方法支持大部分CSS选择器，返回列表</li><li>CSS中，标签名直接使用，类名前加<code>.</code>点号，id名前加<code>#</code>井号</li></ul><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> bs4 <span class="keyword">import</span> BeautifulSoup</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">many_classes</span><span class="params">(tag)</span>:</span></span><br><span class="line">    <span class="comment"># print(type(tag))</span></span><br><span class="line">    <span class="comment"># print(tag.attrs)</span></span><br><span class="line">    <span class="keyword">return</span> len(tag.attrs.get(<span class="string">'class'</span>, [])) &gt; <span class="number">1</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">with</span> open(<span class="string">'d:/test.html'</span>, encoding=<span class="string">'utf-8'</span>) <span class="keyword">as</span> f:</span><br><span class="line">    soup = BeautifulSoup(f, <span class="string">'lxml'</span>)</span><br><span class="line">    <span class="comment"># 元素选择器</span></span><br><span class="line">    print(<span class="number">1</span>, soup.select(<span class="string">'p'</span>))  <span class="comment"># 所有的p标签</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 类选择器</span></span><br><span class="line">    print(<span class="number">2</span>, soup.select(<span class="string">'.title'</span>))</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 使用了伪类</span></span><br><span class="line">    <span class="comment"># 直接子标签是p的同类型的所有p标签中的第二个</span></span><br><span class="line">    <span class="comment"># （同类型）同标签名p的第2个，伪类只实现了nth-of-type，且要求是数字</span></span><br><span class="line">    print(<span class="number">3</span>, soup.select(<span class="string">'div.content &gt; p:nth-of-type(2)'</span>))  <span class="comment"># 只实现了这个伪类</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># id选择器</span></span><br><span class="line">    print(<span class="number">4</span>, soup.select(<span class="string">'p#second'</span>))</span><br><span class="line">    print(<span class="number">5</span>, soup.select(<span class="string">'#bg1'</span>))</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 后代选择器</span></span><br><span class="line">    print(<span class="number">6</span>, soup.select(<span class="string">'div p'</span>))  <span class="comment"># div下逐层找p</span></span><br><span class="line">    print(<span class="number">7</span>, soup.select(<span class="string">'div div p'</span>))  <span class="comment"># div下逐层找div下逐层找p</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 子选择器，直接后代</span></span><br><span class="line">    print(<span class="number">8</span>, soup.select(<span class="string">'div &gt; p'</span>))  <span class="comment"># div下直接子标签的p，有2个</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 相邻兄弟选择器</span></span><br><span class="line">    print(<span class="number">9</span>, soup.select(<span class="string">'div p:nth-of-type(1) + [src]'</span>))  <span class="comment"># 返回[]</span></span><br><span class="line">    print(<span class="number">9</span>, soup.select(<span class="string">'div p:nth-of-type(1) + p'</span>))  <span class="comment"># 返回[]</span></span><br><span class="line">    print(<span class="number">9</span>, soup.select(<span class="string">'div &gt; p:nth-of-type(2) + input'</span>))  <span class="comment"># 返回input Tag</span></span><br><span class="line">    print(<span class="number">9</span>, soup.select(<span class="string">'div &gt; p:nth-of-type(2) + [type]'</span>))  <span class="comment"># 同上</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 普通兄弟选择器</span></span><br><span class="line">    print(<span class="number">10</span>, soup.select(<span class="string">'div p:nth-of-type(1) ~ [src]'</span>))  <span class="comment"># 返回2个img</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 属性选择器</span></span><br><span class="line"></span><br><span class="line">    print(<span class="number">11</span>, soup.select(<span class="string">'[src]'</span>))  <span class="comment"># 有属性src</span></span><br><span class="line">    print(<span class="number">12</span>, soup.select(<span class="string">'[src="/"]'</span>))  <span class="comment"># 属性src等于/</span></span><br><span class="line">    print(<span class="number">13</span>, soup.select(<span class="string">'[src="http://www.magedu.com/"]'</span>))  <span class="comment"># 完全匹配</span></span><br><span class="line">    print(<span class="number">14</span>, soup.select(<span class="string">'[src^="http://www"]'</span>))  <span class="comment"># 以http://www开头</span></span><br><span class="line">    print(<span class="number">15</span>, soup.select(<span class="string">'[src$="cn/"]'</span>))  <span class="comment"># 以cn/结尾</span></span><br><span class="line">    print(<span class="number">16</span>, soup.select(<span class="string">'img[src*="bin"]'</span>))  <span class="comment"># 包含bin</span></span><br><span class="line">    print(<span class="number">17</span>, soup.select(<span class="string">'img[src*=".cn"]'</span>))  <span class="comment"># 包含.cn</span></span><br><span class="line">    print(<span class="number">18</span>, soup.select(<span class="string">'[class="title highlight"]'</span>))</span><br><span class="line">    print(<span class="number">19</span>, soup.select(<span class="string">'[class~=title]'</span>))  <span class="comment"># 多值属性中有一个title</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 执行结果</span></span><br><span class="line">1 [&lt;p id="first"&gt;字典&lt;/p&gt;, &lt;p id="second"&gt;列表&lt;/p&gt;, &lt;p&gt;bottom&lt;/p&gt;]</span><br><span class="line">2 [&lt;h3 class="title highlight"&gt;python高级班&lt;/h3&gt;]</span><br><span class="line">3 [&lt;p id="second"&gt;列表&lt;/p&gt;]</span><br><span class="line">4 [&lt;p id="second"&gt;列表&lt;/p&gt;]</span><br><span class="line"><span class="number">5</span> [&lt;img id=<span class="string">"bg1"</span> src=<span class="string">"http://www.bing.cn/"</span>/&gt;]</span><br><span class="line">6 [&lt;p id="first"&gt;字典&lt;/p&gt;, &lt;p id="second"&gt;列表&lt;/p&gt;]</span><br><span class="line">7 [&lt;p id="first"&gt;字典&lt;/p&gt;, &lt;p id="second"&gt;列表&lt;/p&gt;]</span><br><span class="line">8 [&lt;p id="first"&gt;字典&lt;/p&gt;, &lt;p id="second"&gt;列表&lt;/p&gt;]</span><br><span class="line"><span class="number">9</span> []</span><br><span class="line">9 [&lt;p id="second"&gt;列表&lt;/p&gt;]</span><br><span class="line"><span class="number">9</span> [&lt;input name=<span class="string">"_csrf"</span> type=<span class="string">"hidden"</span> value=<span class="string">"7139e401481ef2f46ce98b22af4f4bed"</span>/&gt;]</span><br><span class="line"><span class="number">9</span> [&lt;input name=<span class="string">"_csrf"</span> type=<span class="string">"hidden"</span> value=<span class="string">"7139e401481ef2f46ce98b22af4f4bed"</span>/&gt;]</span><br><span class="line"><span class="number">10</span> [&lt;img id=<span class="string">"bg1"</span> src=<span class="string">"http://www.bing.cn/"</span>/&gt;, &lt;img id=<span class="string">"bg2"</span> src=<span class="string">"http://httpbin.org/"</span>/&gt;]</span><br><span class="line"><span class="number">11</span> [&lt;img id=<span class="string">"bg1"</span> src=<span class="string">"http://www.bing.cn/"</span>/&gt;, &lt;img id=<span class="string">"bg2"</span> src=<span class="string">"http://httpbin.org/"</span>/&gt;]</span><br><span class="line"><span class="number">12</span> []</span><br><span class="line"><span class="number">13</span> []</span><br><span class="line"><span class="number">14</span> [&lt;img id=<span class="string">"bg1"</span> src=<span class="string">"http://www.bing.cn/"</span>/&gt;]</span><br><span class="line"><span class="number">15</span> [&lt;img id=<span class="string">"bg1"</span> src=<span class="string">"http://www.bing.cn/"</span>/&gt;]</span><br><span class="line"><span class="number">16</span> [&lt;img id=<span class="string">"bg1"</span> src=<span class="string">"http://www.bing.cn/"</span>/&gt;, &lt;img id=<span class="string">"bg2"</span> src=<span class="string">"http://httpbin.org/"</span>/&gt;]</span><br><span class="line"><span class="number">17</span> [&lt;img id=<span class="string">"bg1"</span> src=<span class="string">"http://www.bing.cn/"</span>/&gt;]</span><br><span class="line">18 [&lt;h3 class="title highlight"&gt;python高级班&lt;/h3&gt;]</span><br><span class="line">19 [&lt;h3 class="title highlight"&gt;python高级班&lt;/h3&gt;]</span><br></pre></td></tr></table></figure><h3 id="获取文本内容"><a href="#获取文本内容" class="headerlink" title="获取文本内容"></a>获取文本内容</h3><p>搜索节点的目的往往是为了提取该节点的文本内容，一般不需要HTML标记，只需要文字<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> bs4 <span class="keyword">import</span> BeautifulSoup</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">many_classes</span><span class="params">(tag)</span>:</span></span><br><span class="line">    <span class="comment"># print(type(tag))</span></span><br><span class="line">    <span class="comment"># print(tag.attrs)</span></span><br><span class="line">    <span class="keyword">return</span> len(tag.attrs.get(<span class="string">'class'</span>, [])) &gt; <span class="number">1</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">with</span> open(<span class="string">'d:/test.html'</span>, encoding=<span class="string">'utf-8'</span>) <span class="keyword">as</span> f:</span><br><span class="line">    soup = BeautifulSoup(f, <span class="string">'lxml'</span>)</span><br><span class="line">    <span class="comment"># 元素选择器</span></span><br><span class="line">    ele = soup.select(<span class="string">'div'</span>)  <span class="comment"># 所有的div标签</span></span><br><span class="line">    print(<span class="number">1</span>, ele[<span class="number">0</span>].string, end=<span class="string">'\n------------\n'</span>)  <span class="comment"># 内容仅仅只能是文本类型，否则返回None</span></span><br><span class="line">    print(<span class="number">2</span>, list(ele[<span class="number">0</span>].strings), end=<span class="string">'\n------------\n'</span>)  <span class="comment"># 迭代保留空白字符</span></span><br><span class="line">    print(<span class="number">3</span>, list(ele[<span class="number">0</span>].stripped_strings), end=<span class="string">'\n------------\n'</span>)  <span class="comment"># 迭代不保留空白字符</span></span><br><span class="line">    print(<span class="number">4</span>, ele[<span class="number">0</span>], end=<span class="string">'\n------------\n'</span>)</span><br><span class="line">    print(<span class="number">5</span>, ele[<span class="number">0</span>].text, end=<span class="string">'\n------------\n'</span>)  <span class="comment"># 本质上就是get_text()，保留空白字符的strings</span></span><br><span class="line">    print(<span class="number">6</span>, ele[<span class="number">0</span>].get_text(), end=<span class="string">'\n------------\n'</span>)  <span class="comment"># 迭代并join，保留空白字符，strip默认为False</span></span><br><span class="line">    print(<span class="number">7</span>, ele[<span class="number">0</span>].get_text(strip=<span class="literal">True</span>))  <span class="comment"># 迭代并join，不保留空白字符</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 执行结果</span></span><br><span class="line"><span class="number">1</span> <span class="literal">None</span></span><br><span class="line">------------</span><br><span class="line"><span class="number">2</span> [<span class="string">'\n'</span>, <span class="string">'python高级班'</span>, <span class="string">'\n'</span>, <span class="string">'\n'</span>, <span class="string">'字典'</span>, <span class="string">'\n'</span>, <span class="string">'列表'</span>, <span class="string">'\n'</span>, <span class="string">'\n'</span>, <span class="string">'\n'</span>, <span class="string">'\n'</span>, <span class="string">'\n'</span>, <span class="string">'\n'</span>]</span><br><span class="line">------------</span><br><span class="line"><span class="number">3</span> [<span class="string">'python高级班'</span>, <span class="string">'字典'</span>, <span class="string">'列表'</span>]</span><br><span class="line">------------</span><br><span class="line"><span class="number">4</span> &lt;div id=<span class="string">"main"</span>&gt;</span><br><span class="line">&lt;h3 class="title highlight"&gt;python高级班&lt;/h3&gt;</span><br><span class="line">&lt;div class="content"&gt;</span><br><span class="line">&lt;p id="first"&gt;字典&lt;/p&gt;</span><br><span class="line">&lt;p id="second"&gt;列表&lt;/p&gt;</span><br><span class="line">&lt;input name=<span class="string">"_csrf"</span> type=<span class="string">"hidden"</span> value=<span class="string">"7139e401481ef2f46ce98b22af4f4bed"</span>/&gt;</span><br><span class="line">&lt;!-- comment --&gt;</span><br><span class="line">&lt;img id=<span class="string">"bg1"</span> src=<span class="string">"http://www.bing.cn/"</span>/&gt;</span><br><span class="line">&lt;img id=<span class="string">"bg2"</span> src=<span class="string">"http://httpbin.org/"</span>/&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line">------------</span><br><span class="line"><span class="number">5</span> </span><br><span class="line">python高级班</span><br><span class="line"></span><br><span class="line">字典</span><br><span class="line">列表</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">------------</span><br><span class="line"><span class="number">6</span> </span><br><span class="line">python高级班</span><br><span class="line"></span><br><span class="line">字典</span><br><span class="line">列表</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">------------</span><br><span class="line"><span class="number">7</span> python高级班字典列表</span><br></pre></td></tr></table></figure></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># bs4.element.Tag#string</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Tag</span><span class="params">(PageElement)</span>:</span></span><br><span class="line"><span class="meta">    @property</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">string</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">if</span> len(self.contents) != <span class="number">1</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">None</span></span><br><span class="line">        child = self.contents[<span class="number">0</span>]</span><br><span class="line">        <span class="keyword">if</span> isinstance(child, NavigableString):</span><br><span class="line">            <span class="keyword">return</span> child</span><br><span class="line">        <span class="keyword">return</span> child.string</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">_all_strings</span><span class="params">(self, strip=False, types=<span class="params">(NavigableString, CData)</span>)</span>:</span></span><br><span class="line">        <span class="keyword">for</span> descendant <span class="keyword">in</span> self.descendants:</span><br><span class="line">            <span class="keyword">if</span> (</span><br><span class="line">                (types <span class="keyword">is</span> <span class="literal">None</span> <span class="keyword">and</span> <span class="keyword">not</span> isinstance(descendant, NavigableString))</span><br><span class="line">                <span class="keyword">or</span></span><br><span class="line">                (types <span class="keyword">is</span> <span class="keyword">not</span> <span class="literal">None</span> <span class="keyword">and</span> type(descendant) <span class="keyword">not</span> <span class="keyword">in</span> types)):</span><br><span class="line">                <span class="keyword">continue</span></span><br><span class="line">            <span class="keyword">if</span> strip:</span><br><span class="line">                descendant = descendant.strip()</span><br><span class="line">                <span class="keyword">if</span> len(descendant) == <span class="number">0</span>:</span><br><span class="line">                    <span class="keyword">continue</span></span><br><span class="line">            <span class="keyword">yield</span> descendant</span><br><span class="line"></span><br><span class="line">    strings = property(_all_strings)</span><br><span class="line"></span><br><span class="line"><span class="meta">    @property</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">stripped_strings</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">for</span> string <span class="keyword">in</span> self._all_strings(<span class="literal">True</span>):</span><br><span class="line">            <span class="keyword">yield</span> string</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get_text</span><span class="params">(self, separator=<span class="string">""</span>, strip=False,</span></span></span><br><span class="line"><span class="function"><span class="params">                 types=<span class="params">(NavigableString, CData)</span>)</span>:</span></span><br><span class="line">        <span class="string">"""</span></span><br><span class="line"><span class="string">        Get all child strings, concatenated using the given separator.</span></span><br><span class="line"><span class="string">        """</span></span><br><span class="line">        <span class="keyword">return</span> separator.join([s <span class="keyword">for</span> s <span class="keyword">in</span> self._all_strings(</span><br><span class="line">            strip, types=types)])</span><br><span class="line"></span><br><span class="line">    getText = get_text</span><br><span class="line">    text = property(get_text)</span><br></pre></td></tr></table></figure><h1 id="Json解析"><a href="#Json解析" class="headerlink" title="Json解析"></a>Json解析</h1><p>拿到一个Json字符串，如果想提取其中的部分内容，就需要遍历了。在遍历过程中进行判断<br>还有一种方式，类似于XPath，叫做JsonPath</p><p>安装<br><code>$ pip install jsonpath</code><br>官网 <a href="http://goessner.net/articles/JsonPath/" target="_blank" rel="noopener">http://goessner.net/articles/JsonPath/</a><br>|XPath  | Json | 说明 |<br>|:–|:–|:–|<br>|<code>/</code> |<code>$</code> |根元素|<br>|<code>.</code> |<code>@</code>| 当前节点|<br>|<code>/</code> |<code>.</code> or <code>[ ]</code> |获取子节点|<br>|<code>..</code>| 不支持 |父节点|<br>|<code>//</code> |<code>..</code> |任意层次|<br>|<code>*</code> |<code>*</code> |通配符，匹配任意节点|<br>|<code>@</code>| 不支持| Json中没有属性|<br>|<code>[ ]</code> | <code>[ ]</code> |下标操作<br>XPath从1开始<br>JsonPath从0开始|<br>| <code>|</code> | <code>[,]</code> |XPath是或操作. JSONPath allows alternate names or array indices as a set.|<br>|不支持 |<code>[start:stop:step]</code> |切片|<br>|<code>[ ]</code> |<code>?( )</code>| 过滤操作|<br>|不支持 |<code>( )</code>| 表达式计算|<br>|<code>( )</code> |不支持 |分组|</p><p>依然用豆瓣电影的热门电影的Json<br><a href="https://movie.douban.com/j/search_subjects?type=movie&amp;tag=%E7%83%AD%E9%97%A8&amp;page_limit=10&amp;page_start=0" target="_blank" rel="noopener">https://movie.douban.com/j/search_subjects?type=movie&amp;tag=%E7%83%AD%E9%97%A8&amp;page_limit=10&amp;page_start=0</a><br>找到得分高于8分的<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    subjects:</span><br><span class="line">    [</span><br><span class="line">        &#123;</span><br><span class="line">            rate: &quot;8.3&quot;,</span><br><span class="line">            cover_x: 2309,</span><br><span class="line">            title: &quot;爱你，西蒙&quot;,</span><br><span class="line">            url: &quot;https://movie.douban.com/subject/26654498/&quot;,</span><br><span class="line">            playable: false,</span><br><span class="line">            cover:</span><br><span class="line">&quot;https://img1.doubanio.com/view/photo/s_ratio_poster/public/p2523592367.webp&quot;,</span><br><span class="line">            id: &quot;26654498&quot;,</span><br><span class="line">            cover_y: 3464,</span><br><span class="line">            is_new: false</span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">            rate: &quot;8.3&quot;,</span><br><span class="line">            cover_x: 3578,</span><br><span class="line">            title: &quot;暴裂无声&quot;,</span><br><span class="line">            url: &quot;https://movie.douban.com/subject/26647117/&quot;,</span><br><span class="line">            playable: true,</span><br><span class="line">            cover:</span><br><span class="line">&quot;https://img3.doubanio.com/view/photo/s_ratio_poster/public/p2517333671.webp&quot;,</span><br><span class="line">            id: &quot;26647117&quot;,</span><br><span class="line">            cover_y: 5078,</span><br><span class="line">            is_new: false</span><br><span class="line">        &#125;</span><br><span class="line">    ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>思路<br>找到title非常容易，但是要用其兄弟节点rate判断是否大于8分，就不好做了<br>能够从父节点下手，subjects的多个子节点中，要用 <code>[ ]</code> ，某一个当前节点的rate和字符串8比较来过滤的得到符合要求的subjects的子节点，取这个子节点的title<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> jsonpath <span class="keyword">import</span> jsonpath</span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">import</span> json</span><br><span class="line"></span><br><span class="line">ua = <span class="string">"Mozilla/5.0 (Windows NT 6.1) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/55.0.2883.75 "</span> \</span><br><span class="line">     <span class="string">"Safari/537.36"</span></span><br><span class="line">url = <span class="string">'https://movie.douban.com/j/search_subjects?'</span> \</span><br><span class="line">      <span class="string">'type=movie&amp;tag=%E7%83%AD%E9%97%A8&amp;page_limit=10&amp;page_start=0'</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">with</span> requests.get(url, headers=&#123;<span class="string">'User-agent'</span>:ua&#125;) <span class="keyword">as</span> response:</span><br><span class="line">    text = response.text</span><br><span class="line">    print(text) <span class="comment"># str类型的json数据</span></span><br><span class="line">    js = json.loads(text)</span><br><span class="line">    print(js) <span class="comment"># Json转为Python数据结构</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 找到所有电影的名称</span></span><br><span class="line">    rs1 = jsonpath(js, <span class="string">'$..title'</span>)</span><br><span class="line">    print(rs1)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 找到所有subjects</span></span><br><span class="line">    rs2 = jsonpath(js, <span class="string">'$..subjects'</span>)</span><br><span class="line">    print(rs2)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 找打所有得分高于8分的电影名称</span></span><br><span class="line">    <span class="comment"># 根下任意层的subjects的子节点rate大于字符串8</span></span><br><span class="line">    rs3 = jsonpath(js, <span class="string">'$..subjects[?(@.rate &gt; "8")]'</span>)</span><br><span class="line">    print(rs3)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 根下任意层的subjects的子节点rate大于字符串8的节点的子节点title</span></span><br><span class="line">    rs4 = jsonpath(js, <span class="string">'$..subjects[?(@.rate &gt; "8")].title'</span>)</span><br><span class="line">    print(rs4) <span class="comment"># ['疾速备战', '绿皮书', '痛苦与荣耀', '孟买酒店']</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 切片</span></span><br><span class="line">    rs5 = jsonpath(js, <span class="string">'$..subjects[?(@.rate &gt; "8")].title'</span>)</span><br><span class="line">    print(rs5[:<span class="number">2</span>]) <span class="comment"># ['疾速备战', '绿皮书']</span></span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;HTML解析&quot;&gt;&lt;a href=&quot;#HTML解析&quot; class=&quot;headerlink&quot; title=&quot;HTML解析&quot;&gt;&lt;/a&gt;HTML解析&lt;/h1&gt;&lt;p&gt;HTML的内容返回给浏览器，浏览器就会解析它，并对它渲染&lt;/p&gt;
&lt;p&gt;HTML 超文本表示语言设计的初衷就
      
    
    </summary>
    
      <category term="爬虫" scheme="https://hubhack.github.io/categories/%E7%88%AC%E8%99%AB/"/>
    
    
      <category term="爬虫" scheme="https://hubhack.github.io/tags/%E7%88%AC%E8%99%AB/"/>
    
  </entry>
  
  <entry>
    <title>动态网页处理</title>
    <link href="https://hubhack.github.io/%E7%88%AC%E8%99%AB/%E5%8A%A8%E6%80%81%E7%BD%91%E9%A1%B5%E5%A4%84%E7%90%86%20--%20Selenium%E5%92%8CPhantomJS/"/>
    <id>https://hubhack.github.io/爬虫/动态网页处理 -- Selenium和PhantomJS/</id>
    <published>2019-08-22T08:41:08.923Z</published>
    <updated>2019-08-22T08:53:05.194Z</updated>
    
    <content type="html"><![CDATA[<h1 id="动态网页处理"><a href="#动态网页处理" class="headerlink" title="动态网页处理"></a>动态网页处理</h1><ul><li><p>很多网站都采用A JAX技术、SPA技术，部分内容都是异步动态加载的。可以提高用户体验，减少不必要的流量，方便CDN加速等</p></li><li><p>但是，对于爬虫程序爬取到的HTML页面相当于页面模板了，动态内容不在其中</p></li></ul><p>解决办法之一，如果能构造一个包含JS引擎的浏览器，让它加载网页并和网站交互，我们编程从这个浏览器获取内容包括动态内容。这个浏览器不需要和用户交互的界面，只要能支持HTTP、HTTPS协议和服务器端交互，能解析HTML、CSS、JS就行</p><h1 id="PhantomJS"><a href="#PhantomJS" class="headerlink" title="PhantomJS"></a>PhantomJS</h1><p>它是一个headless无头浏览器，支持Javascript。可以运行在Windows、Linux、Mac OS等</p><p>所谓无头浏览器，就是包含Js引擎、浏览器排版引擎等核心组件，但是没有和用户交互的界面的浏览器</p><ul><li>官网<br><a href="http://phantomjs.org/" target="_blank" rel="noopener">http://phantomjs.org/</a></li><li>官方文档<br><a href="http://phantomjs.org/documentation/" target="_blank" rel="noopener">http://phantomjs.org/documentation/</a></li><li>下载<br><a href="http://phantomjs.org/download.html" target="_blank" rel="noopener">http://phantomjs.org/download.html</a><br>下载对应操作系统的PhantomJS，<strong>解压缩</strong>就可以使用</li></ul><p>测试编写<code>test.js</code>，运行命令 <code>$ phantomjs/bin/phantomjs.exe test.js</code><br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">"use strict"</span>;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'hello world'</span>);</span><br><span class="line">phantom.exit();</span><br></pre></td></tr></table></figure></p><h1 id="Selenium"><a href="#Selenium" class="headerlink" title="Selenium"></a>Selenium</h1><p>它是一个WEB自动化测试工具。它可以直接运行在浏览器中，支持主流的浏览器，包括PhantomJS（无头浏览器）</p><ul><li>安装<br><code>$ pip install selenium</code></li><li>官网<br><a href="https://www.seleniumhq.org/" target="_blank" rel="noopener">https://www.seleniumhq.org/</a></li></ul><h1 id="开发实战"><a href="#开发实战" class="headerlink" title="开发实战"></a>开发实战</h1><ul><li>不同浏览器都会提供操作的接口，Selenium就是使用这些接口来操作浏览器</li><li>Selenium最核心的对象就是webdriver，通过它就可以操作浏览器、截图、HTTP访问、解析HTML等</li></ul><h2 id="处理异步请求"><a href="#处理异步请求" class="headerlink" title="处理异步请求"></a>处理异步请求</h2><p>bing的查询结果是通过异步请求返回结果，所以，直接访问页面不能直接获取到搜索结果<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 获取bing查询数据</span></span><br><span class="line"><span class="keyword">from</span> selenium <span class="keyword">import</span> webdriver <span class="comment"># 核心对象</span></span><br><span class="line"><span class="keyword">import</span> datetime</span><br><span class="line"><span class="keyword">import</span> random</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">from</span> urllib <span class="keyword">import</span> parse</span><br><span class="line"></span><br><span class="line"><span class="comment"># 指定PhantomJS的执行文件路径</span></span><br><span class="line">driver = webdriver.PhantomJS(<span class="string">'d:/python/phantomjs/bin/phantomjs.exe'</span>)</span><br><span class="line"><span class="comment"># 设置窗口大小</span></span><br><span class="line">driver.set_window_size(<span class="number">1280</span>, <span class="number">1024</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 打开网页GET方法，模拟浏览器地址栏输入网址</span></span><br><span class="line">url = <span class="string">'http://cn.bing.com/search?'</span> + parse.urlencode(&#123;</span><br><span class="line">    <span class="string">'q'</span>: <span class="string">'python'</span></span><br><span class="line">&#125;)</span><br><span class="line">driver.get(url)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 保存图片</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">savepic</span><span class="params">()</span>:</span></span><br><span class="line">    base_dir = <span class="string">'d:/'</span></span><br><span class="line">    filename = <span class="string">'&#123;&#125;&#123;:%Y%m%d%H%M%S&#125;&#123;:03&#125;.png'</span>.format(</span><br><span class="line">        base_dir,</span><br><span class="line">        datetime.datetime.now(),</span><br><span class="line">        random.randint(<span class="number">1</span>, <span class="number">100</span>)</span><br><span class="line">    )</span><br><span class="line"></span><br><span class="line">    driver.save_screenshot(filename)</span><br><span class="line"></span><br><span class="line"><span class="comment">#time.sleep(10) # 等等截图就能看到内容</span></span><br><span class="line">savepic()</span><br><span class="line"></span><br><span class="line">MAXRETRIES = <span class="number">5</span> <span class="comment"># 最大重试次数</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(MAXRETRIES):  <span class="comment"># 循环测试</span></span><br><span class="line">    time.sleep(<span class="number">1</span>)</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        ele = driver.find_element_by_id(<span class="string">'b_results'</span>)  <span class="comment"># 如果查询结果来了，就会有这个id的标签</span></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> ele.is_displayed():  <span class="comment"># 等待数据显示出来</span></span><br><span class="line">            print(<span class="string">'diplay none'</span>)</span><br><span class="line">            <span class="keyword">continue</span></span><br><span class="line">        print(<span class="string">'ok'</span>)</span><br><span class="line">        savepic()</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line">    <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">        print(e)</span><br><span class="line"></span><br><span class="line">driver.quit()</span><br></pre></td></tr></table></figure></p><p>可能结果未必能看到，说明数据回来了，而且组织好了，但是没有显示出来</p><p>可以增加判断元素是否显示的代码，直到等待的数据呈现在页面上</p><h2 id="下拉框处理"><a href="#下拉框处理" class="headerlink" title="下拉框处理"></a>下拉框处理</h2><p>Selenium专门提供了Select类来处理网页中的下拉框<br>不过下拉框用的页面越来越少了,本次使用 <a href="https://www.oschina.net/search?scope=project&amp;q=python" target="_blank" rel="noopener">https://www.oschina.net/search?scope=project&amp;q=python</a><br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"># oschina软件搜索</span><br><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">name</span>=<span class="string">'tag1'</span> <span class="attr">onchange</span>=<span class="string">"submit();"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">'0'</span>&gt;</span>所有分类<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">'309'</span> &gt;</span>Web应用开发<span class="tag">&lt;/<span class="name">option</span>&gt;</span> </span><br><span class="line"><span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">'331'</span> &gt;</span>手机/移动开发<span class="tag">&lt;/<span class="name">option</span>&gt;</span> </span><br><span class="line"><span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">'364'</span> &gt;</span>iOS代码库<span class="tag">&lt;/<span class="name">option</span>&gt;</span> </span><br><span class="line"><span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">'12'</span> &gt;</span>程序开发<span class="tag">&lt;/<span class="name">option</span>&gt;</span> </span><br><span class="line"><span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">'11'</span> &gt;</span>开发工具<span class="tag">&lt;/<span class="name">option</span>&gt;</span> </span><br><span class="line"><span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">'273'</span> &gt;</span>jQuery 插件<span class="tag">&lt;/<span class="name">option</span>&gt;</span> </span><br><span class="line"><span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">'256'</span> &gt;</span>建站系统<span class="tag">&lt;/<span class="name">option</span>&gt;</span> </span><br><span class="line"><span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">'5'</span> &gt;</span>企业应用<span class="tag">&lt;/<span class="name">option</span>&gt;</span> </span><br><span class="line"><span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">'10'</span> &gt;</span>服务器软件<span class="tag">&lt;/<span class="name">option</span>&gt;</span> </span><br><span class="line"><span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">'6'</span> &gt;</span>数据库相关<span class="tag">&lt;/<span class="name">option</span>&gt;</span> </span><br><span class="line"><span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">'8'</span> &gt;</span>应用工具<span class="tag">&lt;/<span class="name">option</span>&gt;</span> </span><br><span class="line"><span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">'18'</span> &gt;</span>插件和扩展<span class="tag">&lt;/<span class="name">option</span>&gt;</span> </span><br><span class="line"><span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">'7'</span> &gt;</span>游戏/娱乐<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">'14'</span> &gt;</span>管理和监控<span class="tag">&lt;/<span class="name">option</span>&gt;</span> </span><br><span class="line"><span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">'9'</span> &gt;</span>其他开源<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure></p><p>这个下拉框影响下一个下拉框“所有子类”。下面就模拟来操作下拉框，需要使用<br><code>selenium.webdriver.support.select.Select</code><br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> selenium <span class="keyword">import</span> webdriver <span class="comment"># 核心对象</span></span><br><span class="line"><span class="keyword">import</span> datetime</span><br><span class="line"><span class="keyword">import</span> random</span><br><span class="line"><span class="keyword">from</span> selenium.webdriver.support.ui <span class="keyword">import</span> Select</span><br><span class="line"></span><br><span class="line"><span class="comment"># 指定PhantomJS的执行文件路径</span></span><br><span class="line">driver = webdriver.PhantomJS(<span class="string">'d:/python/phantomjs/bin/phantomjs.exe'</span>)</span><br><span class="line"><span class="comment"># 设置窗口大小</span></span><br><span class="line">driver.set_window_size(<span class="number">1280</span>, <span class="number">1024</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 保存图片</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">savepic</span><span class="params">()</span>:</span></span><br><span class="line">    base_dir = <span class="string">'d:/'</span></span><br><span class="line">    filename = <span class="string">'&#123;&#125;&#123;:%Y%m%d%H%M%S&#125;&#123;:03&#125;.png'</span>.format(</span><br><span class="line">        base_dir,</span><br><span class="line">        datetime.datetime.now(),</span><br><span class="line">        random.randint(<span class="number">1</span>, <span class="number">100</span>)</span><br><span class="line">    )</span><br><span class="line"></span><br><span class="line">    driver.save_screenshot(filename)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 打开网页GET方法，模拟浏览器地址栏输入网址</span></span><br><span class="line">url = <span class="string">'https://www.oschina.net/search?q=python&amp;scope=project'</span></span><br><span class="line">driver.get(url)</span><br><span class="line"></span><br><span class="line">ele = driver.find_element_by_name(<span class="string">'tag1'</span>) <span class="comment"># 获取元素</span></span><br><span class="line">print(ele.tag_name) <span class="comment"># 标签名</span></span><br><span class="line">print(driver.current_url) <span class="comment"># 当前url</span></span><br><span class="line">savepic()</span><br><span class="line"></span><br><span class="line">s = Select(ele)</span><br><span class="line"><span class="comment">#s.select_by_index(1)</span></span><br><span class="line">s.select_by_value(<span class="string">'309'</span>)</span><br><span class="line">print(driver.current_url) <span class="comment"># 新页面</span></span><br><span class="line">savepic()</span><br><span class="line"></span><br><span class="line">driver.quit()</span><br></pre></td></tr></table></figure></p><p>由于该网页改版，舍弃了select，无法测试</p><h2 id="模拟键盘操作（模拟登录）"><a href="#模拟键盘操作（模拟登录）" class="headerlink" title="模拟键盘操作（模拟登录）"></a>模拟键盘操作（模拟登录）</h2><p>webdriver提供了一些列find方法，用户获取一个网页中的元素。元素对象可以使用send_keys模拟键盘输入</p><p>oschina的登录页，登录成功后会跳转到首页，首页右上角会显示会员信息，如果未登录，无此信息<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 模拟开源中国登陆</span></span><br><span class="line"><span class="keyword">from</span> selenium <span class="keyword">import</span> webdriver <span class="comment"># 核心对象</span></span><br><span class="line"><span class="keyword">import</span> datetime</span><br><span class="line"><span class="keyword">import</span> random</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">from</span> selenium.webdriver.common.keys <span class="keyword">import</span> Keys</span><br><span class="line"></span><br><span class="line"><span class="comment"># 指定PhantomJS的执行文件路径</span></span><br><span class="line">driver = webdriver.PhantomJS(<span class="string">'d:/python/phantomjs/bin/phantomjs.exe'</span>)</span><br><span class="line"><span class="comment"># 设置窗口大小</span></span><br><span class="line">driver.set_window_size(<span class="number">1280</span>, <span class="number">1024</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 保存图片</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">savepic</span><span class="params">()</span>:</span></span><br><span class="line">    base_dir = <span class="string">'d:/'</span></span><br><span class="line">    filename = <span class="string">'&#123;&#125;&#123;:%Y%m%d%H%M%S&#125;&#123;:03&#125;.png'</span>.format(</span><br><span class="line">        base_dir,</span><br><span class="line">        datetime.datetime.now(),</span><br><span class="line">        random.randint(<span class="number">1</span>, <span class="number">100</span>)</span><br><span class="line">    )</span><br><span class="line"></span><br><span class="line">    driver.save_screenshot(filename)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 打开网页GET方法，模拟浏览器地址栏输入网址</span></span><br><span class="line">url = <span class="string">'https://www.oschina.net/home/login'</span></span><br><span class="line">driver.get(url)</span><br><span class="line">print(driver.current_url) <span class="comment"># 当前url</span></span><br><span class="line">savepic()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 模拟输入用户名密码</span></span><br><span class="line">username = driver.find_element_by_id(<span class="string">'userMail'</span>) <span class="comment"># 获取元素</span></span><br><span class="line">username.send_keys(<span class="string">'wei.xu@magedu.com'</span>)</span><br><span class="line">password = driver.find_element_by_id(<span class="string">'userPassword'</span>) <span class="comment"># 获取元素</span></span><br><span class="line">password.send_keys(<span class="string">'magedu.com18'</span>)</span><br><span class="line">savepic()</span><br><span class="line"></span><br><span class="line">password.send_keys(Keys.ENTER)</span><br><span class="line">print(<span class="string">'-'</span> * <span class="number">30</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">5</span>):</span><br><span class="line">    time.sleep(<span class="number">1</span>)</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        <span class="comment"># xpath定位数据</span></span><br><span class="line">        ele = driver.find_element_by_xpath(<span class="string">'//div[@title="magedu_wayne"]'</span>)</span><br><span class="line">        print(ele.tag_name, <span class="string">'!~~~~~~'</span>)</span><br><span class="line">        print(ele.get_attribute(<span class="string">'data-user-id'</span>))</span><br><span class="line">        savepic()</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line">    <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">        print(e)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 模拟登录后获得cookies</span></span><br><span class="line">cookies = driver.get_cookies()</span><br><span class="line">print(cookies)</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> c <span class="keyword">in</span> cookies:</span><br><span class="line">    print(type(c))</span><br><span class="line">    print(c)</span><br><span class="line">print(<span class="string">'-'</span> * <span class="number">30</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">from</span> requests.cookies <span class="keyword">import</span> RequestsCookieJar</span><br><span class="line"></span><br><span class="line">jar = RequestsCookieJar()</span><br><span class="line"><span class="keyword">for</span> c <span class="keyword">in</span> cookies:</span><br><span class="line">    jar.set(c.get(<span class="string">'name'</span>), c.get(<span class="string">'value'</span>))</span><br><span class="line"></span><br><span class="line">print(jar)</span><br><span class="line"></span><br><span class="line">headers = &#123;<span class="string">'User-agent'</span>: <span class="string">"Mozilla/5.0 (Windows; U; "</span></span><br><span class="line"><span class="string">"Windows NT 6.1; zh-CN) AppleWebKit/537.36(KHTML, like Gecko) Version / 5.0.1Safari / 537.36"</span>&#125;</span><br><span class="line"></span><br><span class="line">print(<span class="string">'========== 不带cookie =========='</span>)</span><br><span class="line">response = requests.get(url, headers=headers)</span><br><span class="line"><span class="keyword">with</span> response:</span><br><span class="line">    print(<span class="number">10</span>, response.url)  <span class="comment"># 这就是登录页</span></span><br><span class="line">    <span class="keyword">with</span> open(<span class="string">'d:/nocookie.html'</span>, <span class="string">'w'</span>, encoding=<span class="string">'utf-8'</span>) <span class="keyword">as</span> f:</span><br><span class="line">        f.write(response.text)</span><br><span class="line"></span><br><span class="line">print(<span class="string">'========== 带cookie =========='</span>)</span><br><span class="line">response = requests.get(url, headers=headers, cookies=jar)</span><br><span class="line"><span class="keyword">with</span> response:</span><br><span class="line">    print(<span class="number">11</span>, response.url)</span><br><span class="line">    <span class="keyword">with</span> open(<span class="string">'d:/withcookie.html'</span>, <span class="string">'w'</span>, encoding=<span class="string">'utf-8'</span>) <span class="keyword">as</span> f:</span><br><span class="line">        f.write(response.text)</span><br><span class="line"></span><br><span class="line">driver.quit()</span><br></pre></td></tr></table></figure></p><h2 id="页面等待"><a href="#页面等待" class="headerlink" title="页面等待"></a>页面等待</h2><p>越来越多的页面使用Ajax这样的异步加载技术，这就会导致代码中要访问的页面元素，还没有被加载就被访问了，抛出异常</p><h3 id="方法1-线程休眠"><a href="#方法1-线程休眠" class="headerlink" title="方法1 线程休眠"></a>方法1 线程休眠</h3><p>使用<code>time.sleep(n)</code>来等待数据加载</p><p>配合循环一直等到数据被加载完成，可以解决很多页面动态加载或加载慢的问题。当然可以设置一个最大重试次数，以免一直循环下去。参看本文“处理异步请求”</p><h3 id="方法2-Selenium等待"><a href="#方法2-Selenium等待" class="headerlink" title="方法2 Selenium等待"></a>方法2 Selenium等待</h3><p>Selenium的等待分为：显示等待和隐式等待</p><p>隐式等待，等待特定的时间<br>显式等待，指定一个条件，一直等到这个条件成立后继续执行，也可以设置超时时间，超时会抛异常<br>参考 <a href="https://www.seleniumhq.org/docs/04_webdriver_advanced.jsp#explicit-and-implicit-waits" target="_blank" rel="noopener">https://www.seleniumhq.org/docs/04_webdriver_advanced.jsp#explicit-and-implicit-waits</a></p><h3 id="显示等待"><a href="#显示等待" class="headerlink" title="显示等待"></a>显示等待</h3><table><thead><tr><th style="text-align:left">expected_conditionsn内置条件</th><th style="text-align:left">expected_conditionsn内置条件</th></tr></thead><tbody><tr><td style="text-align:left"><code>title_is</code></td><td style="text-align:left">判断当前页面的title是否精确等于预期</td></tr><tr><td style="text-align:left"><code>title_contains</code></td><td style="text-align:left">判断当前页面的title是否包含预期字符串</td></tr><tr><td style="text-align:left"><strong><code>presence_of_element_located</code></strong></td><td style="text-align:left">判断某个元素是否被加到了dom树里，并不代表该元素一定可见</td></tr><tr><td style="text-align:left"><strong><code>visibility_of_element_located</code></strong></td><td style="text-align:left">判断某个元素是否可见。可见代表元素非隐藏，并且元素的宽和高都不等于0</td></tr><tr><td style="text-align:left"><code>visibility_of</code></td><td style="text-align:left">跟上面的方法做一样的事情，只是上面的方法要传入locator，这个方法直接传定位到的element就好了</td></tr><tr><td style="text-align:left"><code>presence_of_all_elements_located</code></td><td style="text-align:left">判断是否至少有1个元素存在于dom树中。举个例子，如果页面上有n个元素的class都是’column-md-3’，那么只要有1个元素存在，这个方法就返回True</td></tr><tr><td style="text-align:left"><code>text_to_be_present_in_element</code></td><td style="text-align:left">判断某个元素中的text是否包含了预期的字符串</td></tr><tr><td style="text-align:left"><code>text_to_be_present_in_element_value</code></td><td style="text-align:left">判断某个元素中的value属性是否包含了预期的字符串</td></tr><tr><td style="text-align:left"><code>frame_to_be_available_and_switch_to_it</code></td><td style="text-align:left">判断该frame是否可以switch进去，如果可以的话，返回True并且switch进去，否则返回False</td></tr><tr><td style="text-align:left"><code>invisibility_of_element_located</code></td><td style="text-align:left">判断某个元素中是否不存在于dom树或不可见</td></tr><tr><td style="text-align:left"><code>element_to_be_clickable</code></td><td style="text-align:left">判断某个元素中是否可见并且是enable的，这样的话才叫clickable</td></tr><tr><td style="text-align:left"><code>staleness_of</code></td><td style="text-align:left">等某个元素从dom树中移除，注意，这个方法也是返回True或False</td></tr><tr><td style="text-align:left"><code>element_to_be_selected</code></td><td style="text-align:left">判断某个元素是否被选中了,一般用在下拉列表</td></tr><tr><td style="text-align:left"><code>element_selection_state_to_be</code></td><td style="text-align:left">判断某个元素的选中状态是否符合预期</td></tr><tr><td style="text-align:left"><code>element_located_selection_state_to_be</code></td><td style="text-align:left">跟上面的方法作用一样，只是上面的方法传入定位到的element，而这个方法传入locator</td></tr><tr><td style="text-align:left"><code>alert_is_present</code></td><td style="text-align:left">判断页面上是否存在alert</td></tr></tbody></table><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 定位搜索框，搜索电影</span></span><br><span class="line"><span class="keyword">from</span> selenium <span class="keyword">import</span> webdriver <span class="comment"># 核心对象</span></span><br><span class="line"><span class="keyword">import</span> datetime</span><br><span class="line"><span class="keyword">import</span> random</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> selenium.webdriver.common.by <span class="keyword">import</span> By</span><br><span class="line"><span class="comment"># 键盘操作</span></span><br><span class="line"><span class="keyword">from</span> selenium.webdriver.common.keys <span class="keyword">import</span> Keys</span><br><span class="line"><span class="comment"># WebDriverWait 负责循环等待</span></span><br><span class="line"><span class="keyword">from</span> selenium.webdriver.support.wait <span class="keyword">import</span> WebDriverWait</span><br><span class="line"><span class="comment"># expected_conditions条件，负责条件触发</span></span><br><span class="line"><span class="keyword">from</span> selenium.webdriver.support <span class="keyword">import</span> expected_conditions <span class="keyword">as</span> EC</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 指定PhantomJS的执行文件路径</span></span><br><span class="line">driver = webdriver.PhantomJS(<span class="string">'d:/python/phantomjs/bin/phantomjs.exe'</span>)</span><br><span class="line"><span class="comment"># 设置窗口大小</span></span><br><span class="line">driver.set_window_size(<span class="number">1280</span>, <span class="number">1024</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 保存图片</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">savepic</span><span class="params">()</span>:</span></span><br><span class="line">    base_dir = <span class="string">'d:/'</span></span><br><span class="line">    filename = <span class="string">'&#123;&#125;&#123;:%Y%m%d%H%M%S&#125;&#123;:03&#125;.png'</span>.format(</span><br><span class="line">        base_dir,</span><br><span class="line">        datetime.datetime.now(),</span><br><span class="line">        random.randint(<span class="number">1</span>, <span class="number">100</span>)</span><br><span class="line">    )</span><br><span class="line"></span><br><span class="line">    driver.save_screenshot(filename)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 打开网页GET方法，模拟浏览器地址栏输入网址</span></span><br><span class="line"><span class="keyword">from</span> selenium.webdriver.common.by <span class="keyword">import</span> By</span><br><span class="line"><span class="keyword">from</span> selenium.webdriver.support.ui <span class="keyword">import</span> WebDriverWait <span class="comment"># available since 2.4.0</span></span><br><span class="line"><span class="keyword">from</span> selenium.webdriver.support <span class="keyword">import</span> expected_conditions <span class="keyword">as</span> EC <span class="comment"># available since 2.26.0</span></span><br><span class="line"></span><br><span class="line">url = <span class="string">'http://cn.bing.com/search?q=douban+TRON'</span></span><br><span class="line">driver.get(url)</span><br><span class="line">print(url)</span><br><span class="line">print(driver.current_url) <span class="comment"># 当前url</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    ele = WebDriverWait(driver, <span class="number">20</span>).until(</span><br><span class="line"></span><br><span class="line">        EC.visibility_of_element_located(</span><br><span class="line">            (By.ID, <span class="string">"b_results"</span>)</span><br><span class="line">        )</span><br><span class="line">    )</span><br><span class="line"></span><br><span class="line">    savepic()</span><br><span class="line">    print(<span class="string">'-'</span> * <span class="number">30</span>)</span><br><span class="line"><span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">    print(e)</span><br><span class="line"><span class="keyword">finally</span>:</span><br><span class="line">    driver.quit()</span><br></pre></td></tr></table></figure><h3 id="隐式等待"><a href="#隐式等待" class="headerlink" title="隐式等待"></a>隐式等待</h3><p>如果出现<code>No Such Element Exception</code>，则智能的等待指定的时长。缺省值是0<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 定位搜索框，搜索电影</span></span><br><span class="line"><span class="keyword">from</span> selenium <span class="keyword">import</span> webdriver <span class="comment"># 核心对象</span></span><br><span class="line"><span class="keyword">import</span> datetime</span><br><span class="line"><span class="keyword">import</span> random</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> selenium.webdriver.common.by <span class="keyword">import</span> By</span><br><span class="line"></span><br><span class="line"><span class="comment"># 指定PhantomJS的执行文件路径</span></span><br><span class="line">driver = webdriver.PhantomJS(<span class="string">'d:/python/phantomjs/bin/phantomjs.exe'</span>)</span><br><span class="line"><span class="comment"># 设置窗口大小</span></span><br><span class="line">driver.set_window_size(<span class="number">1280</span>, <span class="number">1024</span>)</span><br><span class="line">driver.implicitly_wait(<span class="number">10</span>) <span class="comment"># 统一设定隐式等待秒数</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 保存图片</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">savepic</span><span class="params">()</span>:</span></span><br><span class="line">    base_dir = <span class="string">'d:/'</span></span><br><span class="line">    filename = <span class="string">'&#123;&#125;&#123;:%Y%m%d%H%M%S&#125;&#123;:03&#125;.png'</span>.format(</span><br><span class="line">        base_dir,</span><br><span class="line">        datetime.datetime.now(),</span><br><span class="line">        random.randint(<span class="number">1</span>, <span class="number">100</span>)</span><br><span class="line">    )</span><br><span class="line"></span><br><span class="line">    driver.save_screenshot(filename)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 打开网页GET方法，模拟浏览器地址栏输入网址</span></span><br><span class="line"></span><br><span class="line">url = <span class="string">'http://cn.bing.com/search?q=douban+TRON'</span></span><br><span class="line">driver.get(url)</span><br><span class="line">print(url)</span><br><span class="line">print(driver.current_url) <span class="comment"># 当前url</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    <span class="comment"># ele = WebDriverWait(driver, 20).until(</span></span><br><span class="line">    <span class="comment">#</span></span><br><span class="line">    <span class="comment">#     EC.visibility_of_element_located(</span></span><br><span class="line">    <span class="comment">#         (By.ID, "b_results")</span></span><br><span class="line">    <span class="comment">#     )</span></span><br><span class="line">    <span class="comment"># )</span></span><br><span class="line">    driver.find_element_by_id(<span class="string">'b_results'</span>)</span><br><span class="line">    <span class="comment"># driver.find_element_by_id('abcdefgh')</span></span><br><span class="line">    savepic()</span><br><span class="line">    print(<span class="string">'-'</span> * <span class="number">30</span>)</span><br><span class="line"><span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">    print(e)</span><br><span class="line"><span class="keyword">finally</span>:</span><br><span class="line">    driver.quit()</span><br></pre></td></tr></table></figure></p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>Selenium的WebDriver是其核心，从Selenium2开始就是最重要的编程核心对象，在Selenium3中更是如此</p><p>和浏览器交互全靠它，它可以：</p><ul><li>打开URL，可以跟踪跳转，可以返回当前页面的实际URL</li><li>获取页面的title</li><li>处理cookie</li><li>控制浏览器的操作，例如前进、后退、刷新、关闭，最大化等</li><li>执行JS脚本</li><li>在DOM中搜索页面元素Web Element，指定的或一批，find系方法</li><li>操作网页元素<ul><li>模拟下拉框操作Select(element)</li><li>在元素上模拟鼠标操作click()</li><li>在元素上模拟键盘输入send_keys()</li><li>获取元素文字 text</li><li>获取元素的属性 get_attribute()</li></ul></li></ul><p>Selenium通过WebDriver来驱动浏览器工作，而浏览器是一个个独立的浏览器进程</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;动态网页处理&quot;&gt;&lt;a href=&quot;#动态网页处理&quot; class=&quot;headerlink&quot; title=&quot;动态网页处理&quot;&gt;&lt;/a&gt;动态网页处理&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;很多网站都采用A JAX技术、SPA技术，部分内容都是异步动态加载的。可以提高用户体验，减
      
    
    </summary>
    
      <category term="爬虫" scheme="https://hubhack.github.io/categories/%E7%88%AC%E8%99%AB/"/>
    
    
      <category term="爬虫" scheme="https://hubhack.github.io/tags/%E7%88%AC%E8%99%AB/"/>
    
  </entry>
  
  <entry>
    <title>WSGI</title>
    <link href="https://hubhack.github.io/web/WSGI/"/>
    <id>https://hubhack.github.io/web/WSGI/</id>
    <published>2019-08-22T08:41:08.892Z</published>
    <updated>2019-08-22T08:43:04.826Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://img-blog.csdnimg.cn/20190714102236481.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3B5dGhvbl9scXg=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><ul><li>WSGI（Web Server Gateway Interface）主要规定了服务器端和应用程序间的接口</li></ul><h1 id="WSGI服务器——wsgiref"><a href="#WSGI服务器——wsgiref" class="headerlink" title="WSGI服务器——wsgiref"></a>WSGI服务器——wsgiref</h1><ul><li>wsgiref是Python提供的一个WSGI参考实现库，不适合生产环境使用</li><li><code>wsgiref.simple_server</code> 模块实现一个简单的WSGI HTTP服务器</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> wsgiref.simple_server <span class="keyword">import</span> make_server,demo_app</span><br><span class="line"></span><br><span class="line">ip = <span class="string">'127.0.0.1'</span></span><br><span class="line">port = <span class="number">9999</span></span><br><span class="line">server = make_server(ip, port, demo_app) <span class="comment"># demo_app应用程序，可调用</span></span><br><span class="line">server.serve_forever() <span class="comment"># server.handle_request() 执行一次</span></span><br></pre></td></tr></table></figure><ul><li><p>查看<code>demo_app</code>源码</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">def demo_app(environ,start_response):</span><br><span class="line">    <span class="keyword">from</span> io <span class="keyword">import</span> StringIO</span><br><span class="line">    stdout = StringIO()</span><br><span class="line">    print(<span class="string">"Hello world!"</span>, file=stdout)</span><br><span class="line">    print(file=stdout)</span><br><span class="line">    h = sorted(environ.items())</span><br><span class="line">    <span class="keyword">for</span> k,v <span class="keyword">in</span> h:</span><br><span class="line">        print(k,<span class="string">'='</span>,repr(v), file=stdout)</span><br><span class="line">    start_response(<span class="string">"200 OK"</span>, [(<span class="string">'Content-Type'</span>,<span class="string">'text/plain; charset=utf-8'</span>)])</span><br><span class="line">    <span class="keyword">return</span> [stdout.getvalue().encode(<span class="string">"utf-8"</span>)]</span><br></pre></td></tr></table></figure></li><li><p><code>StringIO</code> 在内存中读写str</p></li><li><code>print(&quot;Hello world!&quot;, file=stdout)</code><br>将<code>Hello world!</code>内容写入内存中<ul><li><code>start_response</code> 构造head</li><li><code>getvalue</code> 把缓冲区的内容全部读取出来，内容必须为<code>btyes</code><h1 id="WSGI服务器作用"><a href="#WSGI服务器作用" class="headerlink" title="WSGI服务器作用"></a>WSGI服务器作用</h1></li></ul></li><li>监听HTTP服务端口（TCPServer，默认端口80）</li><li>接收浏览器端的HTTP请求并解析封装成<code>environ</code>环境数据</li><li>负责调用应用程序，将<code>environ</code>数据和<code>start_response</code>方法两个实参传入给<code>Application</code></li><li>将应用程序响应的正文封装成HTTP响应报文返回浏览器端</li><li>所有头和内容都是由server来封装<h1 id="WSGI-APP应用程序端"><a href="#WSGI-APP应用程序端" class="headerlink" title="WSGI APP应用程序端"></a>WSGI APP应用程序端</h1></li></ul><ol><li>应用程序应该是一个可调用对象<br>Python中应该是<strong>函数</strong>、<strong>类</strong>、实现了 <code>__call__</code> 方法的<strong>类的实例</strong></li><li>这个可调用对象应该接收两个参数<h2 id="1-函数实现"><a href="#1-函数实现" class="headerlink" title="1. 函数实现"></a>1. 函数实现</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> wsgiref.simple_server <span class="keyword">import</span> make_server</span><br><span class="line"></span><br><span class="line">return_res = <span class="string">b'Hello World'</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">application</span><span class="params">(environ, start_response)</span>:</span></span><br><span class="line">    start_response(<span class="string">"200 OK"</span>, [(<span class="string">'Content-Type'</span>, <span class="string">'text/plain; charset=utf-8'</span>)])</span><br><span class="line">    <span class="keyword">return</span> [return_res]</span><br><span class="line"></span><br><span class="line">ip = <span class="string">'127.0.0.1'</span></span><br><span class="line">port = <span class="number">9999</span></span><br><span class="line">server = make_server(ip, port, application) <span class="comment"># demo_app应用程序，可调用</span></span><br><span class="line">server.serve_forever() <span class="comment"># server.handle_request() 执行一次</span></span><br></pre></td></tr></table></figure></li></ol><h2 id="2-类实现"><a href="#2-类实现" class="headerlink" title="2. 类实现"></a>2. 类实现</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> wsgiref.simple_server <span class="keyword">import</span> make_server</span><br><span class="line"></span><br><span class="line">return_res = <span class="string">b'Hello World'</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Application</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, environ, start_response)</span>:</span></span><br><span class="line">        self.env = environ</span><br><span class="line">        self.sr = start_response</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__iter__</span><span class="params">(self)</span>:</span> <span class="comment"># 对象可迭代</span></span><br><span class="line">        self.sr(<span class="string">"200 OK"</span>, [(<span class="string">'Content-Type'</span>, <span class="string">'text/plain; charset=utf-8'</span>)])</span><br><span class="line">        <span class="keyword">yield</span> return_res</span><br><span class="line"></span><br><span class="line">ip = <span class="string">'127.0.0.1'</span></span><br><span class="line">port = <span class="number">9999</span></span><br><span class="line">server = make_server(ip, port, Application) <span class="comment"># Demo_app应用程序，可调用</span></span><br><span class="line">server.serve_forever() <span class="comment"># server.handle_request() 执行一次</span></span><br></pre></td></tr></table></figure><h2 id="3-类实现，可调用对象"><a href="#3-类实现，可调用对象" class="headerlink" title="3. 类实现，可调用对象"></a>3. 类实现，可调用对象</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> wsgiref.simple_server <span class="keyword">import</span> make_server</span><br><span class="line"></span><br><span class="line">return_res = <span class="string">b'Hello World'</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Application</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__call__</span><span class="params">(self, environ, start_response)</span>:</span></span><br><span class="line">        start_response(<span class="string">"200 OK"</span>, [(<span class="string">'Content-Type'</span>, <span class="string">'text/plain; charset=utf-8'</span>)])</span><br><span class="line">        <span class="keyword">return</span> [return_res]</span><br><span class="line"></span><br><span class="line">ip = <span class="string">'127.0.0.1'</span></span><br><span class="line">port = <span class="number">9999</span></span><br><span class="line">server = make_server(ip, port, Application()) <span class="comment"># Application(e,s)</span></span><br><span class="line">server.serve_forever() <span class="comment"># server.handle_request() 执行一次</span></span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/20190714130104904.png" alt="在这里插入图片描述"></p><ul><li>environ和start_response这两个参数名可以是任何合法名，但是一般默认都是这2个名字</li><li>应用程序端还有些其他的规定，暂不用关心</li></ul><p><strong>注意</strong>：第2、第3种实现调用时的不同</p><h2 id="自定义-返回头"><a href="#自定义-返回头" class="headerlink" title="自定义 返回头"></a>自定义 返回头</h2><p>一般自定义习惯用<code>‘X’</code>开头<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> wsgiref.simple_server <span class="keyword">import</span> make_server</span><br><span class="line"></span><br><span class="line">return_res = <span class="string">b'Hello World'</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Application</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__call__</span><span class="params">(self, environ, start_response)</span>:</span></span><br><span class="line">        start_response(<span class="string">"200 OK"</span>, [</span><br><span class="line">            (<span class="string">'Content-Type'</span>, <span class="string">'text/plain; charset=utf-8'</span>),</span><br><span class="line">            (<span class="string">'X-Server'</span>, <span class="string">'MyDemo_app'</span>)</span><br><span class="line">        ])</span><br><span class="line">        <span class="keyword">return</span> [return_res]</span><br><span class="line"></span><br><span class="line">ip = <span class="string">'127.0.0.1'</span></span><br><span class="line">port = <span class="number">9999</span></span><br><span class="line">server = make_server(ip, port, Application()) <span class="comment"># Application应用程序，可调用</span></span><br><span class="line">server.serve_forever() <span class="comment"># server.handle_request() 执行一次</span></span><br></pre></td></tr></table></figure></p><p><img src="https://img-blog.csdnimg.cn/20190714130445156.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3B5dGhvbl9scXg=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h2 id="environ"><a href="#environ" class="headerlink" title="environ"></a>environ</h2><p>environ是包含Http请求信息的dict字典对象<br>| 名称 | 含义 |<br>|:–|:–|<br>|REQUEST_METHOD |请求方法，GET、POST等|<br>|PATH_INFO| URL中的路径部分|<br>|QUERY_STRING| 查询字符串|<br>|SERVER_NAME, SERVER_PORT| 服务器名、端口|<br>|HTTP_HOST| 地址和端口|<br>|SERVER_PROTOCOL |协议|<br>|HTTP_USER_AGENT| UserAgent信息|</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">CONTENT_TYPE = &apos;text/plain&apos;</span><br><span class="line">HTTP_HOST = &apos;127.0.0.1:9999&apos;</span><br><span class="line">HTTP_USER_AGENT = &apos;Mozilla/5.0 (Windows; U; Windows NT 6.1; zh-CN) AppleWebKit/537.36 (KHTML, </span><br><span class="line">like Gecko) Version/5.0.1 Safari/537.36&apos;</span><br><span class="line">PATH_INFO = &apos;/&apos;</span><br><span class="line">QUERY_STRING = &apos;&apos;</span><br><span class="line">REMOTE_ADDR = &apos;127.0.0.1&apos;</span><br><span class="line">REMOTE_HOST = &apos;&apos;</span><br><span class="line">REQUEST_METHOD = &apos;GET&apos;</span><br><span class="line">SERVER_NAME = &apos;DESKTOP-D34H5HF&apos;</span><br><span class="line">SERVER_PORT = &apos;9999&apos;</span><br><span class="line">SERVER_PROTOCOL = &apos;HTTP/1.1&apos;</span><br><span class="line">SERVER_SOFTWARE = &apos;WSGIServer/0.2&apos;</span><br></pre></td></tr></table></figure><h2 id="start-response"><a href="#start-response" class="headerlink" title="start_response"></a>start_response</h2><p>它是一个可调用对象。有3个参数，定义如下：<br><code>start_response(status, response_headers, exc_info=None)</code><br>|参数名称 |说明|<br>|:–|:–|<br>|status |状态码和状态描述，例如 200 OK|<br>|response_headers |一个元素为二元组的列表<br>例如<code>[(&#39;Content-Type&#39;, &#39;text/plain;charset=utf-8&#39;)]</code>|<br>|exc_info |在错误处理的时候使用|<br>start_response应该在返回可迭代对象之前调用，因为它返回的是Response Header。返回的可迭代对象是Response Body</p><h1 id="服务器端"><a href="#服务器端" class="headerlink" title="服务器端"></a>服务器端</h1><p>服务器程序需要调用符合上述定义的可调用对象APP，传入<code>environ</code>、<code>start_response</code>，APP处理后，返回响应头和可迭代对象的正文，由服务器封装返回浏览器端</p><ul><li>返回网页的例子<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> wsgiref.simple_server <span class="keyword">import</span> make_server</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">application</span><span class="params">(environ, start_response)</span>:</span></span><br><span class="line">    status = <span class="string">'200 OK'</span></span><br><span class="line">    headers = [(<span class="string">'Content-Type'</span>, <span class="string">'text/html;charset=utf-8'</span>)]</span><br><span class="line">    start_response(status, headers)</span><br><span class="line">    <span class="comment"># 返回可迭代对象</span></span><br><span class="line">    html = <span class="string">'&lt;h1&gt;Hello World&lt;/h1&gt;'</span>.encode(<span class="string">"utf-8"</span>)</span><br><span class="line">    <span class="keyword">return</span> [html]</span><br><span class="line"></span><br><span class="line">ip = <span class="string">'127.0.0.1'</span></span><br><span class="line">port = <span class="number">9999</span></span><br><span class="line">server = make_server(ip, port, application)</span><br><span class="line">server.serve_forever() <span class="comment"># server.handle_request() 执行一次</span></span><br></pre></td></tr></table></figure></li></ul><p><img src="https://img-blog.csdnimg.cn/20190714131425785.png" alt="在这里插入图片描述"><br>simple_server 只是参考用，不能用于生产环境</p><h2 id="Linux-测试用命令"><a href="#Linux-测试用命令" class="headerlink" title="Linux 测试用命令"></a>Linux 测试用命令</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ curl -I http://192.168.142.1:9999/xxx?id=5</span><br><span class="line">$ curl -X POST http://192.168.142.1:9999/yyy -d &apos;&#123;&quot;x&quot;:2&#125;&apos;</span><br></pre></td></tr></table></figure><ul><li><code>-I</code> 使用HEAD方法</li><li><code>-X</code> 指定方法，<code>-d</code>传输数据</li></ul><p>到这里就完成了一个简单的WEB 程序开发</p><h2 id="WSGI-WEB服务器"><a href="#WSGI-WEB服务器" class="headerlink" title="WSGI WEB服务器"></a>WSGI WEB服务器</h2><ul><li>本质上就是一个TCP服务器，监听在特定端口上</li><li>支持HTTP协议，能够将HTTP请求报文进行解析，能够把响应数据进行HTTP协议的报文封装并返回浏览器端</li><li>实现了WSGI协议，该协议约定了和应用程序之间接口（参看PEP333，<a href="https://www.python.org/dev/peps/pep-0333/" target="_blank" rel="noopener">https://www.python.org/dev/peps/pep-0333/</a> ）<h2 id="WSGI-APP应用程序"><a href="#WSGI-APP应用程序" class="headerlink" title="WSGI APP应用程序"></a>WSGI APP应用程序</h2></li><li>遵从WSGI协议</li><li>本身是一个可调用对象</li><li>调用start_response，返回响应头部</li><li>返回包含正文的可迭代对象</li></ul><p>WSGI 框架库往往可以看做增强的更加复杂的Application</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;img src=&quot;https://img-blog.csdnimg.cn/20190714102236481.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM
      
    
    </summary>
    
      <category term="web" scheme="https://hubhack.github.io/categories/web/"/>
    
    
      <category term="web" scheme="https://hubhack.github.io/tags/web/"/>
    
  </entry>
  
  <entry>
    <title>RabbitMQ</title>
    <link href="https://hubhack.github.io/%E4%B8%AD%E9%97%B4%E4%BB%B6/RabbitMQ/"/>
    <id>https://hubhack.github.io/中间件/RabbitMQ/</id>
    <published>2019-08-22T08:41:08.876Z</published>
    <updated>2019-08-22T08:52:28.632Z</updated>
    
    <content type="html"><![CDATA[<h1 id="RabbitMQ"><a href="#RabbitMQ" class="headerlink" title="RabbitMQ"></a>RabbitMQ</h1><p>RabbitMQ 是由 LShift 提供的一个 Advanced Message Queuing Protocol (AMQP) 的开源实现，由以高性能、健壮以及可伸缩性出名的 Erlang 写成，因此也是继承了这些优点</p><p>很成熟，久经考验，应用广泛<br>文档详细，客户端丰富，几乎常用语言都有RabbitMQ的开发库</p><h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><p><a href="http://www.rabbitmq.com/install-rpm.html" target="_blank" rel="noopener">http://www.rabbitmq.com/install-rpm.html</a></p><p>选择RPM包下载，选择对应平台，本次安装在CentOS 7，其它平台类似</p><p>由于使用了erlang语言开发，所以需要erlang的包。erlang和RabbitMQ的兼容性，参考 <a href="https://www.rabbitmq.com/which-erlang.html#compatibility-matrix" target="_blank" rel="noopener">https://www.rabbitmq.com/which-erlang.html#compatibility-matrix</a></p><p>下载 <code>rabbitmq-server-3.7.16-1.el7.noarch.rpm</code>、<code>erlang-21.3.8.6-1.el7.x86_64.rpm</code>。socat在CentOS中源中有<br><img src="https://img-blog.csdnimg.cn/20190729191430250.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3B5dGhvbl9scXg=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"># yum install erlang-21.3.8.6-1.el7.x86_64.rpm rabbitmq-server-3.7.16-1.el7.noarch.rpm</span><br></pre></td></tr></table></figure></p><p>安装成功</p><p>查看安装的文件<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"># rpm -ql rabbitmq-server</span><br><span class="line">/etc/profile.d/rabbitmqctl-autocomplete.sh</span><br><span class="line">/etc/rabbitmq</span><br><span class="line">/usr/lib/rabbitmq/bin/rabbitmq-plugins</span><br><span class="line">/usr/lib/rabbitmq/bin/rabbitmq-server</span><br><span class="line">/usr/lib/systemd/system/rabbitmq-server.service</span><br><span class="line">/usr/sbin/rabbitmq-diagnostics</span><br><span class="line">/usr/sbin/rabbitmq-plugins</span><br><span class="line">/usr/sbin/rabbitmq-server</span><br><span class="line">/usr/sbin/rabbitmqctl</span><br><span class="line">/var/lib/rabbitmq</span><br><span class="line">/var/lib/rabbitmq/mnesia</span><br><span class="line">/var/log/rabbitmq</span><br></pre></td></tr></table></figure></p><h2 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h2><p><a href="http://www.rabbitmq.com/configure.html#config-location" target="_blank" rel="noopener">http://www.rabbitmq.com/configure.html#config-location</a></p><h3 id="环境变量"><a href="#环境变量" class="headerlink" title="环境变量"></a>环境变量</h3><p>使用系统环境变量，如果没有使用rabbitmq-env.conf 中定义环境变量，否则使用缺省值<br>RABBITMQ_NODE_IP_ADDRESS the empty string, meaning that it should bind to all network interfaces.<br>RABBITMQ_NODE_PORT 5672<br>RABBITMQ_DIST_PORT RABBITMQ_NODE_PORT + 20000 内部节点和客户端工具通信用<br>RABBITMQ_CONFIG_FILE 配置文件路径默认为/etc/rabbitmq/rabbitmq<br>环境变量文件，<strong>可以不配置</strong></p><h3 id="工作特性配置文件"><a href="#工作特性配置文件" class="headerlink" title="工作特性配置文件"></a>工作特性配置文件</h3><p>rabbitmq.config配置文件<br>3.7支持新旧两种配置文件格式</p><ol><li>erlang配置文件格式，为了兼容继续采用<br><img src="https://img-blog.csdnimg.cn/20190729191759510.png" alt="在这里插入图片描述"></li><li>sysctl格式，如果不需要兼容，RabbitMQ鼓励使用<br><img src="https://img-blog.csdnimg.cn/20190729191819123.png" alt="在这里插入图片描述"></li></ol><p>这个文件也可以<strong>不配置</strong></p><h2 id="插件管理"><a href="#插件管理" class="headerlink" title="插件管理"></a>插件管理</h2><p>列出所有可用插件<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"># rabbitmq-plugins list</span><br></pre></td></tr></table></figure></p><p>启动WEB管理插件，会依赖启用其它几个插件<br><code>rabbitmq-plugins enable rabbitmq_management</code><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"># rabbitmq-plugins enable rabbitmq_management</span><br><span class="line">Enabling plugins on node rabbit@centos7:</span><br><span class="line">rabbitmq_management</span><br><span class="line">The following plugins have been configured:</span><br><span class="line">  rabbitmq_management</span><br><span class="line">  rabbitmq_management_agent</span><br><span class="line">  rabbitmq_web_dispatch</span><br><span class="line">Applying plugin configuration to rabbit@centos7...</span><br><span class="line">The following plugins have been enabled:</span><br><span class="line">  rabbitmq_management</span><br><span class="line">  rabbitmq_management_agent</span><br><span class="line">  rabbitmq_web_dispatch</span><br><span class="line"></span><br><span class="line">set 3 plugins.</span><br><span class="line">Offline change; changes will take effect at broker restart.</span><br></pre></td></tr></table></figure></p><h2 id="启动rabbitmq服务"><a href="#启动rabbitmq服务" class="headerlink" title="启动rabbitmq服务"></a>启动rabbitmq服务</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"># systemctl start rabbitmq-server</span><br></pre></td></tr></table></figure><p>启动中，可能出现下面的错误<br><code>Error when reading /var/lib/rabbitmq/.erlang.cookie: eacces</code><br>就是这个文件的权限问题，修改属主、属组为rabbitmq即可<br><code>chown rabbitmq.rabbitmq /var/lib/rabbitmq/.erlang.cookie: eacces</code><br>服务启动成功<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"># ss -tanl | grep 5672</span><br><span class="line">LISTEN     0      128          *:25672                    *:*                  </span><br><span class="line">LISTEN     0      128          *:15672                    *:*                  </span><br><span class="line">LISTEN     0      128         :::5672                    :::*</span><br></pre></td></tr></table></figure></p><p>15672 http用的端口<br>25672 集群通信<br>5672 按协议访问，常用</p><h2 id="用户管理"><a href="#用户管理" class="headerlink" title="用户管理"></a>用户管理</h2><p>开始登录WEB界面，<a href="http://192.168.1.5:15672" target="_blank" rel="noopener">http://192.168.1.5:15672</a><br><img src="https://img-blog.csdnimg.cn/20190729194051395.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3B5dGhvbl9scXg=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>使用<code>guest/guest</code>只能本地地登录，远程登录会报错<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">rabbitmqctl [-n &lt;node&gt;][-t timeout] [-l][-q] &lt;command&gt; [&lt;command options&gt;]</span><br><span class="line"></span><br><span class="line">General options:</span><br><span class="line"> -n node </span><br><span class="line"> -q, --quiet </span><br><span class="line"> -t,--timeout timeout</span><br><span class="line"> -l longnames</span><br><span class="line"> </span><br><span class="line">Commands:</span><br><span class="line"> add_user &lt;username&gt; &lt;password&gt; 添加用户</span><br><span class="line"> list_users 列出用户</span><br><span class="line"> delete_user username 删除用户</span><br><span class="line"> change_password &lt;username&gt; &lt;password&gt; 修改用户名、密码</span><br><span class="line">  set_user_tags &lt;username&gt; &lt;tag&gt; [...] 设置用户tag</span><br><span class="line"> list_user_permissions &lt;username&gt; 列出用户权限</span><br></pre></td></tr></table></figure></p><p>创建用户 用户名和密码（只能在本地登录）</p><ul><li>添加用户:<br><code>rabbitmqctl add_user username password</code></li><li>删除用户:<br><code>rabbitmqctl delete_user username</code></li><li>更改密码:<br><code>rabbitmqctl change_password username newpassword</code></li><li>设置权限Tags，其实就是分配组<br><code>rabbitmqctl set_user_tags username tag</code></li></ul><p>设置lqx用户为管理员tag后登录<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"># 创建lqx用户</span><br><span class="line"># rabbitmqctl add_user lqx lqx</span><br><span class="line">Adding user &quot;lqx&quot; ...</span><br><span class="line"></span><br><span class="line"># 查看所有用户</span><br><span class="line"># rabbitmqctl list_users</span><br><span class="line">Listing users ...</span><br><span class="line">usertags</span><br><span class="line">guest[administrator]</span><br><span class="line">lqx[]</span><br><span class="line"></span><br><span class="line">#授权用户权限</span><br><span class="line"># rabbitmqctl set_user_tags lqx administrator</span><br><span class="line">Setting tags for user &quot;lqx&quot; to [administrator] ...</span><br><span class="line"></span><br><span class="line"># 查看所有用户</span><br><span class="line"># rabbitmqctl list_users</span><br><span class="line">Listing users ...</span><br><span class="line">usertags</span><br><span class="line">guest[administrator]</span><br><span class="line">lqx[administrator]</span><br></pre></td></tr></table></figure></p><p>tag的意义如下</p><p>administrator 可以管理用户、权限、虚拟主机<br><img src="https://img-blog.csdnimg.cn/20190729204555167.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3B5dGhvbl9scXg=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h2 id="基本信息"><a href="#基本信息" class="headerlink" title="基本信息"></a>基本信息</h2><p><img src="https://img-blog.csdnimg.cn/20190729204832587.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3B5dGhvbl9scXg=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h2 id="虚拟主机"><a href="#虚拟主机" class="headerlink" title="虚拟主机"></a>虚拟主机</h2><p><img src="https://img-blog.csdnimg.cn/20190729205034538.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3B5dGhvbl9scXg=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><ul><li><code>/</code>为缺省虚拟主机</li></ul><p><img src="https://img-blog.csdnimg.cn/2019072920520662.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3B5dGhvbl9scXg=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>缺省虚拟主机，默认只能是guest用户在本机连接。上图新建的用户<code>lqx</code>默认无法访问任何虚拟主机</p><h1 id="Pika库"><a href="#Pika库" class="headerlink" title="Pika库"></a>Pika库</h1><p>Pika是纯Python实现的支持AMQP协议的库<br><code>$ pip install pika</code></p><h1 id="RabbitMQ工作原理及应用"><a href="#RabbitMQ工作原理及应用" class="headerlink" title="RabbitMQ工作原理及应用"></a>RabbitMQ工作原理及应用</h1><h2 id="工作模式"><a href="#工作模式" class="headerlink" title="工作模式"></a>工作模式</h2><p><a href="https://www.rabbitmq.com/getstarted.html" target="_blank" rel="noopener">https://www.rabbitmq.com/getstarted.html</a><br><img src="https://img-blog.csdnimg.cn/20190729205505380.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3B5dGhvbl9scXg=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/20190729205518319.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3B5dGhvbl9scXg=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>上图，列出了RabbitMQ的使用模式，学习上面的模式，对理解所有消息队列都很重要</p><h2 id="名词解释"><a href="#名词解释" class="headerlink" title="名词解释"></a>名词解释</h2><table><thead><tr><th style="text-align:left">名词</th><th style="text-align:left">说明</th></tr></thead><tbody><tr><td style="text-align:left">Server</td><td style="text-align:left">服务器<br>接收客户端连接，实现消息队列及路由功能的进程（服务），也称为 消息代理<br>注意，客户端可以生产者，也可以是消费者，它们都需要连接到Server</td></tr><tr><td style="text-align:left">Connection</td><td style="text-align:left">网络物理连接</td></tr><tr><td style="text-align:left">Channel</td><td style="text-align:left">一个连接允许多个客户端连接</td></tr><tr><td style="text-align:left">Exchange</td><td style="text-align:left">交换器。接收生产者发来的消息，决定如何路由给服务器中的队列<br>常用的类型有：<br>direct (point-to-point) <br>topic (publish-subscribe) <br>fanout (multicast)</td></tr><tr><td style="text-align:left">Message</td><td style="text-align:left">消息</td></tr><tr><td style="text-align:left">Message <br>Queue</td><td style="text-align:left">消息队列<br>数据的存储载体</td></tr><tr><td style="text-align:left">Bind</td><td style="text-align:left">绑定<br>建立消息队列和交换器之间的关系，也就是说交换器拿到数据，把什么样的数据送给哪个队列</td></tr><tr><td style="text-align:left">Virtual Host</td><td style="text-align:left">虚拟主机<br>一批交换机、消息队列和相关对象的集合。为了多用户互不干扰，使用虚拟主机分组交换机、消息队列<br></td></tr><tr><td style="text-align:left">Topic</td><td style="text-align:left">主题、话题</td></tr><tr><td style="text-align:left">Broker</td><td style="text-align:left">可等价为Server</td></tr></tbody></table><p>先链接 然后信道，然后交换机（缺省默认配置）， 然后队列</p><h2 id="1-队列"><a href="#1-队列" class="headerlink" title="1. 队列"></a>1. 队列</h2><p>这种模式就是最简单的 生产者消费者模型，消息队列就是一个FIFO的队列<br><img src="https://img-blog.csdnimg.cn/20190729205955202.png" alt="在这里插入图片描述"><br>生产者<code>send.py</code>，消费者<code>receive.py</code><br>官方例子 <a href="https://www.rabbitmq.com/tutorials/tutorial-one-python.html" target="_blank" rel="noopener">https://www.rabbitmq.com/tutorials/tutorial-one-python.html</a><br>参照官方例子，写一个程序<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> pika</span><br><span class="line"></span><br><span class="line">params = pika.ConnectionParameters(<span class="string">'192.168.1.5'</span>)</span><br><span class="line">connection = pika.BlockingConnection(params)</span><br><span class="line">channel = connection.channel()</span><br><span class="line"><span class="comment"># 交换机， 路由器</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 队列</span></span><br><span class="line">channel.queue_declare(queue=<span class="string">'hello'</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">with</span> connection:</span><br><span class="line">    <span class="comment"># 发消息</span></span><br><span class="line">    msg = <span class="string">'Hello World!'</span></span><br><span class="line">    channel.basic_publish(exchange=<span class="string">''</span>, <span class="comment"># 交换机为空</span></span><br><span class="line">                          routing_key=<span class="string">'hello'</span>, <span class="comment"># hello</span></span><br><span class="line">                          body=msg)</span><br><span class="line">    print(<span class="string">" [x] Sent 'Hello World!'"</span>)</span><br></pre></td></tr></table></figure></p><p>运行结果如下<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">pika.exceptions.ProbableAuthenticationError: ConnectionClosedByBroker: (403) &apos;ACCESS_REFUSED </span><br><span class="line">- Login was refused using authentication mechanism PLAIN. For details see the broker logfile.&apos;</span><br></pre></td></tr></table></figure></p><p>访问被拒绝，还是权限问题，原因还是guest用户只能访问localhost上的 <code>/</code> 缺省虚拟主机</p><p><strong>解决办法*</strong></p><ul><li>缺省虚拟主机，默认只能在本机访问，不要修改为远程访问，是安全的考虑</li><li>因此，在Admin中Virtual hosts中，新建一个虚拟主机test。</li><li>注意，新建的test虚拟主机的Users是谁，本次是lqx用户</li></ul><p><img src="https://img-blog.csdnimg.cn/2019072921152386.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3B5dGhvbl9scXg=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/20190729211556374.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3B5dGhvbl9scXg=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h3 id="生产者代码"><a href="#生产者代码" class="headerlink" title="生产者代码"></a>生产者代码</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> pika</span><br><span class="line"></span><br><span class="line">queue_name = <span class="string">'hello'</span></span><br><span class="line">params = pika.URLParameters(<span class="string">'amqp://lqx:lqx@192.168.1.5:5672/test'</span>)</span><br><span class="line"></span><br><span class="line">connection = pika.BlockingConnection(params)</span><br><span class="line">channel = connection.channel()</span><br><span class="line"><span class="comment"># 交换机， 路由器</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 队列</span></span><br><span class="line">channel.queue_declare(queue=queue_name)</span><br><span class="line"></span><br><span class="line"><span class="keyword">with</span> connection:</span><br><span class="line">    <span class="comment"># 发消息</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">10</span>):</span><br><span class="line">        msg = <span class="string">'data-&#123;:02&#125;'</span>.format(i)</span><br><span class="line">        channel.basic_publish(exchange=<span class="string">''</span>, <span class="comment"># 交换机为空</span></span><br><span class="line">                              routing_key=queue_name, <span class="comment"># hello</span></span><br><span class="line">                              body=msg)</span><br><span class="line">    print(<span class="string">" [x] Sent 'Hello World!'"</span>)</span><br></pre></td></tr></table></figure><h3 id="消费者代码（get方法，非阻塞）"><a href="#消费者代码（get方法，非阻塞）" class="headerlink" title="消费者代码（get方法，非阻塞）"></a>消费者代码（get方法，非阻塞）</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> pika</span><br><span class="line"></span><br><span class="line">queue_name = <span class="string">'hello'</span></span><br><span class="line">params = pika.URLParameters(<span class="string">'amqp://lqx:lqx@192.168.1.5:5672/test'</span>)</span><br><span class="line"></span><br><span class="line">connection = pika.BlockingConnection(params)</span><br><span class="line">channel = connection.channel()</span><br><span class="line"><span class="comment"># 交换机， 路由器</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 队列</span></span><br><span class="line">channel.queue_declare(queue=queue_name)</span><br><span class="line"></span><br><span class="line"><span class="keyword">with</span> connection:</span><br><span class="line">    <span class="comment"># 消费</span></span><br><span class="line">    msg =channel.basic_get(queue_name, <span class="literal">True</span>) <span class="comment"># get方法需要ACK</span></span><br><span class="line">    method, properties, body = msg</span><br><span class="line">    print(<span class="string">'msg = &#123;&#125;'</span>.format(body))</span><br></pre></td></tr></table></figure><h3 id="消费者代码（consume方法，阻塞）"><a href="#消费者代码（consume方法，阻塞）" class="headerlink" title="消费者代码（consume方法，阻塞）"></a>消费者代码（consume方法，阻塞）</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> pika</span><br><span class="line"></span><br><span class="line">queue_name = <span class="string">'hello'</span></span><br><span class="line">params = pika.URLParameters(<span class="string">'amqp://lqx:lqx@192.168.1.5:5672/test'</span>)</span><br><span class="line"></span><br><span class="line">connection = pika.BlockingConnection(params)</span><br><span class="line">channel = connection.channel()</span><br><span class="line"><span class="comment"># 交换机， 路由器</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 队列</span></span><br><span class="line">channel.queue_declare(queue=queue_name)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">callback</span><span class="params">(ch ,method, properties, body)</span>:</span></span><br><span class="line">    print(<span class="string">" [x] Receivde %r"</span> % body)</span><br><span class="line"><span class="keyword">with</span> connection:</span><br><span class="line">    <span class="comment"># 消费者，每一个消费者使用过一个basic_consume</span></span><br><span class="line">    channel.basic_consume(queue_name,</span><br><span class="line">                          auto_ack=<span class="literal">True</span>,</span><br><span class="line">                          on_message_callback=callback)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    print(<span class="string">' [*] Waiting for messages. To exit press CTRL+C'</span>)</span><br><span class="line">    channel.start_consuming()</span><br></pre></td></tr></table></figure><p>执行结果<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">[*] Waiting <span class="keyword">for</span> messages. To exit press CTRL+C</span><br><span class="line">[x] Receivde <span class="string">b'data-00'</span></span><br><span class="line">[x] Receivde <span class="string">b'data-01'</span></span><br><span class="line">[x] Receivde <span class="string">b'data-02'</span></span><br><span class="line">[x] Receivde <span class="string">b'data-03'</span></span><br><span class="line">[x] Receivde <span class="string">b'data-04'</span></span><br><span class="line">[x] Receivde <span class="string">b'data-05'</span></span><br><span class="line">[x] Receivde <span class="string">b'data-06'</span></span><br><span class="line">[x] Receivde <span class="string">b'data-07'</span></span><br><span class="line">[x] Receivde <span class="string">b'data-08'</span></span><br><span class="line">[x] Receivde <span class="string">b'data-09'</span></span><br></pre></td></tr></table></figure></p><h2 id="2-工作队列"><a href="#2-工作队列" class="headerlink" title="2. 工作队列"></a>2. 工作队列</h2><p><img src="https://img-blog.csdnimg.cn/20190729212719501.png" alt="在这里插入图片描述"></p><ul><li>继续使用队列模式的生产者消费者代码</li><li>一个链接里启2个消费<strong>或者</strong>启动2个链接消费</li><li>结果都是一样的</li></ul><p><strong>生产者代码不变，修改消费者代码</strong><br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> pika</span><br><span class="line"></span><br><span class="line">queue_name = <span class="string">'hello'</span></span><br><span class="line">params = pika.URLParameters(<span class="string">'amqp://lqx:lqx@192.168.1.5:5672/test'</span>)</span><br><span class="line"></span><br><span class="line">connection = pika.BlockingConnection(params)</span><br><span class="line">channel = connection.channel()</span><br><span class="line"><span class="comment"># 交换机， 路由器</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 队列</span></span><br><span class="line">channel.queue_declare(queue=queue_name)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">callback</span><span class="params">(ch ,method, properties, body)</span>:</span></span><br><span class="line">    print(<span class="string">"mag = &#123;&#125;"</span>.format(body))</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">callback1</span><span class="params">(ch ,method, properties, body)</span>:</span></span><br><span class="line">    print(<span class="string">"mag1 = &#123;&#125;"</span>.format(body))</span><br><span class="line"></span><br><span class="line"><span class="keyword">with</span> connection:</span><br><span class="line">    <span class="comment"># 消费者，每一个消费者使用过一个basic_consume</span></span><br><span class="line">    channel.basic_consume(queue_name,</span><br><span class="line">                          auto_ack=<span class="literal">True</span>,</span><br><span class="line">                          on_message_callback=callback)</span><br><span class="line"></span><br><span class="line">    channel.basic_consume(queue_name,</span><br><span class="line">                          auto_ack=<span class="literal">True</span>,</span><br><span class="line">                          on_message_callback=callback1)</span><br><span class="line"></span><br><span class="line">    print(<span class="string">' [*] Waiting for messages. To exit press CTRL+C'</span>)</span><br><span class="line">    channel.start_consuming() <span class="comment"># 启动所有消费，直到所有消费结束，才能退出。阻塞的</span></span><br></pre></td></tr></table></figure></p><p>执行结果<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"> [*] Waiting <span class="keyword">for</span> messages. To exit press CTRL+C</span><br><span class="line">mag = <span class="string">b'data-00'</span></span><br><span class="line">mag1 = <span class="string">b'data-01'</span></span><br><span class="line">mag = <span class="string">b'data-02'</span></span><br><span class="line">mag1 = <span class="string">b'data-03'</span></span><br><span class="line">mag = <span class="string">b'data-04'</span></span><br><span class="line">mag1 = <span class="string">b'data-05'</span></span><br><span class="line">mag = <span class="string">b'data-06'</span></span><br><span class="line">mag1 = <span class="string">b'data-07'</span></span><br><span class="line">mag = <span class="string">b'data-08'</span></span><br><span class="line">mag1 = <span class="string">b'data-09'</span></span><br></pre></td></tr></table></figure></p><ul><li>这种工作模式是一种竞争工作方式，对某一个消息来说，只能有一个消费者拿走它</li><li>从结果知道，使用的是轮询方式拿走数据的</li><li>观察结果，可以看到，2个消费者是交替拿到不同的消息<br>注意：虽然上面的图中没有画出exchange，用到缺省exchange</li></ul><h2 id="3-发布、订阅模式-扇出"><a href="#3-发布、订阅模式-扇出" class="headerlink" title="3. 发布、订阅模式(扇出)"></a>3. 发布、订阅模式(扇出)</h2><p>Publish/Subscribe发布和订阅，想象一下订阅报纸，所有订阅者（消费者）订阅这个报纸（消息），都应该拿到一份同样内容的报纸</p><ul><li><p>订阅者和消费者之间还有一个exchange，可以想象成邮局，消费者去邮局订阅报纸，报社发报纸到邮局，邮局决定如何投递到消费者手中</p></li><li><p>上例中工作队列模式的使用，相当于，每个人只能拿到不同的报纸。所以，不适用发布订阅模式</p></li></ul><p><img src="https://img-blog.csdnimg.cn/20190730082511902.png" alt="在这里插入图片描述"><br>当前模式的exchange的type是fanout，就是一对多，即广播模式。<br>注意，同一个queue的消息只能被消费一次，所以，这里使用了多个queue，相当于为了保证不同的消费者拿到同<br>样的数据，每一个消费者都应该有自己的queue</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 生成一个交换机</span></span><br><span class="line">channel.exchange_declare(</span><br><span class="line">exchange=<span class="string">'logs'</span>, <span class="comment"># 新交换机</span></span><br><span class="line">exchange_type=<span class="string">'fanout'</span> <span class="comment"># 广播</span></span><br><span class="line">)</span><br></pre></td></tr></table></figure><p>生产者使用广播模式。在test虚拟主机主机下构建了一个logs交换机<br>至于queue，可以由生产者创建，也可以由消费者创建</p><p>本次采用使用消费者端创建，生产者把数据发往交换机logs，采用了fanout，然后将数据通过交换机发往已经绑定到此交换机的所有queue<br><img src="https://img-blog.csdnimg.cn/20190730082627599.png" alt="在这里插入图片描述"><br>绑定Bingding，建立exchange和queue之间的联系</p><p><strong>生产者代码</strong>（交换机缺省模式）<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> pika</span><br><span class="line"></span><br><span class="line">queue_name = <span class="string">'hello'</span></span><br><span class="line">params = pika.URLParameters(<span class="string">'amqp://lqx:lqx@192.168.1.5:5672/test'</span>)</span><br><span class="line"></span><br><span class="line">connection = pika.BlockingConnection(params)</span><br><span class="line">channel = connection.channel()</span><br><span class="line"><span class="comment"># 交换机， 路由器</span></span><br><span class="line">channel.exchange_declare(exchange=<span class="string">''</span>,</span><br><span class="line">                         exchange_type=<span class="string">'direct'</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 队列</span></span><br><span class="line">channel.queue_declare(queue=queue_name)</span><br><span class="line"></span><br><span class="line"><span class="keyword">with</span> connection:</span><br><span class="line">    <span class="comment"># 发消息</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">10</span>):</span><br><span class="line">        msg = <span class="string">'data-&#123;:02&#125;'</span>.format(i)</span><br><span class="line">        channel.basic_publish(exchange=<span class="string">''</span>, <span class="comment"># 交换机为空</span></span><br><span class="line">                              routing_key=queue_name, <span class="comment"># hello</span></span><br><span class="line">                              body=msg)</span><br><span class="line">    print(<span class="string">" [x] Sent 'Hello World!'"</span>)</span><br></pre></td></tr></table></figure></p><p><strong>生产者代码</strong>（指定交换机）<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> pika</span><br><span class="line"></span><br><span class="line">queue_name = <span class="string">'hello'</span></span><br><span class="line">exchange_name = <span class="string">'logs'</span></span><br><span class="line">params = pika.URLParameters(<span class="string">'amqp://lqx:lqx@192.168.1.5:5672/test'</span>)</span><br><span class="line"></span><br><span class="line">connection = pika.BlockingConnection(params)</span><br><span class="line">channel = connection.channel()</span><br><span class="line"><span class="comment"># 交换机， 路由器</span></span><br><span class="line">channel.exchange_declare(exchange=exchange_name,</span><br><span class="line">                         exchange_type=<span class="string">'fanout'</span>) <span class="comment"># 广播，扇出</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">with</span> connection:</span><br><span class="line">    <span class="comment"># 发消息</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">10</span>):</span><br><span class="line">        msg = <span class="string">'data-&#123;:02&#125;'</span>.format(i)</span><br><span class="line">        </span><br><span class="line">        channel.basic_publish(exchange=exchange_name, <span class="comment"># 指定交换机</span></span><br><span class="line">                              routing_key=<span class="string">''</span>, </span><br><span class="line">                              body=msg)</span><br><span class="line">    print(<span class="string">" [x] Sent 'Hello World!'"</span>)</span><br></pre></td></tr></table></figure></p><p><strong>消费者代码</strong><br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> pika</span><br><span class="line"></span><br><span class="line">queue_name = <span class="string">'hello'</span></span><br><span class="line">exchange_name = <span class="string">'logs'</span></span><br><span class="line">params = pika.URLParameters(<span class="string">'amqp://lqx:lqx@192.168.18.100:5672/test'</span>)</span><br><span class="line"></span><br><span class="line">connection = pika.BlockingConnection(params)</span><br><span class="line">channel = connection.channel()</span><br><span class="line"><span class="comment"># 交换机， 路由器</span></span><br><span class="line">channel.exchange_declare(exchange=exchange_name,</span><br><span class="line">                         exchange_type=<span class="string">'fanout'</span>) <span class="comment"># 广播，扇出</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">with</span> connection:</span><br><span class="line">    <span class="comment"># 发消息</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">10</span>):</span><br><span class="line">        msg = <span class="string">'data-&#123;:02&#125;'</span>.format(i)</span><br><span class="line"></span><br><span class="line">        channel.basic_publish(exchange=exchange_name, <span class="comment"># 指定交换机</span></span><br><span class="line">                              routing_key=<span class="string">''</span>,</span><br><span class="line">                              body=msg)</span><br><span class="line">    print(<span class="string">" [x] Sent 'Hello World!'"</span>)</span><br></pre></td></tr></table></figure></p><p>先启动消费者可以看到已经创建了exchange<br><img src="https://img-blog.csdnimg.cn/20190730084300510.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3B5dGhvbl9scXg=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>如果exchange是fanout，也就是广播了，routing_key就无所谓是什么了<br><img src="https://img-blog.csdnimg.cn/2019073008431632.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3B5dGhvbl9scXg=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">q1 = channel.queue_declare(queue=<span class="string">''</span>, exclusive=<span class="literal">True</span>) </span><br><span class="line">q2 = channel.queue_declare(queue=<span class="string">''</span>, exclusive=<span class="literal">True</span>)</span><br></pre></td></tr></table></figure></p><p>尝试先启动生产者，再启动消费者试试看。<br>部分数据丢失，因为，exchange收到了数据，没有queue接收，所以，exchange丢弃了这些数据</p><h2 id="4-路由Routing"><a href="#4-路由Routing" class="headerlink" title="4.路由Routing"></a>4.路由Routing</h2><p><img src="https://img-blog.csdnimg.cn/20190730084353303.png" alt="在这里插入图片描述"><br>路由其实就是生成者的数据经过exchange的时候，通过匹配规则，决定数据的去向</p><p><strong>生产者代码</strong><br>交换机类型为direct，指定路由的keyn<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> pika</span><br><span class="line"><span class="keyword">import</span> pika</span><br><span class="line"><span class="keyword">import</span> random</span><br><span class="line"></span><br><span class="line">queue_name = <span class="string">'hello'</span></span><br><span class="line">exchange_name = <span class="string">'color'</span></span><br><span class="line">colors = (<span class="string">'orange'</span>, <span class="string">'red'</span>, <span class="string">'green'</span>)</span><br><span class="line">params = pika.URLParameters(<span class="string">'amqp://lqx:lqx@192.168.1.5:5672/test'</span>)</span><br><span class="line"></span><br><span class="line">connection = pika.BlockingConnection(params)</span><br><span class="line">channel = connection.channel()</span><br><span class="line"></span><br><span class="line"><span class="comment">#交换机， 路由器</span></span><br><span class="line">channel.exchange_declare(exchange=exchange_name,</span><br><span class="line">                         exchange_type=<span class="string">'direct'</span>) <span class="comment">#</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">with</span> connection:</span><br><span class="line">    <span class="comment"># 发消息</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">20</span>):</span><br><span class="line">        rk = random.choice(colors)</span><br><span class="line">        msg = <span class="string">'&#123;&#125;: data-&#123;:02&#125;'</span>.format(rk, i)</span><br><span class="line">        channel.basic_publish(exchange=exchange_name, <span class="comment"># 指定交换机</span></span><br><span class="line">                              routing_key=rk,</span><br><span class="line">                              body=msg)</span><br><span class="line">    print(<span class="string">" [x] Sent 'Hello World!'"</span>)</span><br></pre></td></tr></table></figure></p><p><strong>消费者代码</strong><br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> pika</span><br><span class="line"></span><br><span class="line">queue_name = <span class="string">'hello'</span></span><br><span class="line">exchange_name = <span class="string">'color'</span></span><br><span class="line">colors = (<span class="string">'orange'</span>, <span class="string">'black'</span>, <span class="string">'green'</span>)</span><br><span class="line">params = pika.URLParameters(<span class="string">'amqp://lqx:lqx@192.168.1.5:5672/test'</span>)</span><br><span class="line"></span><br><span class="line">connection = pika.BlockingConnection(params)</span><br><span class="line">channel = connection.channel()</span><br><span class="line"></span><br><span class="line"><span class="comment">#交换机，路由器</span></span><br><span class="line">channel.exchange_declare(exchange=exchange_name,exchange_type=<span class="string">'direct'</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 队列</span></span><br><span class="line"><span class="comment">#channel.queue_declare(queue=queue_name)</span></span><br><span class="line"><span class="comment">#q = channel.queue_declare(queue='') 不指定名称，queue名称会随机生成 q.method.queue</span></span><br><span class="line">q1 = channel.queue_declare(queue=<span class="string">''</span>, exclusive=<span class="literal">True</span>) <span class="comment">#exclusive 在断开时，会queue删除</span></span><br><span class="line">q2 = channel.queue_declare(queue=<span class="string">''</span>, exclusive=<span class="literal">True</span>) <span class="comment">#exclusive 在断开时，会queue删除</span></span><br><span class="line">q1name = q1.method.queue</span><br><span class="line">q2name = q2.method.queue</span><br><span class="line"></span><br><span class="line">channel.queue_bind(exchange=exchange_name, queue=q1name, routing_key=colors[<span class="number">0</span>]) <span class="comment"># 将队列和某一个交换机关联</span></span><br><span class="line">channel.queue_bind(exchange=exchange_name, queue=q2name, routing_key=colors[<span class="number">1</span>]) <span class="comment"># 将队列和某一个交换机关联</span></span><br><span class="line">channel.queue_bind(exchange=exchange_name, queue=q2name, routing_key=colors[<span class="number">2</span>]) <span class="comment"># 将队列和某一个交换机关联</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">callback</span><span class="params">(ch, method, properties, body)</span>:</span></span><br><span class="line">    print(<span class="string">"msg  = &#123;&#125;"</span>.format(body), method)</span><br><span class="line"></span><br><span class="line"><span class="keyword">with</span> connection:</span><br><span class="line">    <span class="comment"># 消费者，每一个消费者使用一个basic_consume</span></span><br><span class="line">    channel.basic_consume(queue=q1name,</span><br><span class="line">                          auto_ack=<span class="literal">True</span>,</span><br><span class="line">                          on_message_callback=callback)</span><br><span class="line"></span><br><span class="line">    channel.basic_consume(queue=q2name,</span><br><span class="line">                          auto_ack=<span class="literal">True</span>,</span><br><span class="line">                          on_message_callback=callback)</span><br><span class="line"></span><br><span class="line">    print(<span class="string">' [*] Waiting for messages. To exit press CTRL+C'</span>)</span><br><span class="line">    channel.start_consuming() <span class="comment"># 启动所有消费，直到道所有消费结束，才能退出，阻塞的</span></span><br></pre></td></tr></table></figure></p><p>绑定结果如下<br><img src="https://img-blog.csdnimg.cn/20190730090858453.png" alt="在这里插入图片描述"><br>如果routing_key设置的都一样，会怎么样？</p><p><img src="https://img-blog.csdnimg.cn/20190730090921800.png" alt="在这里插入图片描述"><br>绑定的时候指定的<code>routing_key=&#39;black&#39;</code>，如上图，和fanout就类似了，都是1对多，但是不同<br>因为fanout时，exchange不做数据过滤的，1个消息，所有绑定的queue都会拿到一个副本<br>direct时候，要按照routing_key分配数据，上图的black有2个queue设置了，就会把1个消息分发给这2个queue</p><h2 id="5、Topic-话题"><a href="#5、Topic-话题" class="headerlink" title="5、Topic 话题"></a>5、Topic 话题</h2><p><img src="https://img-blog.csdnimg.cn/20190730090956797.png" alt="在这里插入图片描述"><br>Topic就是更加高级的路由，支持模式匹配而已<br>Topic的routing_key必须使用 . 点号分割的单词组成。最多255个字节<br>支持使用通配符：</p><ul><li><code>*</code>表示严格的一个单词</li><li><code>#</code>表示0个或者多个单词</li></ul><p>如果queue绑定的routing_key只是一个<code>#</code>，这个queue其实可以接收所有的消息<br>如果没有使用任何通配符，效果类似于direct，因为只能和字符匹配<br><strong>生产者代码</strong><br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> pika</span><br><span class="line"><span class="keyword">import</span> random</span><br><span class="line"></span><br><span class="line">queue_name = <span class="string">'hello'</span></span><br><span class="line">exchange_name = <span class="string">'color'</span></span><br><span class="line"></span><br><span class="line">topics = (<span class="string">'phone.*'</span>, <span class="string">'*.red'</span>) <span class="comment"># * 一个单词</span></span><br><span class="line">products = (<span class="string">'phone'</span>, <span class="string">'pc'</span>, <span class="string">'tv'</span>)</span><br><span class="line">colors = (<span class="string">'orange'</span>, <span class="string">'black'</span>, <span class="string">'red'</span>)</span><br><span class="line"></span><br><span class="line">params = pika.URLParameters(<span class="string">'amqp://lqx:lqx@192.168.1.5:5672/test'</span>)</span><br><span class="line"></span><br><span class="line">connection = pika.BlockingConnection(params)</span><br><span class="line">channel = connection.channel()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 交换机，路由器</span></span><br><span class="line">channel.exchange_declare(exchange=exchange_name,</span><br><span class="line">                         exchange_type=<span class="string">'topic'</span>) <span class="comment"># 话题</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">with</span> connection:</span><br><span class="line">    <span class="comment"># 发消息</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">20</span>):</span><br><span class="line">        rk = random.choice(colors)</span><br><span class="line">        msg = <span class="string">'&#123;&#125;: data-&#123;:02&#125;'</span>.format(rk, i)</span><br><span class="line">        channel.basic_publish(exchange=exchange_name, <span class="comment"># 指定交换机</span></span><br><span class="line">                      routing_key=rk,</span><br><span class="line">                      body=msg)</span><br><span class="line">        print(<span class="string">'-'</span> * <span class="number">30</span>)</span><br><span class="line">    print(<span class="string">" [x] Sent 'Hello World!'"</span>)</span><br></pre></td></tr></table></figure></p><p><strong>消费者代码</strong><br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> pika</span><br><span class="line"></span><br><span class="line">queue_name = <span class="string">'hello'</span></span><br><span class="line">exchange_name = <span class="string">'color'</span></span><br><span class="line"></span><br><span class="line">topics = (<span class="string">'phone.*'</span>, <span class="string">'*.red'</span>) <span class="comment"># * 一个单词</span></span><br><span class="line">products = (<span class="string">'phone'</span>, <span class="string">'pc'</span>, <span class="string">'tv'</span>)</span><br><span class="line">colors = (<span class="string">'orange'</span>, <span class="string">'black'</span>, <span class="string">'red'</span>)</span><br><span class="line">params = pika.URLParameters(<span class="string">'amqp://lqx:lqx@192.168.1.5:5672/test'</span>)</span><br><span class="line"></span><br><span class="line">connection = pika.BlockingConnection(params)</span><br><span class="line">channel = connection.channel()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 交换机，路由器</span></span><br><span class="line">channel.exchange_declare(exchange=exchange_name,</span><br><span class="line">                         exchange_type=<span class="string">'topic'</span>) <span class="comment"># 话题</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 队列</span></span><br><span class="line"><span class="comment">#channel.queue_declare(queue=queue_name)</span></span><br><span class="line"><span class="comment">#q = channel.queue_declare(queue='') 不指定名称，queue名称会随机生成 q.method.queue</span></span><br><span class="line">q1 = channel.queue_declare(queue=<span class="string">''</span>, exclusive=<span class="literal">True</span>) <span class="comment">#exclusive 在断开时，会queue删除</span></span><br><span class="line">q2 = channel.queue_declare(queue=<span class="string">''</span>, exclusive=<span class="literal">True</span>) <span class="comment">#exclusive 在断开时，会queue删除</span></span><br><span class="line">q1name = q1.method.queue</span><br><span class="line">q2name = q2.method.queue</span><br><span class="line"></span><br><span class="line">channel.queue_bind(exchange=exchange_name, queue=q1name, routing_key=colors[<span class="number">0</span>]) <span class="comment"># 将队列和某一个交换机关联</span></span><br><span class="line">channel.queue_bind(exchange=exchange_name, queue=q2name, routing_key=colors[<span class="number">1</span>]) <span class="comment"># 将队列和某一个交换机关联</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">callback</span><span class="params">(ch, method, properties, body)</span>:</span></span><br><span class="line">    print(<span class="string">"msg  = &#123;&#125;"</span>.format(body), method)</span><br><span class="line"></span><br><span class="line"><span class="keyword">with</span> connection:</span><br><span class="line">    <span class="comment"># 消费者，每一个消费者使用一个basic_consume</span></span><br><span class="line">    channel.basic_consume(queue=q1name,</span><br><span class="line">                          auto_ack=<span class="literal">True</span>,</span><br><span class="line">                          on_message_callback=callback)</span><br><span class="line"></span><br><span class="line">    channel.basic_consume(queue=q2name,</span><br><span class="line">                          auto_ack=<span class="literal">True</span>,</span><br><span class="line">                          on_message_callback=callback)</span><br><span class="line"></span><br><span class="line">    print(<span class="string">' [*] Waiting for messages. To exit press CTRL+C'</span>)</span><br><span class="line">    channel.start_consuming() <span class="comment"># 启动所有消费，直到道所有消费结束，才能退出，阻塞的</span></span><br></pre></td></tr></table></figure></p><p><img src="https://img-blog.csdnimg.cn/20190730091116532.png" alt="在这里插入图片描述"><br>观察消费者拿到的数据，注意观察 phone.red 的数据出现的次数<br>由此，可以知道 <strong>交换机在路由消息的时候，只要和queue的routing_key匹配，就把消息发给该queue</strong></p><h2 id="RPC-远程过程调用"><a href="#RPC-远程过程调用" class="headerlink" title="RPC 远程过程调用"></a>RPC 远程过程调用</h2><p>RabbitMQ的RPC的应用场景较少，因为有更好的RPC通信框架</p><h1 id="消息队列的作用"><a href="#消息队列的作用" class="headerlink" title="消息队列的作用"></a>消息队列的作用</h1><ol><li>系统间解耦</li><li>解决生产者、消费者速度匹配</li></ol><p>由于稍微上规模的项目都会分层、分模块开发，模块间或系统间尽量不要直接耦合，需要开放公共接口提供给别的模块或系统调用，而调用可能触发并发问题，为了缓冲和解耦，往往采用中间件技术</p><p>RabbitMQ只是消息中间件中的一种应用程序，也是较常用的消息中间件服务</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;RabbitMQ&quot;&gt;&lt;a href=&quot;#RabbitMQ&quot; class=&quot;headerlink&quot; title=&quot;RabbitMQ&quot;&gt;&lt;/a&gt;RabbitMQ&lt;/h1&gt;&lt;p&gt;RabbitMQ 是由 LShift 提供的一个 Advanced Message Queu
      
    
    </summary>
    
      <category term="中间件" scheme="https://hubhack.github.io/categories/%E4%B8%AD%E9%97%B4%E4%BB%B6/"/>
    
    
      <category term="RabbitMQ" scheme="https://hubhack.github.io/tags/RabbitMQ/"/>
    
  </entry>
  
  <entry>
    <title>vmware</title>
    <link href="https://hubhack.github.io/linux/CentOS7%E4%BD%BF%E7%94%A8firewalld%E6%89%93%E5%BC%80%E5%85%B3%E9%97%AD%E9%98%B2%E7%81%AB%E5%A2%99%E4%B8%8E%E7%AB%AF%E5%8F%A3/"/>
    <id>https://hubhack.github.io/linux/CentOS7使用firewalld打开关闭防火墙与端口/</id>
    <published>2019-08-22T03:06:41.083Z</published>
    <updated>2019-08-22T04:33:52.192Z</updated>
    
    <content type="html"><![CDATA[<h1 id="1、firewalld的基本使用"><a href="#1、firewalld的基本使用" class="headerlink" title="1、firewalld的基本使用"></a>1、firewalld的基本使用</h1><p>启动： systemctl start firewalld<br>关闭： systemctl stop firewalld<br>查看状态： systemctl status firewalld<br>开机禁用  ： systemctl disable firewalld<br>开机启用  ： systemctl enable firewalld</p><h1 id="2-systemctl是CentOS7的服务管理工具中主要的工具，它融合之前service和chkconfig的功能于一体。"><a href="#2-systemctl是CentOS7的服务管理工具中主要的工具，它融合之前service和chkconfig的功能于一体。" class="headerlink" title="2.systemctl是CentOS7的服务管理工具中主要的工具，它融合之前service和chkconfig的功能于一体。"></a>2.systemctl是CentOS7的服务管理工具中主要的工具，它融合之前service和chkconfig的功能于一体。</h1><p>启动一个服务：systemctl start firewalld.service<br>关闭一个服务：systemctl stop firewalld.service<br>重启一个服务：systemctl restart firewalld.service<br>显示一个服务的状态：systemctl status firewalld.service<br>在开机时启用一个服务：systemctl enable firewalld.service<br>在开机时禁用一个服务：systemctl disable firewalld.service<br>查看服务是否开机启动：systemctl is-enabled firewalld.service<br>查看已启动的服务列表：systemctl list-unit-files|grep enabled<br>查看启动失败的服务列表：systemctl –failed</p><h1 id="3-配置firewalld-cmd"><a href="#3-配置firewalld-cmd" class="headerlink" title="3.配置firewalld-cmd"></a>3.配置firewalld-cmd</h1><p>查看版本： firewall-cmd –version<br>查看帮助： firewall-cmd –help<br>显示状态： firewall-cmd –state<br>查看所有打开的端口： firewall-cmd –zone=public –list-ports<br>更新防火墙规则： firewall-cmd –reload<br>查看区域信息:  firewall-cmd –get-active-zones<br>查看指定接口所属区域： firewall-cmd –get-zone-of-interface=eth0<br>拒绝所有包：firewall-cmd –panic-on<br>取消拒绝状态： firewall-cmd –panic-off<br>查看是否拒绝： firewall-cmd –query-panic</p><p>那怎么开启一个端口呢<br>添加<br>firewall-cmd –zone=public –add-port=80/tcp –permanent    （–permanent永久生效，没有此参数重启后失效）<br>重新载入<br>firewall-cmd –reload<br>查看<br>firewall-cmd –zone= public –query-port=80/tcp<br>删除<br>firewall-cmd –zone= public –remove-port=80/tcp –permanent</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;1、firewalld的基本使用&quot;&gt;&lt;a href=&quot;#1、firewalld的基本使用&quot; class=&quot;headerlink&quot; title=&quot;1、firewalld的基本使用&quot;&gt;&lt;/a&gt;1、firewalld的基本使用&lt;/h1&gt;&lt;p&gt;启动： systemctl 
      
    
    </summary>
    
      <category term="linux" scheme="https://hubhack.github.io/categories/linux/"/>
    
    
      <category term="linux" scheme="https://hubhack.github.io/tags/linux/"/>
    
  </entry>
  
  <entry>
    <title>vmware</title>
    <link href="https://hubhack.github.io/linux/%E6%96%B0%E6%89%8B%E5%A6%82%E4%BD%95%E5%AE%89%E8%A3%85%E5%8F%8A%E9%85%8D%E7%BD%AEVMware%20Workstation%E8%99%9A%E6%8B%9F%E6%9C%BA%E5%8F%8AXshell%E8%BF%9C%E7%A8%8B%E7%AE%A1%E7%90%86%E8%BD%AF%E4%BB%B6/"/>
    <id>https://hubhack.github.io/linux/新手如何安装及配置VMware Workstation虚拟机及Xshell远程管理软件/</id>
    <published>2019-08-22T03:06:41.075Z</published>
    <updated>2019-08-22T04:33:08.695Z</updated>
    
    <content type="html"><![CDATA[<h1 id="新手如何安装及配置虚拟机及远程管理软件"><a href="#新手如何安装及配置虚拟机及远程管理软件" class="headerlink" title="新手如何安装及配置虚拟机及远程管理软件"></a>新手如何安装及配置虚拟机及远程管理软件</h1><h2 id="ensp-ensp-ensp-ensp-VMware-Workstation-Pro-amp-Xshell"><a href="#ensp-ensp-ensp-ensp-VMware-Workstation-Pro-amp-Xshell" class="headerlink" title="&ensp;&ensp;&ensp;&ensp;VMware Workstation Pro &amp; Xshell"></a>&ensp;&ensp;&ensp;&ensp;<strong>VMware Workstation Pro &amp; Xshell</strong></h2><ol><li>下载并安装<strong>VMware Workstation Pro</strong>及<strong>Xshell</strong>。  </li><li>访问<a href="http://mirrors.163.com/" target="_blank" rel="noopener">mirrors.163.com</a>，下载镜像<strong>centos</strong>。登陆后找到镜像名<strong>centos/</strong>，点击后下载最新版（<a href="http://mirrors.163.com/centos/7/isos/x86_64/" target="_blank" rel="noopener">如7系版本</a>）(CentOS-7-x86_64-Everything-1810.iso) 。</li><li>打开<strong>VMware Workstation Pro</strong>软件，需要输入密钥，可在某度寻找。</li><li>如何新建虚拟机，步骤如下：<blockquote><p>&ensp;&ensp;&ensp;&ensp;点击创建新的虚拟机，选择‘ 典型 ’；<br>&ensp;&ensp;&ensp;&ensp;安装来源选择‘ 稍后安装操作系统 ’；<br>&ensp;&ensp;&ensp;&ensp;客户机操作系统选择<strong>Linux</strong>，版本选择<strong>CentOS 7 64位</strong>；<br>&ensp;&ensp;&ensp;&ensp;保存位置建议为<strong>固态硬盘</strong>；<br>&ensp;&ensp;&ensp;&ensp;磁盘大小设置为200G，选择“将虚拟磁盘储存为单个文件”，完成。</p></blockquote></li><li>双击<strong>设备</strong>下任意处，1弹出的对话窗口中设置如下：<blockquote><p>&ensp;&ensp;&ensp;&ensp;内存设置为2048MB；<br>&ensp;&ensp;&ensp;&ensp;处理器数量为2；<br>&ensp;&ensp;&ensp;&ensp;CD/DVD(IDE) 连接方式为<strong>使用ISO映像文件</strong>，选择刚才下载的镜像文件装入即可；<br>&ensp;&ensp;&ensp;&ensp;网络适配器设置为仅主机模式。</p></blockquote></li><li><p>单机菜单栏<strong>绿色三角形</strong>，启动虚拟机(Ctrl+Alt+enter为切换窗口大小)  </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">注：第一选项为安装，第二项为测试media并安装，第三项为修复(默认选择第二项)。</span><br></pre></td></tr></table></figure></li><li><p>测试完毕后，选择如下</p><blockquote><p>&ensp;&ensp;&ensp;&ensp;语言选择默认<strong>English</strong>，点击右下角<strong>Continue</strong>；<br>&ensp;&ensp;&ensp;&ensp;<strong>DATE&amp;TIME</strong> 设置为上海（可直接在地图上选择位置），左下角时间修改为当前北京时间；<br>&ensp;&ensp;&ensp;&ensp;<strong>KEYBOARD</strong> 键盘默认为美国键盘，无需修改；<br>&ensp;&ensp;&ensp;&ensp;<strong>INSTALLATION SOURCE</strong> 默认为光盘安装，无需修改；<br>&ensp;&ensp;&ensp;&ensp;<strong>SOFTWARE SELECTION</strong>，选择如何安装，装什么软件。工作中默认为最小安装，初学者选择<strong>GNOME Desktop</strong>(图形界面)；<br>&ensp;&ensp;&ensp;&ensp;<strong>INSTALLATION DESTINATION</strong>安装目标即为分区，点击选择<strong>I will configure partitioning</strong>（我将自己安装分区)，点击<strong>Done</strong>；<br>&ensp;&ensp;&ensp;&ensp; 弹出的界面默认为<strong>LVM</strong>逻辑卷，更改为<strong>Standard Partition</strong>标准分区，点击添加“+”。</p></blockquote></li></ol><ul><li>选择<strong>Mount Point</strong>挂载点为 <strong>/boot</strong>，大小为1G；  </li><li>添加根 ‘<strong>/</strong>‘，大小为100G；  </li><li>添加‘<strong>/data</strong>’，因为data不属于操作系统自带的文件夹，所以需要手写添加。创建data的目的是为了后续方便存放临时文件，大小为50G；  </li><li>添加 <strong>/swap</strong>，大小为4G，物理内存的两倍大小。<strong>注</strong>：swap的<strong>Mount Point</strong>挂载点为灰色，因为swap是模拟内存用的，不为文件夹，此<strong>File System</strong>文件系统为专有的swap。<blockquote><p>&ensp;&ensp;&ensp;&ensp;点击<strong>Done</strong>，选择<strong>Accept changes</strong>接受上列的更改。<br>&ensp;&ensp;&ensp;&ensp;<strong>NETWORK &amp; HOST NAME</strong>网络，设置<strong>Host name</strong>主机名，<strong>Ethernet(ens33)</strong>网卡如果为<strong>Dissonnected</strong>，需要点击右边按钮打开网卡。显示后的IP地址可以从<strong>windows</strong>中ping通（从windows中打开cmd,输入ping <em>(</em>为IP地址)，出现来自 <strong> 的回复 </strong>，即为连通。<br>&ensp;&ensp;&ensp;&ensp;点击 <strong>Begin installation</strong>，弹出的选项中需要设置 <strong>ROOT PASSWORD</strong>系统管理员账户，设置 <strong>USER CREATION</strong>普通用户。安装完毕后，设置 <strong>LICENSING</strong>许可，点击 <strong>I accept the license agreement</strong>。安装完毕。</p></blockquote></li></ul><ol start="8"><li>备份系统，两种方法</li></ol><ul><li>右击当前窗口任务栏，选择快照，拍摄快照。备份完成。</li><li>右击当前窗口任务栏，选择设置，点击选项，将右侧的工作目录文件夹直接复制一份至其他磁盘（复制前如文件中有临时文件，需先关闭当前虚拟机任务）。备份完成。  </li></ul><ol start="9"><li>重启虚拟机。点击打开虚拟机，找到刚才存放VMX的文件夹，点击任务栏的<strong>绿色小三角</strong> ，登陆后设置初始化。设置语言、键盘、定位（建议关闭）、在线用户（没有可忽略）。  </li><li>如何打开<strong>Terminal</strong>敲命令，执行操作的窗口，简称终端。点击<strong>Applications–System Tools–Terminal</strong>，完成。</li></ol><ul><li>注：<code>[wang@centos7 -]$</code>，<strong>wang</strong>指用户名，<strong>centos7</strong>指主机最前部分名称，  - 指存放的文件夹位置，但是<strong>CentOS</strong>系统默认显示的‘ - ’为<strong>wang@centos7</strong>的<strong>home</strong>目录。只要为home，都会以‘ - ’显示，提示符‘$’为普通用户。</li></ul><ol start="11"><li>查看当前网卡是否连接通，输入 <code>ip a</code>回车,如果ens33未显示IP地址，则未通。</li><li><p>输入 <code>nmcli connection up ens33</code> , 即可在ens33下查看到IP地址。</p></li><li><p>打开<strong>Xshell</strong>，点击左上角的+，输入名称（可直接设置为IP地址，方便查看），主机IP地址（刚才查询到的IP地址）</p></li><li>点击<strong>用户身份验证</strong>，用户名为“<strong>root</strong>“，密码为之前<strong>CentOS</strong>设置的密码，点击确定，点击链接，选择<strong>接受并保存</strong>。</li><li><strong>root</strong>链接的提示符‘#’为管理员意思。</li></ol><h2 id="ensp-ensp-ensp-ensp-以上为安装及配置虚拟机及远程管理软件详细过程，仅供参考；如有错误之处，欢迎批评指正，谢谢！"><a href="#ensp-ensp-ensp-ensp-以上为安装及配置虚拟机及远程管理软件详细过程，仅供参考；如有错误之处，欢迎批评指正，谢谢！" class="headerlink" title="&ensp;&ensp;&ensp;&ensp;以上为安装及配置虚拟机及远程管理软件详细过程，仅供参考；如有错误之处，欢迎批评指正，谢谢！"></a>&ensp;&ensp;&ensp;&ensp;以上为安装及配置虚拟机及远程管理软件详细过程，仅供参考；如有错误之处，欢迎批评指正，谢谢！</h2>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;新手如何安装及配置虚拟机及远程管理软件&quot;&gt;&lt;a href=&quot;#新手如何安装及配置虚拟机及远程管理软件&quot; class=&quot;headerlink&quot; title=&quot;新手如何安装及配置虚拟机及远程管理软件&quot;&gt;&lt;/a&gt;新手如何安装及配置虚拟机及远程管理软件&lt;/h1&gt;&lt;h2 i
      
    
    </summary>
    
      <category term="linux" scheme="https://hubhack.github.io/categories/linux/"/>
    
    
      <category term="linux" scheme="https://hubhack.github.io/tags/linux/"/>
    
  </entry>
  
  <entry>
    <title>python面试题</title>
    <link href="https://hubhack.github.io/python/python%E9%9D%A2%E8%AF%95%E9%A2%98/"/>
    <id>https://hubhack.github.io/python/python面试题/</id>
    <published>2019-08-22T01:21:59.718Z</published>
    <updated>2019-08-22T01:21:59.720Z</updated>
    
    <content type="html"><![CDATA[<p>重点知识</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;重点知识&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br
      
    
    </summary>
    
      <category term="python" scheme="https://hubhack.github.io/categories/python/"/>
    
    
      <category term="python" scheme="https://hubhack.github.io/tags/python/"/>
    
  </entry>
  
  <entry>
    <title>flask</title>
    <link href="https://hubhack.github.io/%E5%90%8E%E7%AB%AF%E6%A1%86%E6%9E%B6/flask%E7%AC%94%E8%AE%B0/"/>
    <id>https://hubhack.github.io/后端框架/flask笔记/</id>
    <published>2019-08-21T02:50:07.733Z</published>
    <updated>2019-08-22T09:10:07.827Z</updated>
    
    <content type="html"><![CDATA[<p>下载示例代码, 安装到当前目录的flasky文件夹下.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git clone https://github.com/miguelgrinberg/flasky.git</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">git checkout 1a</span><br><span class="line">git reset --hard</span><br><span class="line">git fetch --all</span><br><span class="line">git fetch --tags</span><br><span class="line">git reset --hard orign/master</span><br><span class="line">git diff 2a 2b</span><br></pre></td></tr></table></figure><h3 id="flask"><a href="#flask" class="headerlink" title="flask"></a>flask</h3><p>在大多数标准中, flask都算小型框架, 小到可以称为”微框架”.它具有一个包含接班服务的强健核心, 其他功能则可通过扩展实现.</p><p>flask有3个主要依赖: 路由,调试, web服务网关接口(wsgi)子系统由werkzeug提供, 模板系统由jinja2提供, 命令行集成有click提供.</p><p>创建应用目录</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git clone https://github.com/miguelgrinberg/flasky.git</span><br><span class="line">cd flasky</span><br></pre></td></tr></table></figure><p>初始化</p><p>所有的Flask应用都必须创建一个应用实例.web服务器使用一种名为web服务器网关接口(wsgi)的协议.把接收自客户端的所有请求都转交给这个对象处理.应用实例是Flask类的对象.通常有下列代码创建.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">from flask import Flask</span><br><span class="line">app = Flask(__name__)</span><br></pre></td></tr></table></figure><hr><p>在flask中有两种上下文: 应用上下文和请求上下文.</p><p>钩子函数:有时在处理请求之前或之后执行代码会很有用.</p><p>before_request</p><p>注册一个函数, 在每次请求之前运行</p><p>before_first_request</p><p>注册一个函数, 只在处理第一个请求之前运行,可以通过这个钩子函数添加服务器初始化任务.</p><p>after_request注册一个函数, 如果没有未处理的异常抛出, 在每次请求之后运行.</p><p>teardown_request</p><p>注册一个函数, 即使有未处理的异常抛出, 也在每次请求之后运行.</p><p>在请求钩子函数和视图函数之间共享数据一般使用上下文全局变量g, </p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;下载示例代码, 安装到当前目录的flasky文件夹下.&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;
      
    
    </summary>
    
      <category term="后端框架" scheme="https://hubhack.github.io/categories/%E5%90%8E%E7%AB%AF%E6%A1%86%E6%9E%B6/"/>
    
      <category term="flask" scheme="https://hubhack.github.io/categories/%E5%90%8E%E7%AB%AF%E6%A1%86%E6%9E%B6/flask/"/>
    
    
      <category term="python" scheme="https://hubhack.github.io/tags/python/"/>
    
  </entry>
  
  <entry>
    <title>ansible</title>
    <link href="https://hubhack.github.io/linux/andible/"/>
    <id>https://hubhack.github.io/linux/andible/</id>
    <published>2019-08-19T07:41:55.554Z</published>
    <updated>2019-08-22T03:54:19.923Z</updated>
    
    <content type="html"><![CDATA[<p>ansible简介<br>安装ansible<br>yun install -y ansible</p><h2 id="todo"><a href="#todo" class="headerlink" title="todo"></a>todo</h2><p>ansible 文档<a href="https://docs.ansible.com/ansible/latest/user_guide/intro_getting_started.html#foreword" target="_blank" rel="noopener">https://docs.ansible.com/ansible/latest/user_guide/intro_getting_started.html#foreword</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;ansible简介&lt;br&gt;安装ansible&lt;br&gt;yun install -y ansible&lt;/p&gt;
&lt;h2 id=&quot;todo&quot;&gt;&lt;a href=&quot;#todo&quot; class=&quot;headerlink&quot; title=&quot;todo&quot;&gt;&lt;/a&gt;todo&lt;/h2&gt;&lt;p&gt;ansibl
      
    
    </summary>
    
      <category term="linux" scheme="https://hubhack.github.io/categories/linux/"/>
    
    
      <category term="运维" scheme="https://hubhack.github.io/tags/%E8%BF%90%E7%BB%B4/"/>
    
  </entry>
  
  <entry>
    <title>数据分析</title>
    <link href="https://hubhack.github.io/%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%90/Pandas%E8%AF%A6%E8%A7%A3/"/>
    <id>https://hubhack.github.io/数据分析/Pandas详解/</id>
    <published>2019-08-04T02:38:10.309Z</published>
    <updated>2019-08-19T03:15:02.408Z</updated>
    
    <content type="html"><![CDATA[<p>Pandas:最流行的Python数据分析库</p><p>基于Numpy, 专用于数据预处理和数据分析的Python第三方库, 最适合处理大型结构化表格数据.</p><p>Pandas两大数据类型</p><ul><li>Series: 一维</li><li>DataFrame: 二维</li></ul><p>Series数据类型</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">a = pd.Series([3, 4, 5, 6, 7])</span><br><span class="line">a</span><br></pre></td></tr></table></figure><p>DataFrame数据类型</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">b = pd.DataFrame([3, 4, 5], [6, ,7, 8], [9, 10, 11])</span><br><span class="line">b</span><br></pre></td></tr></table></figure><p>抽象和维度</p><p>维度: 观察事物的角度</p><p>日常保存数据的数据格式:</p><ul><li>0维: 字符串, 单值变量</li><li>1维: 列表, 字典(1成括号)</li><li>2维: Excel表格, Mysql数据库</li><li>3维或以上: JSON, MongoDB, HTML</li></ul><p>Pandas各个数据类型的关系：</p><blockquote><p>0维单值变量 -&gt; 1维Series -&gt; 2维DataFrame -&gt; 3维层次化DataFrame</p></blockquote><h3 id="Series"><a href="#Series" class="headerlink" title="Series"></a>Series</h3><p>列表创建Series</p><blockquote><p> a = pd.Series([2, 3, 5])</p></blockquote><p>字典创建Series</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"># 索引就是字典字典的键</span><br><span class="line">d = pd.Series(&#123;&apos;name&apos;: &apos;张三&apos;, &apos;age&apos;: 18, &apos;gander&apos;:True&#125;)</span><br><span class="line">d</span><br></pre></td></tr></table></figure><p>其他方式</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"># 标量创建</span><br><span class="line">pd.Series(5)</span><br><span class="line">pd.Series(5, index=[1,2, 3, 4, 5])</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Numpy的序列函数创建</span></span><br><span class="line"></span><br><span class="line">np.arange(<span class="number">5</span>)</span><br><span class="line">np.arange(<span class="number">2</span>, <span class="number">5</span>)</span><br><span class="line">np.arange(<span class="number">9</span>, <span class="number">5</span>, <span class="number">-1</span>)</span><br></pre></td></tr></table></figure><p>查询</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">class1 = pd.Series([95, 25, 59, 61], index=[&apos;ming&apos;, &apos;hua&apos;, &apos;hong&apos;,&apos;huang&apos;, &apos;bai&apos;])</span><br></pre></td></tr></table></figure><p>查询数据形状</p><p>1维数据的形状就是它的值个数</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">class1.shape, class1.shape[0]</span><br></pre></td></tr></table></figure><p>查询值(values) 和索引(index)</p><p>一个Series数据是由2个ndarray数组组成的</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"># 查询值</span><br><span class="line">class1.values</span><br></pre></td></tr></table></figure><p>查询值</p><p>根据索引查询值</p><ul><li>索引查询</li><li>切片插叙</li></ul><p>根据条件反查索引</p><ul><li>布尔查询</li></ul><p>索引查询</p><p>索引和切片都是根据索引查询值</p><p>class1</p><p>查询单值</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"># Series有两套索引：默认索引，自定义索引</span><br><span class="line">class1[&apos;hong&apos;]  # 自定义索引</span><br><span class="line">class1[2]  # 默认索引</span><br></pre></td></tr></table></figure><p>查询多值</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">class1[[&apos;hua&apos;, &apos;bai&apos;]]</span><br><span class="line">class1[[1, 4]]</span><br></pre></td></tr></table></figure><p>切片查询</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"># 默认索引：包含起始值，不包含结束值</span><br><span class="line">class1[:3]  </span><br><span class="line">class1[2:]</span><br><span class="line">class1[1:4]</span><br></pre></td></tr></table></figure><p>布尔查询</p><p>根据值反查索引</p><p>根据条件反查索引</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 布尔查询</span></span><br><span class="line">class1[[<span class="literal">False</span>, <span class="literal">True</span>, <span class="literal">True</span>, <span class="literal">False</span>, <span class="literal">False</span>]]</span><br></pre></td></tr></table></figure><h3 id="向量化运算"><a href="#向量化运算" class="headerlink" title="向量化运算"></a>向量化运算</h3><p>矢量运算, 并行运算</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">a = pd.Series(x)</span><br><span class="line">a</span><br><span class="line">a + <span class="number">5</span> <span class="comment"># 向量化运算, 不需要遍历, 速度快效率高</span></span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Pandas向量化方式</span></span><br><span class="line">a.sum()  <span class="comment"># Pandas方法</span></span><br><span class="line">np.sum(class1)  <span class="comment"># Numpy方法</span></span><br></pre></td></tr></table></figure><h3 id="类Numpy数组操作-和类Python字典的操作"><a href="#类Numpy数组操作-和类Python字典的操作" class="headerlink" title="类Numpy数组操作, 和类Python字典的操作"></a>类Numpy数组操作, 和类Python字典的操作</h3><ul><li>Pandas数据可以执行全部Numpy数据操作(因为Pandas底层基于Numpy, 所以通用)</li><li>也可以执行部分Python原生列表或字典操作(仅限于Pandas实现的操作)</li></ul><p>类Numpy数组操作</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">np.mean(class1) # Numpy方法</span><br></pre></td></tr></table></figure><p>类Python字典操作</p><ul><li>in关键字: 判断某索引是否存在</li><li>get方法:判断某索引是否存在, 存在则直接输出值, 不存在则输出定义值</li></ul><h3 id="DataFrame对象-创建"><a href="#DataFrame对象-创建" class="headerlink" title="DataFrame对象 - 创建"></a>DataFrame对象 - 创建</h3><p>DataFrame对象是Pandas最常用的数据类型</p><p>DataFrame对象是由多个Series增加一个索引后组成一种表格类型数据结构</p><p>DataFrame对象既有行索引, 又有列索引</p><ul><li>行索引,表明不同行, 横向索引, 叫index, 0轴, axis=0</li><li>列索引, 表名不同列, 纵向索引, 叫colums, 1轴, axis=1</li></ul><hr><p>列表创建</p><ul><li><p>ndarry数组创建</p></li><li><p>字典内嵌套列表：要求内部列表等长</p></li><li>字典内嵌套字典：内部字典不需要等长<ul><li>字典内嵌套Series：等同嵌套字典</li></ul></li></ul><p>列表创建</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"># 默认索引</span><br><span class="line">pd.DataFrame([[1,2,3],[4,5,6],[7,8,9]])</span><br></pre></td></tr></table></figure><p>使用Numpy数组创建</p><p>Numpy数组类似一个高级版的Python列表</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">np.arange(10)</span><br><span class="line"></span><br><span class="line">np.arange(10).reshape(2, 5)</span><br></pre></td></tr></table></figure><p>字典创建</p><p>字典内嵌套列表</p><p>列表值需要等长, 否则报错</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">pd.DataFrame(</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="string">'姓名'</span>: [<span class="string">'张三'</span>, <span class="string">'李四'</span>, <span class="string">'王五'</span>],</span><br><span class="line">        <span class="string">'年龄'</span>: [<span class="number">18</span>, <span class="number">28</span>, <span class="number">38</span>],</span><br><span class="line">        <span class="string">'性别'</span>: [<span class="literal">True</span>, <span class="literal">True</span>, <span class="literal">False</span>],</span><br><span class="line">        <span class="string">'分数'</span>: [<span class="number">85.5</span>, <span class="number">59</span>, <span class="number">78</span>],</span><br><span class="line">    &#125;</span><br><span class="line">)</span><br></pre></td></tr></table></figure><h3 id="字典嵌套字典"><a href="#字典嵌套字典" class="headerlink" title="字典嵌套字典"></a>字典嵌套字典</h3><p>字典不要求等长</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">pd.DataFrame(</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="string">'name'</span>: &#123;<span class="number">1</span>: <span class="string">'张三'</span>, <span class="number">2</span>: <span class="string">'李四'</span>, <span class="number">3</span>: <span class="string">'王五'</span>&#125;,</span><br><span class="line">        <span class="string">'age'</span>: &#123;<span class="number">1</span>: <span class="number">18</span>, <span class="number">2</span>: <span class="number">28</span>, <span class="number">3</span>: <span class="number">38</span>&#125;,</span><br><span class="line">        <span class="string">'gender'</span>: &#123;<span class="number">1</span>: <span class="literal">True</span>, <span class="number">2</span>: <span class="literal">True</span>, <span class="number">3</span>: <span class="literal">False</span>&#125;,</span><br><span class="line">        <span class="string">'grade'</span>: &#123;<span class="number">1</span>: <span class="number">85.5</span>, <span class="number">3</span>: <span class="number">78</span>&#125;,  <span class="comment"># 不等长也不报错</span></span><br><span class="line">    &#125;,</span><br><span class="line">)</span><br></pre></td></tr></table></figure><p>DataFrame整体查询</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">a.shape  # 表格形状，行数 列数</span><br><span class="line">a.dtypes  # 列数据类型</span><br><span class="line"></span><br><span class="line">a.index  # 行索引</span><br><span class="line">a.columns  # 列索引</span><br><span class="line">a.values  # 对象值，二维ndarray数组</span><br></pre></td></tr></table></figure><p>整体数据情况</p><ul><li>a.info()整体信息, 查看:数据是否异常<ul><li>有没有缺失值</li><li>列数据类型是否正确</li></ul></li><li>a.describe()整体统计指标</li><li>a.head() 前5行</li><li>a.tail() 后5行</li></ul><p>内容查询</p><p>类列表/字典/ndarray数组的查询方式</p><p>功能简陋, 一般仅用于查询单列</p><p><strong>Pandas专用查询方式</strong>：经过优化，推荐</p><p>三种查询方式：</p><ul><li>索引</li><li>切片</li><li>过滤</li></ul><p><strong>索引和切片查询，两种查询方式：</strong></p><ul><li>a.loc[行,列]，标签索引，自定义索引</li><li>a.iloc[行,列]，位置索引，默认索引</li></ul><p>参数书写顺序都是都是先行后列</p><h2 id="索引查询"><a href="#索引查询" class="headerlink" title="索引查询"></a>索引查询</h2><p>用于不连续(行列有间隔)行列区块查询</p><p>查询单行</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 自定义索引查询</span></span><br><span class="line">a.loc[<span class="number">3</span>]  <span class="comment"># 简写</span></span><br><span class="line">a.loc[<span class="number">3</span>, :]  <span class="comment"># 完整写法</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 默认索引</span></span><br><span class="line">a.iloc[<span class="number">2</span>]</span><br><span class="line">a.iloc[<span class="number">2</span>, :]</span><br></pre></td></tr></table></figure><p>查询多行</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">a.loc[[<span class="number">2</span>, <span class="number">4</span>]]  <span class="comment"># 选中所有列，省略了列条件</span></span><br><span class="line">a.loc[[<span class="number">2</span>, <span class="number">4</span>], :]  <span class="comment"># 完整写法</span></span><br><span class="line"></span><br><span class="line">a.iloc[[<span class="number">1</span>, <span class="number">3</span>]]</span><br></pre></td></tr></table></figure><h2 id="索引查询和切片查询的区别"><a href="#索引查询和切片查询的区别" class="headerlink" title="索引查询和切片查询的区别"></a>索引查询和切片查询的区别</h2><ul><li>索引查询更适合查询不连续的行列数据</li><li>切片查询适合查询连续行和列数据</li></ul><p>索引查询可以实现切片查询的所有功能，只是有个书写效率问题</p><ul><li>用索引查询查连续数据，需要将每个索引都写上，效率低</li><li>切片查询连续数据，只要写起始和结束索引即可。<ul><li>切片不能查询不连续数据</li></ul></li></ul><blockquote><p>查询时：优先使用切片查询，无法实现功能时再使用索引查询</p></blockquote><h3 id="专用查询：过滤查询"><a href="#专用查询：过滤查询" class="headerlink" title="专用查询：过滤查询"></a>专用查询：过滤查询</h3><p>索引查询和切片查询, 都是通过索引查询值</p><p>过滤查询(布尔查询) : 通过值查询索引</p><ul><li>过滤查询不通过索引, 而是通过值查询</li><li>用于结果索引不确定的查询</li><li>通过运算所得布尔值对查询结果进行过滤</li></ul><p>类list/字典查询方式</p><p>专用查询方式的布尔查询</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 布尔查询</span></span><br><span class="line">a.loc[[<span class="literal">False</span>, <span class="literal">True</span>, <span class="literal">False</span>, <span class="literal">True</span>, <span class="literal">False</span>], [<span class="literal">True</span>, <span class="literal">True</span>, <span class="literal">False</span>, <span class="literal">False</span>, <span class="literal">False</span>, <span class="literal">True</span>, <span class="literal">False</span>]]</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 查询不及格同学的姓名、年龄和成绩</span></span><br><span class="line">a.loc[a[<span class="string">'grade'</span>] &lt; <span class="number">60</span>, [<span class="string">'name'</span>, <span class="string">'age'</span>, <span class="string">'grade'</span>]]</span><br></pre></td></tr></table></figure><h3 id="where过滤（了解）"><a href="#where过滤（了解）" class="headerlink" title="where过滤（了解）"></a>where过滤（了解）</h3><p>另一种简洁的布尔查询写法</p><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><ul><li>原生的布尔查询，需要每列单独判断条件，然后用逻辑运算符组合条件，得出最终结果</li><li>where过滤过滤：先将所有需要判断条件的列抽出来，整体判断，得出最终结果<ul><li>优点：写法简洁</li><li>缺点：where过滤所有列的判断条件，只能有一个，使用受限</li></ul></li></ul><ul><li>视图模式<ul><li>将一个对象整体赋值给另一个变量</li><li>修改一个变量，另一个变量值也会变</li><li>多个变量数据指向同一内存数据</li></ul></li><li><p>副本模式</p><ul><li>将一个对象查询的一部分值赋值给另一个变量</li><li>修改一个变量，另一个变量值不会变</li></ul></li><li><p>当将一个对象整体赋值给另一个变量时，<strong>视图模式</strong>，两个变量对应的内存地址相同，修改一个变量，另一个变量也会改变。</p></li><li>当使用copy()将一个对象赋值给另一个变量时<ul><li>或者使用查询赋值，查询数据的一部分并赋值给其他变量</li><li>当赋值为原数据查询的一部分时，是<strong>副本模式</strong>，修改一个变量不会影响另一个变量</li></ul></li></ul><h3 id="变量查询一部分数据"><a href="#变量查询一部分数据" class="headerlink" title="变量查询一部分数据"></a>变量查询一部分数据</h3><p>理论上是副本模式，但实际上，直接修改赋值变量时会报警告（能修改成功）</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">a[[<span class="string">'name'</span>, <span class="string">'sex'</span>, <span class="string">'address'</span>]]</span><br></pre></td></tr></table></figure><p>数据操作</p><ul><li>创建：C,Create</li><li>查询：R,Read</li><li>增加：I,Insert</li><li>修改：U,Update</li><li>删除：D,Delete</li></ul><p>pandas数据操作: 其他操作</p><p>pandas对象的命名: name</p><p>pandas对象的遍历</p><p>Pandas对象的命名:name</p><p>Series和Dataframe对象本身, 索引都可以命名</p><p>数据的输入和输出是Pandas的基础操作</p><p>Pandas可以存取多种介质类型数据：常见的有：</p><ul><li>文本类数据<ul><li>csv</li><li>JSON</li></ul></li><li>二进制磁盘数据<ul><li>Excel</li><li>pkl</li><li>HDF5</li></ul></li><li>数据库<ul><li>SQL（略）</li></ul></li><li>Web API数据<ul><li>HTML</li></ul></li><li>其他<ul><li>内存</li></ul></li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">文本类数据文件读入Pandas时会自动推断每列数据类型（类型推断）和数据编码并转化。</span><br><span class="line">二进制类数据文件没有编码问题，且部分文件会在格式中存储数据类型不需转化</span><br><span class="line"></span><br><span class="line">对Pandas不能直接支持或不方便使用的数据格式，</span><br><span class="line">可以使用支持软件将其转为csv或xlsx格式后使用Pandas读写，如SPSS文件</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Pandas:最流行的Python数据分析库&lt;/p&gt;
&lt;p&gt;基于Numpy, 专用于数据预处理和数据分析的Python第三方库, 最适合处理大型结构化表格数据.&lt;/p&gt;
&lt;p&gt;Pandas两大数据类型&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Series: 一维&lt;/li&gt;
&lt;li&gt;Dat
      
    
    </summary>
    
      <category term="数据分析" scheme="https://hubhack.github.io/categories/%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%90/"/>
    
    
      <category term="数据分析" scheme="https://hubhack.github.io/tags/%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%90/"/>
    
  </entry>
  
  <entry>
    <title>单元测试</title>
    <link href="https://hubhack.github.io/python/PyUnit%E5%8D%95%E5%85%83%E6%B5%8B%E8%AF%95/"/>
    <id>https://hubhack.github.io/python/PyUnit单元测试/</id>
    <published>2019-08-04T02:29:55.553Z</published>
    <updated>2019-08-22T02:54:50.526Z</updated>
    
    <content type="html"><![CDATA[<p>Pyunit(unittest) 是python 自带的单元测试框架, 用于编写和运行可重复的测试.pyunit是xunit体系的一个成员, xunit是众多测试框架的总称,pyunit主要用于进行白盒测试和回归测试.</p><p>通过Pyunit可以让测试具有持久性, 测试与开发同步进行, 测试代码与开发代码一同发布.使用PyUnit具有如下好处:</p><p>可以是测试代码与产品代码分离.</p><p>针对某一个类的测试代码只需进行较少的改动, 便可以应用于另一个类的测试.</p><p>PyUnit开放源代码, 可以进行二次开发, 方便对Pyunit的扩展.</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Pyunit(unittest) 是python 自带的单元测试框架, 用于编写和运行可重复的测试.pyunit是xunit体系的一个成员, xunit是众多测试框架的总称,pyunit主要用于进行白盒测试和回归测试.&lt;/p&gt;
&lt;p&gt;通过Pyunit可以让测试具有持久性, 
      
    
    </summary>
    
      <category term="python" scheme="https://hubhack.github.io/categories/python/"/>
    
    
      <category term="python" scheme="https://hubhack.github.io/tags/python/"/>
    
  </entry>
  
  <entry>
    <title>理解restful</title>
    <link href="https://hubhack.github.io/web/%E7%90%86%E8%A7%A3restful/"/>
    <id>https://hubhack.github.io/web/理解restful/</id>
    <published>2019-07-25T03:08:06.618Z</published>
    <updated>2019-08-22T03:56:41.475Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Restful-API"><a href="#Restful-API" class="headerlink" title="Restful API"></a>Restful API</h3><p>越来越多的人开始意识到, 网站即软件, 而且是一种新型的软件.</p><p>这种”互联网软件”采用客户端/服务器模式, 建立在分布式体系上, 通过互联网通信, 具有高延时(high latency) , 高并发等特点.</p><p>网站开发, 完全可以采用软件开发的模式, 但是传统上, 软件和网络是两个不同的领域, 很少有交集. 软件开发主要针对单机环境, 网络则主要研究系统之间的通信.</p><p>RESTful架构，就是目前最流行的一种互联网软件架构。它结构清晰、符合标准、易于理解、扩展方便，所以正得到越来越多网站的采用。</p><p>但是，到底什么是RESTful架构，并不是一个容易说清楚的问题。下面，我就谈谈我理解的RESTful架构。</p><h3 id="resources"><a href="#resources" class="headerlink" title="resources"></a>resources</h3><p>rest的名称”表现层状态转化” 中, 省略了主语, “ 表现层” 其实指的是”资源”(resource) 的”表现层”.</p><p><strong>所谓”资源”，就是网络上的一个实体，或者说是网络上的一个具体信息。</strong>它可以是一段文本、一张图片、一首歌曲、一种服务，总之就是一个具体的实在。你可以用一个URI（统一资源定位符）指向它，每种资源对应一个特定的URI。要获取这个资源，访问它的URI就可以，因此URI就成了每一个资源的地址或独一无二的识别符。</p><p>所谓”上网”，就是与互联网上一系列的”资源”互动，调用它的URI。</p><h3 id="表现层-representation"><a href="#表现层-representation" class="headerlink" title="表现层(representation)"></a>表现层(representation)</h3><p>“资源”是一种信息实体, 他可以有多种外在表现形式. 我们把”资源” 具体呈现出来的形式. 叫做它的”表现层”(representation).</p><p>比如, 文本可以用txt格式表现, 也可以用html格式, xml格式,JSON格式表现，甚至可以采用二进制格式；图片可以用JPG格式表现，也可以用PNG格式表现。</p><p>URI只代表资源的实体，不代表它的形式。严格地说，有些网址最后的”.html”后缀名是不必要的，因为这个后缀名表示格式，属于”表现层”范畴，而URI应该只代表”资源”的位置。它的具体表现形式，应该在HTTP请求的头信息中用Accept和Content-Type字段指定，这两个字段才是对”表现层”的描述。</p><p>访问一个网站，就代表了客户端和服务器的一个互动过程。在这个过程中，势必涉及到数据和状态的变化。</p><p>互联网通信协议HTTP协议，是一个无状态协议。这意味着，所有的状态都保存在服务器端。因此，<strong>如果客户端想要操作服务器，必须通过某种手段，让服务器端发生”状态转化”（State Transfer）。而这种转化是建立在表现层之上的，所以就是”表现层状态转化”。</strong></p><p>客户端用到的手段，只能是HTTP协议。具体来说，就是HTTP协议里面，四个表示操作方式的动词：GET、POST、PUT、DELETE。它们分别对应四种基本操作：<strong>GET用来获取资源，POST用来新建资源（也可以用于更新资源），PUT用来更新资源，DELETE用来删除资源。</strong></p><p>注意:资源不能是动词.</p><p>在RESTful架构中, 每个网址代表一种资源(resource), 所以网址中不能有动词, 只能有名词, 而且所用的名词往往与数据库的表格名对应.一般来说, 数据库中的表都是同种记录的”集合”, 所以api中的名词也应该使用复数.</p><h3 id="http方法"><a href="#http方法" class="headerlink" title="http方法"></a>http方法</h3><p>对于资源的具体操作类型, 由http动词表示.</p><p>常用的http动词有下面五个, (括号里对应的sql命令).</p><ul><li>GET（SELECT）：从服务器取出资源（一项或多项）。</li><li>POST（CREATE）：在服务器新建一个资源。</li><li>PUT（UPDATE）：在服务器更新资源（客户端提供改变后的完整资源）。</li><li>PATCH（UPDATE）：在服务器更新资源（客户端提供改变的属性）。</li><li>DELETE（DELETE）：从服务器删除资源。</li></ul><p>还有两个不常用的http动词.</p><p>HEAD:获取资源的元数据.</p><p>OPTIONS:获取信息, 关于资源的那些属性是客户端可以改变的.</p><p>下面是一些例子:</p><ul><li>GET /zoos：列出所有动物园</li><li>POST /zoos：新建一个动物园</li><li>GET /zoos/ID：获取某个指定动物园的信息</li><li>PUT /zoos/ID：更新某个指定动物园的信息（提供该动物园的全部信息）</li><li>PATCH /zoos/ID：更新某个指定动物园的信息（提供该动物园的部分信息）</li><li>DELETE /zoos/ID：删除某个动物园</li><li>GET /zoos/ID/animals：列出某个指定动物园的所有动物</li><li>DELETE /zoos/ID/animals/ID：删除某个指定动物园的指定动物</li></ul><p>过滤信息(filtering)</p><p>如果记录信息很多, 服务器不可能都将他们返回给用户, API应该提供参数, 过滤返回结果.</p><p>下面是一些常见的参数.</p><ul><li>?limit=10：指定返回记录的数量</li><li>?offset=10：指定返回记录的开始位置。</li><li>?page=2&amp;per_page=100：指定第几页，以及每页的记录数。</li><li>?sortby=name&amp;order=asc：指定返回结果按照哪个属性排序，以及排序顺序。</li><li>?animal_type_id=1：指定筛选条件</li></ul><p>参数的设计允许存在冗余, 即允许api路径和url参数偶尔有重复.比如，GET /zoo/ID/animals 与 GET /animals?zoo_id=ID 的含义是相同的。</p><p>api的身份认证应该使用oauth 2.0框架.</p><p>服务器返回的数据格式, 应该尽量使用json, 避免使用xml.</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;Restful-API&quot;&gt;&lt;a href=&quot;#Restful-API&quot; class=&quot;headerlink&quot; title=&quot;Restful API&quot;&gt;&lt;/a&gt;Restful API&lt;/h3&gt;&lt;p&gt;越来越多的人开始意识到, 网站即软件, 而且是一种新型的软件.&lt;/p
      
    
    </summary>
    
      <category term="web" scheme="https://hubhack.github.io/categories/web/"/>
    
    
      <category term="理解restful" scheme="https://hubhack.github.io/tags/%E7%90%86%E8%A7%A3restful/"/>
    
  </entry>
  
  <entry>
    <title>python部署</title>
    <link href="https://hubhack.github.io/python/%E9%83%A8%E7%BD%B2/"/>
    <id>https://hubhack.github.io/python/部署/</id>
    <published>2019-07-22T01:25:33.385Z</published>
    <updated>2019-08-22T03:28:33.033Z</updated>
    
    <content type="html"><![CDATA[<p>Django打包</p><p>构建setup.py文件</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">useradd python</span><br><span class="line">echo python | passwd python --stdin</span><br><span class="line">yum install git python-devel mysql-devel</span><br><span class="line">yum -y install gcc make patch gdbm-devel openssl-devel sqlite-devel readline-devel zlib-devel bzip2-devel</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">curl -L https://github.com/pyenv/pyenv-installer/raw/master/bin/pyenv-installer | bash</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">export PATH=&quot;$HOME/.pyenv/bin:$PATH&quot;</span><br><span class="line">eval &quot;$(pyenv init -)&quot;</span><br><span class="line">eval &quot;$(pyenv virtualenv-init -)&quot;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">source .bashrc </span><br><span class="line"></span><br><span class="line">[global]</span><br><span class="line">index-url = https://mirrors.aliyun.com/pypi/simple/</span><br><span class="line"></span><br><span class="line">[install]</span><br><span class="line">trusted-host=mirrors.aliyun.com</span><br></pre></td></tr></table></figure><p>python setup.py sdist –formats=gztar</p><p>ln -sv blog-1.0 web</p><p>/root/blog/projects/web</p><p>uwsgi -d –ini blog.ini  后台启动服务, </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">import &#123; resolve &#125; from &quot;url&quot;;</span><br><span class="line"></span><br><span class="line">let p = new Promise((resolve, reject) =&gt; &#123;</span><br><span class="line">    //做一些事情</span><br><span class="line">    //然后再某些条件下resolve, 或者reject</span><br><span class="line">    if(/*条件随便写*/) &#123;</span><br><span class="line">        resolve()</span><br><span class="line"></span><br><span class="line">    &#125;else&#123;</span><br><span class="line">        reject()</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br><span class="line">p.then(() =&gt; &#123;</span><br><span class="line">    //如果p的状态被resolve, 就进入这里</span><br><span class="line">&#125;), () =&gt; &#123;</span><br><span class="line">    //如果p的状态被reject,进入这里</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>第一段调用了Promise构造函数, 第二段是调用了promise实例的.then方法</p><p>构造实例</p><p>构造函数接受一个参数作为参数</p><p>调用构造函数得到实例p的同时,作为参数的函数会立即执行.</p><p>参数函数接受两个回调函数参数resolve和reject</p><p>在参数函数被执行的过程中, 如果在其内部调用resolve, 会被p的状态变为fulfilled, 或者调用reject, 会将p的状态变为rejected.</p><p>调用.then</p><p>调用.then可以为实例p注册两种状态回调函数</p><p>当实例p的状态为fulfilled, 会触发第一个函数执行</p><p>当实例p的状态为rejected, 则会触发第二个函数执行.</p><p>总结</p><p>上面这样构造promise实例, 然后调用.then.then.then的编写代码方式, 就是promise.</p><p>其基本模式是:</p><p>将异步过程转换成promise对象.</p><p>对象有三种状态, </p><p>通过.then注册状态的回调.</p><p>已完成的状态能触发回调.</p><p>采用这种方式来处理编程中的异步任务, 就是在使用promise了.</p><p>所以promise就是一种异步编程模式.</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Django打包&lt;/p&gt;
&lt;p&gt;构建setup.py文件&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span 
      
    
    </summary>
    
      <category term="python" scheme="https://hubhack.github.io/categories/python/"/>
    
    
      <category term="项目部署" scheme="https://hubhack.github.io/tags/%E9%A1%B9%E7%9B%AE%E9%83%A8%E7%BD%B2/"/>
    
  </entry>
  
  <entry>
    <title>理解js中的promise</title>
    <link href="https://hubhack.github.io/js/%E7%90%86%E8%A7%A3js%20%E7%9A%84promise/"/>
    <id>https://hubhack.github.io/js/理解js 的promise/</id>
    <published>2019-07-10T08:08:50.783Z</published>
    <updated>2019-07-10T09:47:50.633Z</updated>
    
    <content type="html"><![CDATA[<h3 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h3><p>ES6开始支持.promise对象用于一个异步操作的最终完成(包括成功和失败)及结果值的表示.</p><p>简单说, 就是处理异步请求的.之所以叫做Promise, 就是我承诺,如果成功则怎么处理, 失败则怎么处理.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//语法</span></span><br><span class="line"><span class="keyword">new</span> <span class="built_in">Promise</span>(</span><br><span class="line"><span class="comment">/*下面定义的函数是executor*/</span></span><br><span class="line"><span class="function"><span class="keyword">function</span>(<span class="params">resolve, reject</span>) </span>&#123;...&#125;</span><br><span class="line">);</span><br></pre></td></tr></table></figure><p>executor是一个带有resolve和reject 两个参数的函数.</p><p>executor函数在promise构造函数执行时立即执行, 被传递resolve和reject函数(executor函数在Promise构造函数返回新建对象前被调用).executor内部通常会执行一些异步操作, 一旦完成,可以调用resolve函数来讲promise状态改成fulfilled即完成, 或者在发生错误时将他的状态改为rejected即失败.</p><p>如果在executor函数中抛出一个错误, 那么该promise状态为rejected.executor函数的返回值被忽略.</p><p>executor中, resolve或reject只能执行其中一个函数.</p><p>promise的状态</p><ul><li>fulfilled:意味着操作成功完成</li><li>pending:初始状态,不是成功或失败状态</li></ul><ul><li>rejected: 意味着操作失败.</li></ul><p><strong>Promise.then(onfilled, onRejected)</strong></p><p>参数是2个函数, 根据Promise的状态来调用不同的函数, fulfilled走onFulfilled函数,rejected走onRejected函数.then的返回值是一个新的promise对象, 执行任意一个函数, 对这个promise对象来说就是其返回值.调用任何一个函数, 其返回值可以被后续的then方法继续捕捉.</p><p><strong>catch(onRejected)</strong></p><p>为当前Promise对象添加一个拒绝回调,返回一个新的Promise对象.</p><p>Promise提供2个方法:</p><ul><li>Promise.resolve(value)返回 状态为fulfilled的Promise对象</li><li>Promise.reject(reason)返回 状态为rejected状态的Promise对象.</li></ul><p>catch其实是then(undefined, () =&gt; {})的语法糖,如下:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> p = <span class="built_in">Promise</span>.reject(<span class="string">'error'</span>);</span><br><span class="line">p.catch(<span class="function"><span class="params">err</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'catch'</span> + err);</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>Promise对象内部其实自带了try catch, 当同步代码发生运行时错误时, 会自动将错误对象作为值reject, 这样就会触发catch注册的回调.</p><p>实例</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">runAsync</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function"><span class="keyword">function</span>(<span class="params">resolve, reject</span>)</span>&#123;</span><br><span class="line">        setInterval(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">            <span class="built_in">console</span>.log(<span class="string">'do sth ----'</span>)</span><br><span class="line">            resolve(<span class="string">'ok----'</span>)</span><br><span class="line"></span><br><span class="line">        &#125;, <span class="number">3000</span>);</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//调用</span></span><br><span class="line">runAsync().then(</span><br><span class="line">    value =&gt; &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(value);</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">Promise</span>.reject(value + <span class="string">'*'</span>);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">).catch(</span><br><span class="line">    reason =&gt; &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(reason);</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">Promise</span>.resolve(reason + <span class="string">'*'</span>);</span><br><span class="line">    &#125;</span><br><span class="line">).then(</span><br><span class="line">    value =&gt; &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(value);</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'Promise end'</span>)</span><br><span class="line">    &#125;</span><br><span class="line">)</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'========='</span>)</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;概念&quot;&gt;&lt;a href=&quot;#概念&quot; class=&quot;headerlink&quot; title=&quot;概念&quot;&gt;&lt;/a&gt;概念&lt;/h3&gt;&lt;p&gt;ES6开始支持.promise对象用于一个异步操作的最终完成(包括成功和失败)及结果值的表示.&lt;/p&gt;
&lt;p&gt;简单说, 就是处理异步请求的.
      
    
    </summary>
    
      <category term="js" scheme="https://hubhack.github.io/categories/js/"/>
    
    
      <category term="js" scheme="https://hubhack.github.io/tags/js/"/>
    
  </entry>
  
  <entry>
    <title>序列化与json</title>
    <link href="https://hubhack.github.io/web/%E5%BA%8F%E5%88%97%E5%8C%96%E4%B8%8Ejson/"/>
    <id>https://hubhack.github.io/web/序列化与json/</id>
    <published>2019-07-04T02:31:22.966Z</published>
    <updated>2019-08-22T03:56:48.958Z</updated>
    
    <content type="html"><![CDATA[<h3 id="序列化与反序列化"><a href="#序列化与反序列化" class="headerlink" title="序列化与反序列化"></a>序列化与反序列化</h3><p>内存中的字典,列表,集合以及各种对象,如何保存到一个文件中.</p><p>如果是自己定义的类的实例, 如何保存到一个文件中.</p><p>如何从文件中读取数据,并让他们再内存中再次恢复成自己对应的类的实例.</p><p>要设计一套协议, 按照某种规则,把内存中的数据保存到文件中. 文件是一个字节序列,所以必须把数据转换成字节序列,输出到文件.这就是序列化, 反之, 从文件的字节序列恢复到内存并且还是原来的类型,就是反序列化.</p><h3 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h3><p>serialization 序列化</p><p>将内存中的对象存储下来,把它变成一个个字节.-&gt;二进制</p><p>deserialization 反序列化</p><p>将文件的一个个字节恢复成内存中对象 &lt;-二进制</p><p>序列化保存到文件就是持久化.</p><p>可以将数据序列化后持久化,或者网络传输; 也可以将从文件中或者网络收到的字节序列反序列化.</p><h3 id="json"><a href="#json" class="headerlink" title="json"></a>json</h3><p>JSON是JavaScript Object Notation的缩写，中文译为JavaScript对象表示法。用来作为数据交换的文本格式，作用类似于XML，而2001年Douglas Crockford提出的目的就是为了取代XML，它不是一种编程语言，仅用来描述数据结构。</p><p>json是对js对象文本的一个描述， 相比xml来说更轻在web中流行广泛，因为是js的一部分，所以在浏览器中直接被被解析，网页传输中应用广泛。</p><h2 id="1、JSON语法规则"><a href="#1、JSON语法规则" class="headerlink" title="1、JSON语法规则"></a>1、JSON语法规则</h2><p>JSON的语法可以表示以下三种类型的值：简单值、JSON对象和数组。</p><p><strong>（1）简单值</strong></p><p>简单值使用与JavaScript相同的语法，可以在JSON中表示字符串、数值、布尔值和null。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 简单值</span></span><br><span class="line"><span class="string">"Hello World!"</span> <span class="comment">// 字符串</span></span><br><span class="line"><span class="number">99</span> <span class="comment">// 数值</span></span><br><span class="line"><span class="literal">true</span> <span class="comment">// 布尔型</span></span><br><span class="line"><span class="literal">false</span> <span class="comment">// 布尔型</span></span><br><span class="line"><span class="literal">null</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 在JSON中不能使用的值</span></span><br><span class="line"><span class="literal">NaN</span> <span class="comment">// 数值不能是NaN</span></span><br><span class="line"><span class="literal">Infinity</span> <span class="comment">// 数值不能是Infinity</span></span><br><span class="line"><span class="literal">undefined</span> <span class="comment">// 在JSON也不可以使用JavaScript中的undefined</span></span><br><span class="line"><span class="string">'Hello World!'</span> <span class="comment">// 字符串必须使用双引号表示，不能使用单引号</span></span><br><span class="line"><span class="number">0x1</span> <span class="comment">// 数值必须以十进制表示，不能使用十六进制</span></span><br></pre></td></tr></table></figure><p><strong>（2）对象</strong></p><p>对象是一组有序的键值对的数据组成的数据类型。键值对中，值可以是简单值，也可以是对象和数组（数组也是用来表示JSON的数据类型，见接下来内容）。一般很多刚入门的同学都在JavaScript中使用JSON所以经常会和JSON对象混淆，要十分注意。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 对象，对象的属性名必须使用双引号，值要是字符串也必须使用双引号</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="string">"name"</span>: <span class="string">"Andy"</span>,</span><br><span class="line">  <span class="string">"age"</span>: <span class="number">18</span>,</span><br><span class="line">  <span class="string">"isStudent"</span>: <span class="literal">true</span>,</span><br><span class="line">  <span class="string">"isLeader"</span>: <span class="literal">false</span>,</span><br><span class="line">  <span class="string">"mark"</span>: <span class="literal">null</span>,</span><br><span class="line">  <span class="string">"school"</span>: &#123;</span><br><span class="line">    <span class="string">"name"</span>: <span class="string">"BIT"</span>,</span><br><span class="line">    <span class="string">"region"</span>: <span class="string">"Beijing"</span> <span class="comment">// 这个地方不能有逗号，因为是对象的最后一个属性成员</span></span><br><span class="line">  &#125; <span class="comment">// 这个地方也不可以有逗号，因为也是对象的最后一个属性成员</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>（3）数组</strong></p><p>数组是由一组有序的数组组成的列表。在数组中，值可以是简单值，也可以是对象和数组。记住，记住，再记住，在JSON中数组最后一个元素一定不要有逗号。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 示例一</span></span><br><span class="line">[<span class="string">"Andy"</span>, <span class="string">"Ruby"</span>, <span class="string">"Danny"</span>, <span class="string">"Peter"</span>, <span class="string">"Lisa"</span>]</span><br><span class="line"><span class="comment">// 示例二</span></span><br><span class="line">[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span>, <span class="number">0</span>]</span><br><span class="line"><span class="comment">// 示例三</span></span><br><span class="line">[</span><br><span class="line">  &#123;<span class="string">"name"</span>: <span class="string">"Andy"</span>, <span class="string">"age"</span>: <span class="number">18</span>&#125;,</span><br><span class="line">  &#123;<span class="string">"name"</span>: <span class="string">"Ruby"</span>, <span class="string">"age"</span>: <span class="number">18</span>&#125;,</span><br><span class="line">  &#123;<span class="string">"name"</span>: <span class="string">"Danny"</span>, <span class="string">"age"</span>: <span class="number">20</span>&#125;</span><br><span class="line">]</span><br><span class="line"><span class="comment">// 示例四</span></span><br><span class="line">[</span><br><span class="line">  [<span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>],</span><br><span class="line">  [<span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>],</span><br><span class="line">  [<span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>]</span><br><span class="line">]</span><br></pre></td></tr></table></figure><hr><h2 id="2、JSON字符串和JSON对象"><a href="#2、JSON字符串和JSON对象" class="headerlink" title="2、JSON字符串和JSON对象"></a>2、JSON字符串和JSON对象</h2><p><strong>（1）JSON字符串</strong></p><p>JSON字符串与普通的字符串没有任何特殊的地方，但是之所以称为JSON字符串是因为，这个字符串符合我们前面介绍的语法规则。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//JSON字符串</span></span><br><span class="line"><span class="keyword">var</span> p =<span class="string">'&#123;"name":"Andy","gender":"男","age":"18"&#125;'</span>;</span><br><span class="line"><span class="built_in">console</span>.log(p); <span class="comment">// &#123;"name":"Andy","gender":"男","age":"18"&#125;</span></span><br><span class="line">alert(<span class="keyword">typeof</span>(p));<span class="comment">// string</span></span><br></pre></td></tr></table></figure><p><strong>（2）JSON对象</strong></p><p>JSON对象主要是在JavaScript的说法。在面向对象编程中，类的实例化叫做对象，对象拥有不同的属性，键值对就是对象的属性和值。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// JSON对象</span></span><br><span class="line"><span class="keyword">var</span> person=&#123;</span><br><span class="line">  <span class="string">"name"</span>:<span class="string">"Andy"</span>,</span><br><span class="line">  <span class="string">"gender"</span>:<span class="string">"男"</span>,</span><br><span class="line">  <span class="string">"age"</span>:<span class="string">"18"</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(person.name);<span class="comment">// 在控制台输出Andy，可以通过点运算直接访问对象属性</span></span><br><span class="line">alert(<span class="keyword">typeof</span>(person));<span class="comment">// object</span></span><br></pre></td></tr></table></figure><p><strong>（3）JSON字符串和JSON对象互相转换</strong></p><p>JavaScript中有一个全局的对象，JSON。JSON中有两个方法 <em>stringify() 和 parse()。</em></p><p><em>JSON.parse()</em> 把JSON字符串解析为JSON对象</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//JSON字符串通过parse转化为JSON对象</span></span><br><span class="line"><span class="keyword">var</span> p =<span class="string">'&#123;"name":"Andy","gender":"男","age":"18"&#125;'</span>;</span><br><span class="line">person = <span class="built_in">JSON</span>.parse(p)</span><br><span class="line"><span class="built_in">console</span>.log(person.name);<span class="comment">// 在控制台输出Andy，可以通过点运算直接访问对象属性</span></span><br><span class="line">alert(<span class="keyword">typeof</span>(person));<span class="comment">// object</span></span><br></pre></td></tr></table></figure><p><em>JSON.stringify()</em> 用于把JSON对象序列化为JSON字符串。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//JSON对象通过stringify转化为JSON字符串</span></span><br><span class="line"><span class="keyword">var</span> person=&#123;</span><br><span class="line">  <span class="string">"name"</span>:<span class="string">"Andy"</span>,</span><br><span class="line">  <span class="string">"gender"</span>:<span class="string">"男"</span>,</span><br><span class="line">  <span class="string">"age"</span>:<span class="string">"18"</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> p = <span class="built_in">JSON</span>.stringify(person)</span><br><span class="line"><span class="built_in">console</span>.log(p); <span class="comment">// &#123;"name":"Andy","gender":"男","age":"18"&#125;</span></span><br><span class="line">alert(<span class="keyword">typeof</span>(p));<span class="comment">// string</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;序列化与反序列化&quot;&gt;&lt;a href=&quot;#序列化与反序列化&quot; class=&quot;headerlink&quot; title=&quot;序列化与反序列化&quot;&gt;&lt;/a&gt;序列化与反序列化&lt;/h3&gt;&lt;p&gt;内存中的字典,列表,集合以及各种对象,如何保存到一个文件中.&lt;/p&gt;
&lt;p&gt;如果是自己定义的
      
    
    </summary>
    
      <category term="web" scheme="https://hubhack.github.io/categories/web/"/>
    
    
      <category term="序列化" scheme="https://hubhack.github.io/tags/%E5%BA%8F%E5%88%97%E5%8C%96/"/>
    
  </entry>
  
</feed>
