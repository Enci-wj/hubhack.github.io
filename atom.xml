<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>千分无言</title>
  
  <subtitle>人生苦短 我用python</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://hubhack.github.io/"/>
  <updated>2019-08-19T01:39:46.545Z</updated>
  <id>https://hubhack.github.io/</id>
  
  <author>
    <name>mwq</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title></title>
    <link href="https://hubhack.github.io/%E5%90%8E%E7%AB%AF/python/%E5%9F%BA%E7%A1%80/Python%E7%B1%BB%E5%9E%8B%E6%B3%A8%E8%A7%A3/"/>
    <id>https://hubhack.github.io/后端/python/基础/Python类型注解/</id>
    <published>2019-08-22T03:06:41.579Z</published>
    <updated>2019-08-19T01:39:46.545Z</updated>
    
    <content type="html"><![CDATA[<h1 id="函数定义的弊端"><a href="#函数定义的弊端" class="headerlink" title="函数定义的弊端"></a>函数定义的弊端</h1><ul><li>Python是动态语言 ，变量随时可以被赋值，且能赋值为不同的类型</li><li>Python不是静态编译语言，变量类型是在运行期决定的</li><li>动态语言很灵活，但是这种特性也是弊端<h2 id="函数注解"><a href="#函数注解" class="headerlink" title="函数注解"></a>函数注解</h2></li><li>Python 3.5 引入</li><li>对函数的参数进行类型注解</li><li>对函数的返回值进行类型注解</li><li>只对函数参数做一个辅助的说明，并不对函数参数进行类型检查</li><li>提供给第三方工具，做代码分析，发现隐藏的bug</li><li>函数注解的信息，保存在<strong>annotations</strong>属性中<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">add</span><span class="params">(x:int , y:int)</span> -&gt; int:</span></span><br><span class="line">    <span class="string">'''</span></span><br><span class="line"><span class="string">    :param x:</span></span><br><span class="line"><span class="string">    :param y:</span></span><br><span class="line"><span class="string">    :return:</span></span><br><span class="line"><span class="string">    '''</span></span><br><span class="line">    <span class="keyword">return</span> x + y</span><br><span class="line">print(help(add))</span><br><span class="line">print(add.__annotations__)</span><br></pre></td></tr></table></figure></li></ul><p>打印结果<br><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">add(x:int, y:int) -&gt; int</span><br><span class="line">    :param x:</span><br><span class="line">    :param y:</span><br><span class="line">    :<span class="keyword">return</span>:</span><br><span class="line"></span><br><span class="line"><span class="literal">None</span></span><br><span class="line">&#123;'x': &lt;class 'int'&gt;, 'y': &lt;class 'int'&gt;, 'return': &lt;class 'int'&gt;&#125;</span><br></pre></td></tr></table></figure></p><h2 id="变量注解"><a href="#变量注解" class="headerlink" title="变量注解"></a>变量注解</h2><ul><li>Python 3.6引入。它也只是一种对变量的说明，非强制</li><li>i：int = 3<h2 id="函数参数类型检查"><a href="#函数参数类型检查" class="headerlink" title="函数参数类型检查"></a>函数参数类型检查</h2><h3 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h3></li><li>函数参数的检查，一定是在函数外，如果把检查代码侵入到函数中</li><li>函数应该作为参数，传入到检查函数中</li><li>检查函数拿到函数传入的实际参数，与形参声明对比</li><li><strong>annotations</strong>属性是一个字典，其中包括返回值类型的声明。假设要做位置参数的判断，无法和字典中的声明对应。使用inspect模块<h2 id="inspet模块"><a href="#inspet模块" class="headerlink" title="inspet模块"></a>inspet模块</h2></li><li>提供获取对象信息的函数，可以检查函数的类、类型检查</li><li>signature(callable)，获取前面（函数签名包括了一个函数的信息，包括函数、它的参数类型、它所在的类和名称空间及其他信息）<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> inspect</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">add</span><span class="params">(x:int, y:int, *args, **kwargs)</span> -&gt; int:</span></span><br><span class="line">    <span class="keyword">return</span> x + y</span><br><span class="line"></span><br><span class="line">sig = inspect.signature(add)</span><br><span class="line">print(sig,type(sig)) <span class="comment"># 函数签名</span></span><br><span class="line">print(<span class="string">'params:'</span>,sig.parameters) <span class="comment">#OrderedDict </span></span><br><span class="line">print(<span class="string">'return:'</span>,sig.return_annotation) </span><br><span class="line">print(sig.parameters[<span class="string">'y'</span>],type(sig.parameters[<span class="string">'y'</span>]))</span><br><span class="line">print(sig.parameters[<span class="string">'x'</span>].annotation)</span><br><span class="line">print(sig.parameters[<span class="string">'args'</span>])</span><br><span class="line">print(sig.parameters[<span class="string">'args'</span>].annotation)</span><br><span class="line">print(sig.parameters[<span class="string">'kwargs'</span>])</span><br><span class="line">print(sig.parameters[<span class="string">'kwargs'</span>].annotation)</span><br></pre></td></tr></table></figure></li></ul><p>打印结果<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">(x:int, y:int, *args, **kwargs) -&gt; int &lt;class 'inspect.Signature'&gt;</span><br><span class="line">params: OrderedDict([(<span class="string">'x'</span>, &lt;Parameter <span class="string">"x:int"</span>&gt;), (<span class="string">'y'</span>, &lt;Parameter <span class="string">"y:int"</span>&gt;), (<span class="string">'args'</span>, &lt;Parameter <span class="string">"*args"</span>&gt;), (<span class="string">'kwargs'</span>, &lt;Parameter <span class="string">"**kwargs"</span>&gt;)])</span><br><span class="line"><span class="keyword">return</span>: &lt;<span class="class"><span class="keyword">class</span> '<span class="title">int</span>'&gt;</span></span><br><span class="line"><span class="class"><span class="title">y</span>:</span>int &lt;<span class="class"><span class="keyword">class</span> '<span class="title">inspect</span>.<span class="title">Parameter</span>'&gt;</span></span><br><span class="line"><span class="class">&lt;<span class="title">class</span> '<span class="title">int</span>'&gt;</span></span><br><span class="line"><span class="class">*<span class="title">args</span></span></span><br><span class="line"><span class="class">&lt;<span class="title">class</span> '<span class="title">inspect</span>.<span class="title">_empty</span>'&gt;</span></span><br><span class="line"><span class="class">**<span class="title">kwargs</span></span></span><br><span class="line"><span class="class">&lt;<span class="title">class</span> '<span class="title">inspect</span>.<span class="title">_empty</span>'&gt;</span></span><br></pre></td></tr></table></figure></p><h3 id="inspect用法"><a href="#inspect用法" class="headerlink" title="inspect用法"></a>inspect用法</h3><ul><li>inspect.isfunction(add)，是否是函数</li><li>inspect.ismethod(add)，是否是类的方法</li><li>inspect.isgenerator(add)，是否是生成器对象</li><li>inspect.isgeneratorfunction(add)，是否是生成器函数</li><li>inspect.isclass(add)，是否是类</li><li>inspect.ismodule(inspect)，是否是模块</li><li>inspect.isbuiltin(print)，是否是内建对象</li><li>还有很多is函数，可通过inspect模块帮助查阅<h3 id="Parameter对象"><a href="#Parameter对象" class="headerlink" title="Parameter对象"></a>Parameter对象</h3></li><li>保存在元组中，是只读的</li><li>name，参数的名字</li><li>annotation，参数的注解，可能没有定义</li><li>default，参数的缺省值，可能没有定义</li><li>empty，特殊的类，用来标记default属性或者注释annotation属性的空值</li><li>kind，实参如何绑定到形参，就是形参的类型</li><li>POSITIONAL_ONLY，值必须是位置参数提供</li><li>POSITIONAL_OR_KEYWORD，值必须作为关键字或者位置参数提供</li><li>VAR_POSITIONAL，可变位置参数，对应*args</li><li>KEYWORD_ONLY，keyword-only参数，对应*或者*args之后的出现的非可变关键字参数</li><li>VAR_KEYWORD，可变关键字参数，对应**kwargs<br>例：<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> inspect</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">add</span><span class="params">(x, y:int=<span class="number">7</span>, *rangs, z, t=<span class="number">10</span>, **kwargs)</span> -&gt;int:</span></span><br><span class="line">    <span class="keyword">return</span> x + y</span><br><span class="line">sig = inspect.signature(add)</span><br><span class="line">print(sig)</span><br><span class="line">print(<span class="string">'params:'</span>, sig.parameters)<span class="comment"># 有序字典</span></span><br><span class="line">print(<span class="string">'return:'</span>, sig.return_annotation)</span><br><span class="line">print(<span class="string">'~~~~~~~~~~~~~~~~~~~'</span>)</span><br><span class="line"><span class="keyword">for</span> i ,item <span class="keyword">in</span> enumerate(sig.parameters.items()):</span><br><span class="line">    name, param = item</span><br><span class="line">    print(i+<span class="number">1</span>, name, param.annotation, param.kind, param.default)</span><br><span class="line">    print(param.default <span class="keyword">is</span> param.empty, end=<span class="string">'\n\n'</span>)</span><br></pre></td></tr></table></figure></li></ul><p>打印结果：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">(x, y:int=7, *rangs, z, t=10, **kwargs) -&gt; int</span><br><span class="line">params: OrderedDict([(<span class="string">'x'</span>, &lt;Parameter <span class="string">"x"</span>&gt;), (<span class="string">'y'</span>, &lt;Parameter <span class="string">"y:int=7"</span>&gt;), (<span class="string">'rangs'</span>, &lt;Parameter <span class="string">"*rangs"</span>&gt;), (<span class="string">'z'</span>, &lt;Parameter <span class="string">"z"</span>&gt;), (<span class="string">'t'</span>, &lt;Parameter <span class="string">"t=10"</span>&gt;), (<span class="string">'kwargs'</span>, &lt;Parameter <span class="string">"**kwargs"</span>&gt;)])</span><br><span class="line"><span class="keyword">return</span>: &lt;<span class="class"><span class="keyword">class</span> '<span class="title">int</span>'&gt;</span></span><br><span class="line"><span class="class">~~~~~~~~~~~~~~~~~~~</span></span><br><span class="line"><span class="class">1 <span class="title">x</span> &lt;<span class="title">class</span> '<span class="title">inspect</span>.<span class="title">_empty</span>'&gt; <span class="title">POSITIONAL_OR_KEYWORD</span> &lt;<span class="title">class</span> '<span class="title">inspect</span>.<span class="title">_empty</span>'&gt;</span></span><br><span class="line"><span class="class"><span class="title">True</span></span></span><br><span class="line"><span class="class"></span></span><br><span class="line"><span class="class">2 <span class="title">y</span> &lt;<span class="title">class</span> '<span class="title">int</span>'&gt; <span class="title">POSITIONAL_OR_KEYWORD</span> 7</span></span><br><span class="line"><span class="class"><span class="title">False</span></span></span><br><span class="line"><span class="class"></span></span><br><span class="line"><span class="class">3 <span class="title">rangs</span> &lt;<span class="title">class</span> '<span class="title">inspect</span>.<span class="title">_empty</span>'&gt; <span class="title">VAR_POSITIONAL</span> &lt;<span class="title">class</span> '<span class="title">inspect</span>.<span class="title">_empty</span>'&gt;</span></span><br><span class="line"><span class="class"><span class="title">True</span></span></span><br><span class="line"><span class="class"></span></span><br><span class="line"><span class="class">4 <span class="title">z</span> &lt;<span class="title">class</span> '<span class="title">inspect</span>.<span class="title">_empty</span>'&gt; <span class="title">KEYWORD_ONLY</span> &lt;<span class="title">class</span> '<span class="title">inspect</span>.<span class="title">_empty</span>'&gt;</span></span><br><span class="line"><span class="class"><span class="title">True</span></span></span><br><span class="line"><span class="class"></span></span><br><span class="line"><span class="class">5 <span class="title">t</span> &lt;<span class="title">class</span> '<span class="title">inspect</span>.<span class="title">_empty</span>'&gt; <span class="title">KEYWORD_ONLY</span> 10</span></span><br><span class="line"><span class="class"><span class="title">False</span></span></span><br><span class="line"><span class="class"></span></span><br><span class="line"><span class="class">6 <span class="title">kwargs</span> &lt;<span class="title">class</span> '<span class="title">inspect</span>.<span class="title">_empty</span>'&gt; <span class="title">VAR_KEYWORD</span> &lt;<span class="title">class</span> '<span class="title">inspect</span>.<span class="title">_empty</span>'&gt;</span></span><br><span class="line"><span class="class"><span class="title">True</span></span></span><br></pre></td></tr></table></figure></p><h2 id="业务应用"><a href="#业务应用" class="headerlink" title="业务应用"></a>业务应用</h2><ul><li><p>有函数如下</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">add</span><span class="params">(x, y:int=<span class="number">7</span>)</span> -&gt; int:</span></span><br><span class="line"><span class="keyword">return</span> x + y</span><br></pre></td></tr></table></figure></li><li><p>检查用户输入是否符合参数注解的要求</p><h3 id="思路-1"><a href="#思路-1" class="headerlink" title="思路"></a>思路</h3></li><li>调用时，判断用户输入的实参是否符合要求</li><li>调用时，用户感觉上还是在调用add函数</li><li>对用户输入的数据和声明的类型进行对比，如果不符合，提示用户<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> inspect</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">check</span><span class="params">(fn)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">wrapper</span><span class="params">(*args,**kwargs)</span>:</span></span><br><span class="line">        sig = inspect.signature(fn)</span><br><span class="line">        params = sig.parameters</span><br><span class="line">        values = list(params.values())</span><br><span class="line">        <span class="keyword">for</span> i,p <span class="keyword">in</span> enumerate(args):</span><br><span class="line">            param = values[i]</span><br><span class="line">            <span class="keyword">if</span> param.annotation <span class="keyword">is</span> <span class="keyword">not</span> param.empty <span class="keyword">and</span> <span class="keyword">not</span> isinstance(p, param.annotation):</span><br><span class="line">                print(p,<span class="string">'!= ='</span>,values[i].annotation)</span><br><span class="line">        <span class="keyword">for</span> k,v <span class="keyword">in</span> kwargs.items():</span><br><span class="line">            <span class="keyword">if</span> params[k].annotation <span class="keyword">is</span> <span class="keyword">not</span> inspect._empty <span class="keyword">and</span> <span class="keyword">not</span> isinstance(v, params[k].annotation):</span><br><span class="line">                print(k,v,<span class="string">'! = = ='</span>,params[k].annotation)</span><br><span class="line">        <span class="keyword">return</span> fn(*args, **kwargs)</span><br><span class="line">    <span class="keyword">return</span> wrapper</span><br><span class="line"></span><br><span class="line"><span class="meta">@check</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">add</span><span class="params">(x, y:int=<span class="number">7</span>)</span> -&gt; int:</span></span><br><span class="line">    <span class="keyword">return</span> x + y</span><br><span class="line"></span><br><span class="line">print(add(<span class="number">20</span>,<span class="number">0</span>))  <span class="comment"># 20</span></span><br></pre></td></tr></table></figure></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;函数定义的弊端&quot;&gt;&lt;a href=&quot;#函数定义的弊端&quot; class=&quot;headerlink&quot; title=&quot;函数定义的弊端&quot;&gt;&lt;/a&gt;函数定义的弊端&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;Python是动态语言 ，变量随时可以被赋值，且能赋值为不同的类型&lt;/li&gt;
&lt;li&gt;P
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title></title>
    <link href="https://hubhack.github.io/%E5%90%8E%E7%AB%AF/python/%E5%9F%BA%E7%A1%80/Python%E7%AE%97%E6%B3%95---%E6%8F%92%E5%85%A5%E6%8E%92%E5%BA%8F/"/>
    <id>https://hubhack.github.io/后端/python/基础/Python算法---插入排序/</id>
    <published>2019-08-22T03:06:41.574Z</published>
    <updated>2019-08-19T01:40:15.535Z</updated>
    
    <content type="html"><![CDATA[<h1 id="直接插入排序"><a href="#直接插入排序" class="headerlink" title="直接插入排序"></a>直接插入排序</h1><h2 id="直接插入排序原理"><a href="#直接插入排序原理" class="headerlink" title="直接插入排序原理"></a>直接插入排序原理</h2><ul><li>在未排序序列中，构建一个子排序序列，直至全部数据排序完成</li><li>将待排序的数，插入到已经排序的序列中合适的位置</li><li><p>增加一个哨兵，放入待比较值，让它和后面已经拍好序的序列比较，找到合适的插入点</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> random</span><br><span class="line">num = [i <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">10</span>)]</span><br><span class="line">random.shuffle(num)<span class="comment"># 就地打乱列表中元素顺序</span></span><br><span class="line">print(num)</span><br><span class="line">nums = [<span class="number">0</span>] + num<span class="comment"># 增加一个哨兵位</span></span><br><span class="line">length = len(nums)</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">2</span>,length):<span class="comment"># 跳过哨兵和第一个数，从索引2开始</span></span><br><span class="line">    nums[<span class="number">0</span>] = nums[i]<span class="comment"># 设置哨兵</span></span><br><span class="line">    j = i - <span class="number">1</span><span class="comment"># 往左   </span></span><br><span class="line">    <span class="keyword">if</span> nums[j] &gt; nums[<span class="number">0</span>]:</span><br><span class="line">        <span class="keyword">while</span> nums[j] &gt; nums[<span class="number">0</span>]:<span class="comment"># 一旦有进入if，说明一定有挪动</span></span><br><span class="line">            nums[j+<span class="number">1</span>] = nums[j]<span class="comment"># 右移</span></span><br><span class="line">            j -= <span class="number">1</span></span><br><span class="line">        nums[j+<span class="number">1</span>] = nums[<span class="number">0</span>]</span><br><span class="line"></span><br><span class="line">print(nums[<span class="number">1</span>:])<span class="comment">#利用切片将哨兵位置剔除</span></span><br></pre></td></tr></table></figure></li><li><p>解析：<br>增加一个哨兵位，每趟将戴比较数放入<br>哨兵依次和待比较数的前一个数据比较，大数靠右移动，找到哨兵中值的插入位置<br>每一轮结束后，得到一个开始到待比较数位置的一个有序序列</p></li></ul><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><ul><li>最好情况，正好是升序排序，比较迭代n-1次</li><li>最差情况，正好是降序排序，比较迭代1,2,…n-1即n(n-1)/2，数据移动非常多</li><li>使用两层嵌套循环，时间复杂度O(n^2)</li><li>稳定排序算法<br>如果待排序序列R中两元素相等，即Ri等于Rj，且i&lt;j，那么排序后这个先后顺序不变，这种排序算法就称为稳定排序</li><li>使用在小规模数据比较</li><li>优化<br>如果比较操作耗时大的话，可以采用二分查找来提交效率，即二分查找插入排序</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;直接插入排序&quot;&gt;&lt;a href=&quot;#直接插入排序&quot; class=&quot;headerlink&quot; title=&quot;直接插入排序&quot;&gt;&lt;/a&gt;直接插入排序&lt;/h1&gt;&lt;h2 id=&quot;直接插入排序原理&quot;&gt;&lt;a href=&quot;#直接插入排序原理&quot; class=&quot;headerlink&quot; 
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title></title>
    <link href="https://hubhack.github.io/%E5%90%8E%E7%AB%AF/python/%E5%9F%BA%E7%A1%80/Python%E7%9A%84%E5%AF%B9%E8%B1%A1%E6%A8%A1%E5%9E%8B/"/>
    <id>https://hubhack.github.io/后端/python/基础/Python的对象模型/</id>
    <published>2019-08-22T03:06:41.569Z</published>
    <updated>2019-08-19T01:36:55.907Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Python的对象模型"><a href="#Python的对象模型" class="headerlink" title="Python的对象模型"></a>Python的对象模型</h1><p>在Python中，任何对象多有类型，可以使用type()或者<code>__class__</code>查看<br>但是类型也是对象即类对象，它也有自己的类型<br><img src="https://img-blog.csdnimg.cn/20190528183803320.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3B5dGhvbl9scXg=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>所有新类型的缺省类型是type(可以使用元类来改变)</p><ul><li>特殊类型type是所有对象的缺省类型，也包括type自己。但它又是一个对象，因此从object继承</li><li>特殊类型object是继承树的顶层，它是python所有类型的最终基类</li></ul><p>也就是说，继承都来自object，类型都看type。type也是对象继承自object，object也有类型是type。<br>这俩又特殊，type类型是它自己，obkect没有基类</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;Python的对象模型&quot;&gt;&lt;a href=&quot;#Python的对象模型&quot; class=&quot;headerlink&quot; title=&quot;Python的对象模型&quot;&gt;&lt;/a&gt;Python的对象模型&lt;/h1&gt;&lt;p&gt;在Python中，任何对象多有类型，可以使用type()或者&lt;cod
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title></title>
    <link href="https://hubhack.github.io/%E5%90%8E%E7%AB%AF/python/%E5%9F%BA%E7%A1%80/Python%E7%94%9F%E6%88%90%E5%99%A8%E5%87%BD%E6%95%B0---yield%E3%80%81%E5%8D%8F%E7%A8%8B%E5%BA%94%E7%94%A8/"/>
    <id>https://hubhack.github.io/后端/python/基础/Python生成器函数---yield、协程应用/</id>
    <published>2019-08-22T03:06:41.563Z</published>
    <updated>2019-08-19T01:40:23.328Z</updated>
    
    <content type="html"><![CDATA[<p>@<a href>TOC</a></p><h1 id="生成器generator"><a href="#生成器generator" class="headerlink" title="生成器generator"></a>生成器generator</h1><ul><li>生成器指的是生成器对象，可以由生成器表达式得到，也可以使用yield关键字得到一个生成器函数，调用这个函数得到一个生成器对象</li><li>生成器对象，是一个可迭代对象，是一个迭代器</li><li>生成器对象，是延迟计算、惰性求值的<h1 id="生成器函数"><a href="#生成器函数" class="headerlink" title="生成器函数"></a>生成器函数</h1></li><li>函数体中包含yield语句的函数，就是生成器函数，调用后返回生成器对象</li><li></li><li><p>在生成器函数中，可以多次yield</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">m = (i <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">5</span>))</span><br><span class="line">print(type(m)) <span class="comment"># 打印结果(类型) &lt;class 'generator'&gt; 生成器</span></span><br><span class="line">print(next(m)) <span class="comment"># 打印结果 0</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">inc</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">5</span>):</span><br><span class="line">        <span class="keyword">yield</span> i</span><br><span class="line"></span><br><span class="line">print(type(inc)) <span class="comment"># 打印结果(类型) &lt;class 'function'&gt; 函数</span></span><br><span class="line">print(type(inc())) `` <span class="comment"># 打印结果(类型)  &lt;class 'generator'&gt; 生成器</span></span><br><span class="line"></span><br><span class="line">g = inc()</span><br><span class="line">print(type(g)) <span class="comment"># 打印结果(类型) &lt;class 'generator'&gt; 生成器</span></span><br><span class="line">print(next(g)) <span class="comment"># 0</span></span><br><span class="line"><span class="keyword">for</span> x <span class="keyword">in</span> g:</span><br><span class="line">    print(x) <span class="comment">#  1 2 3 4</span></span><br><span class="line">print(<span class="string">'-----------'</span>) </span><br><span class="line"><span class="keyword">for</span> y <span class="keyword">in</span> g:</span><br><span class="line">    print(y) <span class="comment"># 未打印</span></span><br></pre></td></tr></table></figure></li><li><p>普通函数调用，函数会立即执行直到执行完毕</p></li><li>生成器函数调用，并不会立即执行函数体，而是需要使用next函数来驱动生成器函数执行后获得的生成器对象</li><li><p>生成器表达式和生成器函数都可以得到生成器对象，只不过生成器函数可以写出更加复杂的逻辑</p><h1 id="生成器的执行"><a href="#生成器的执行" class="headerlink" title="生成器的执行"></a>生成器的执行</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">gen</span><span class="params">()</span>:</span></span><br><span class="line">    print(<span class="string">'line 1'</span>)</span><br><span class="line">    <span class="keyword">yield</span> <span class="number">1</span></span><br><span class="line">    print(<span class="string">'line 2'</span>)</span><br><span class="line">    <span class="keyword">yield</span> <span class="number">2</span></span><br><span class="line">    print(<span class="string">'line 3'</span>)</span><br><span class="line">    <span class="keyword">return</span> <span class="number">3</span></span><br><span class="line">    <span class="keyword">yield</span> <span class="number">4</span></span><br><span class="line"></span><br><span class="line">next(gen()) <span class="comment"># line1</span></span><br><span class="line">next(gen()) <span class="comment"># line1</span></span><br><span class="line">g = gen() <span class="comment">#用变量记住gen函数,这样在此进行使用时就可以延续上一次未完成的</span></span><br><span class="line">print(next(g)) <span class="comment"># line 1 1</span></span><br><span class="line">print(next(g)) <span class="comment"># line 2 2</span></span><br><span class="line">print(next(g)) <span class="comment"># StopIteration</span></span><br><span class="line">print(next(g,<span class="string">'end'</span>)) <span class="comment"># 没有元素给个缺省值</span></span><br></pre></td></tr></table></figure></li><li><p>在生成器函数中，可以多次yield，每执行一次yield后会暂定执行，把yield表达式的值返回</p></li><li>再次执行会执行到下一个yield语句又会暂停执行</li><li>return语句依然可以种植函数运行，但return语句的返回值不能被获取到</li><li>return会导致当前函数返回，无法继续执行，也无法继续获取下一个值，抛出Stoplteration异常</li><li>如果函数没有显式的return语句，当生成器函数执行到结尾（相当于执行了return None），一样会抛出StopIteration异常<h2 id="生成器函数-1"><a href="#生成器函数-1" class="headerlink" title="生成器函数"></a>生成器函数</h2></li><li>包含yield语句的生成器函数调用后，生成生成器对象的时候，<strong>生成器函数的函数体不会立即执行</strong></li><li>next(generator)会从函数的当前位置向后执行到之后碰到的第一个yield语句，会弹出值，并暂停函数执行</li><li>再次调用next函数，和上一条一样的处理过程</li><li>继续调用next函数，生成器函数如果结果执行了（显式或隐式调用了return语句），会抛出StopIteration异常<h1 id="生成器应用"><a href="#生成器应用" class="headerlink" title="生成器应用"></a>生成器应用</h1><h2 id="无限循环"><a href="#无限循环" class="headerlink" title="无限循环"></a>无限循环</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">counter</span><span class="params">()</span>:</span></span><br><span class="line">    i = <span class="number">0</span></span><br><span class="line">    <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">        i += <span class="number">1</span></span><br><span class="line">        <span class="keyword">yield</span> i</span><br><span class="line"></span><br><span class="line">c = counter()</span><br><span class="line">print(next(c)) <span class="comment"># 打印 1</span></span><br><span class="line">print(next(c)) <span class="comment"># 打印 2</span></span><br><span class="line">print(next(c)) <span class="comment"># 打印 3</span></span><br></pre></td></tr></table></figure></li></ul><h2 id="计数器"><a href="#计数器" class="headerlink" title="计数器"></a>计数器</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">inc</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">counter</span><span class="params">()</span>:</span></span><br><span class="line">        i = <span class="number">0</span></span><br><span class="line">        <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">            i += <span class="number">1</span></span><br><span class="line">            <span class="keyword">yield</span> i</span><br><span class="line"></span><br><span class="line">    c = counter()</span><br><span class="line">    <span class="comment"># def inner():</span></span><br><span class="line">    <span class="comment">#     return next(c)</span></span><br><span class="line">    <span class="comment"># return inner</span></span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">lambda</span> :next(c)</span><br><span class="line"></span><br><span class="line">g = inc()</span><br><span class="line">print(g()) <span class="comment"># 打印 1</span></span><br><span class="line">print(g()) <span class="comment"># 打印 2</span></span><br><span class="line">print(g()) <span class="comment"># 打印 3</span></span><br></pre></td></tr></table></figure><h2 id="斐波那契数列"><a href="#斐波那契数列" class="headerlink" title="斐波那契数列"></a>斐波那契数列</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">fib</span><span class="params">()</span>:</span></span><br><span class="line">    x = <span class="number">0</span></span><br><span class="line">    y = <span class="number">1</span></span><br><span class="line">    <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">        <span class="keyword">yield</span> y</span><br><span class="line">        x, y = y, x + y</span><br><span class="line"></span><br><span class="line">foo = fib()</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">10</span>): <span class="comment"># 前10项</span></span><br><span class="line">    print(next(foo))</span><br></pre></td></tr></table></figure><h2 id="生成器交互"><a href="#生成器交互" class="headerlink" title="生成器交互"></a>生成器交互</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">inc</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">counter</span><span class="params">()</span>:</span></span><br><span class="line">        i = <span class="number">0</span></span><br><span class="line">        <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">            i += <span class="number">1</span></span><br><span class="line">            response = <span class="keyword">yield</span> i</span><br><span class="line">            <span class="keyword">if</span> response <span class="keyword">is</span> <span class="keyword">not</span> <span class="literal">None</span>:</span><br><span class="line">                i = response</span><br><span class="line">    c = counter()</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">lambda</span> x=<span class="literal">False</span>: next(c) <span class="keyword">if</span> <span class="keyword">not</span> x <span class="keyword">else</span> c.send(<span class="number">0</span>)</span><br><span class="line"></span><br><span class="line">foo = inc()</span><br><span class="line">print(foo())</span><br><span class="line">print(foo())</span><br><span class="line">print(foo())</span><br><span class="line">print(foo(<span class="literal">True</span>))</span><br><span class="line">print(foo())</span><br><span class="line">print(foo())</span><br><span class="line">print(foo())</span><br></pre></td></tr></table></figure><h2 id="协程Coroutine"><a href="#协程Coroutine" class="headerlink" title="协程Coroutine"></a>协程Coroutine</h2><ul><li>生成器的高级用法</li><li>它比进程、线程轻量级，是在用户空间调度函数的一种实现</li><li>Python3 asyncio就是协程实现，已经加入到标准库</li><li>Python3.5使用async、await关键字直接原生态支持协程</li><li>协程调度器实现思路<br>有2个生成器A、B<br>next(A)，A执行到了yied语句暂停，然后去执行next(B)，B执行到yieid语句也暂停，然后再次调用next(A)，在调用next(B)，周而复始，就实现了调度的效果<br>可以引入调度的策略来实现切换的方式</li><li>协程是一种非抢占式调度<h2 id="yield-from-语法"><a href="#yield-from-语法" class="headerlink" title="yield from 语法"></a>yield from 语法</h2></li><li><p>从Python3.3开始增加了yield from语法，使得yield from iterable 等价于 for i in iterable: yield i</p><ul><li>yield from 就是一种简化语法的语法糖<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">foo</span><span class="params">()</span>:</span></span><br><span class="line"><span class="keyword">for</span> x <span class="keyword">in</span> range(<span class="number">5</span>):</span><br><span class="line"><span class="keyword">yield</span> x</span><br><span class="line"><span class="comment">#等价于</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">foo</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="keyword">yield</span> <span class="keyword">from</span> range(<span class="number">5</span>)</span><br><span class="line"></span><br><span class="line">add = foo()</span><br><span class="line">print(next(add)) <span class="comment"># 打印结果 0</span></span><br><span class="line">print(next(add)) <span class="comment"># 打印结果 1</span></span><br><span class="line">print(next(add)) <span class="comment"># 打印结果 2</span></span><br></pre></td></tr></table></figure></li></ul></li><li><p>本事上yield from 的意思就是，从from 后面的可迭代对象中拿元素一个个yield出去</p></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;@&lt;a href&gt;TOC&lt;/a&gt;&lt;/p&gt;
&lt;h1 id=&quot;生成器generator&quot;&gt;&lt;a href=&quot;#生成器generator&quot; class=&quot;headerlink&quot; title=&quot;生成器generator&quot;&gt;&lt;/a&gt;生成器generator&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title></title>
    <link href="https://hubhack.github.io/%E5%90%8E%E7%AB%AF/python/%E5%9F%BA%E7%A1%80/python%E5%90%84%E7%A7%8D%E6%A8%A1%E5%9D%97%E4%BD%BF%E7%94%A8/"/>
    <id>https://hubhack.github.io/后端/python/基础/python各种模块使用/</id>
    <published>2019-08-22T03:06:41.558Z</published>
    <updated>2019-08-19T01:26:51.361Z</updated>
    
    <content type="html"><![CDATA[<p>@<a href="Python模块大全">TOC</a></p><h1 id="random-随机数模块"><a href="#random-随机数模块" class="headerlink" title="random 随机数模块"></a>random 随机数模块</h1><ul><li><code>random.randint(a, b)</code>    返回 [a, b] 之间的整数 </li><li><code>random.choice(seq)</code><br>从非空序列的元素中随机挑选一个元素<br>比如random.choice(range(10))，从0到9中 随机挑选一个整数<br>random.choice([1,3,5,7])</li><li><p><code>random.randrange([start,] stop [,step])</code><br>从指定范围内，按指定基数递增的集合中获取一个随机数，基数缺省值为1<br>random.randrange(1,7,2) -&gt; [1,3,5,7]</p><ul><li><code>random.shuffle(list)</code> -&gt; None 就地打乱列表元素 </li><li><code>random.sample(population, k)</code><br>从样本空间或总体（序列或者集合类型）中随机取出k个<strong>不同的元素</strong>，返回一个新的列表<h1 id="标准库datetime-模块"><a href="#标准库datetime-模块" class="headerlink" title="标准库datetime 模块"></a>标准库datetime 模块</h1>对日期、时间、时间戳的处理<h2 id="datetime类方法"><a href="#datetime类方法" class="headerlink" title="datetime类方法"></a>datetime类方法</h2></li></ul></li><li><code>datetime.datetime.today()</code><br>返回本地时区当前时间的datetime对象</li><li><code>datetime.datetime.now(tz=None)</code><br>返回当前时间的datetime对象，时间到微秒，如果tz为None，返回和today()一样</li><li><code>datetime.datetime.utcnow()</code><br>没有时区的当前时间</li><li><code>datetime.datetime.fromtimestamp(timestamp, tz=None)</code><br>从一个时间戳返回一个datetime对象<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> datetime</span><br><span class="line">dt = datetime.datetime.timestamp(datetime.datetime.today())</span><br><span class="line">print(datetime.datetime.fromtimestamp(dt))</span><br><span class="line"><span class="comment"># 2019-07-06 15:24:05.455759</span></span><br></pre></td></tr></table></figure></li></ul><h2 id="datetime对象"><a href="#datetime对象" class="headerlink" title="datetime对象"></a>datetime对象</h2><ul><li><code>datetime.datetime.timestamp()</code><br>返回一个到微秒的时间戳<br>时间戳：格林威治时间1970年1月1日0点到现在的秒数<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> datetime</span><br><span class="line">print(datetime.datetime.timestamp(datetime.datetime.today()))</span><br><span class="line"><span class="comment"># 1562397786.469274</span></span><br></pre></td></tr></table></figure></li></ul><p>datetime对象构造方法 datetime.datetime(2016, 12, 6, 16, 29, 43, 79043)<br>year、month、day、hour、minute、second、microsecond，取datetime对象的年月日时分秒及微秒<br>以下方法都需传入一个datetime对象</p><ul><li><code>weekday()</code> 返回星期的天，周一0，周日6</li><li><code>isoweekday()</code> 返回星期的天，周一1，周日7</li><li><code>date()</code> 返回日期date对象</li><li><code>time()</code> 返回时间time对象</li><li><code>replace()</code> 修改并返回新的时间</li><li><code>isocalendar()</code> 返回一个三元组(年，周数，周的天)</li></ul><p>日期格式化</p><ul><li>类方法 <code>strptime(date_string, format)</code> ，返回datetime对象</li><li>对象方法 <code>strftime(format)</code> ，返回字符串</li><li><p>字符串format函数格式化</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> datetime</span><br><span class="line">dt = datetime.datetime.strptime(<span class="string">"21/11/06 16:30"</span>, <span class="string">"%d/%m/%y %H:%M"</span>)</span><br><span class="line">print(dt.strftime(<span class="string">"%Y-%m-%d %H:%M:%S"</span>))</span><br><span class="line">print(<span class="string">"&#123;0:%Y&#125;/&#123;0:%m&#125;/&#123;0:%d&#125; &#123;0:%H&#125;::&#123;0:%M&#125;::&#123;0:%S&#125;"</span>.format(dt))</span><br><span class="line">print(<span class="string">'&#123;:%Y-%m-%d %H:%M:%S&#125;'</span>.format(dt))</span><br><span class="line"></span><br><span class="line"><span class="comment"># 执行结果</span></span><br><span class="line"><span class="number">2006</span><span class="number">-11</span><span class="number">-21</span> <span class="number">16</span>:<span class="number">30</span>:<span class="number">00</span></span><br><span class="line"><span class="number">2006</span>/<span class="number">11</span>/<span class="number">21</span> <span class="number">16</span>::<span class="number">30</span>::<span class="number">00</span></span><br><span class="line"><span class="number">2006</span><span class="number">-11</span><span class="number">-21</span> <span class="number">16</span>:<span class="number">30</span>:<span class="number">00</span></span><br></pre></td></tr></table></figure></li><li><p><code>datetime.timedelta(days=0, seconds=0, microseconds=0, milliseconds=0, minutes=0, hours=0, weeks=0)</code><br>year = datetime.timedelta(days=365)</p></li><li><code>total_seconds()</code> 返回时间差的总秒数<h2 id="标准库time模块"><a href="#标准库time模块" class="headerlink" title="标准库time模块"></a>标准库time模块</h2></li><li><code>time.sleep(secs)</code> 将调用线程挂起指定的秒数</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;@&lt;a href=&quot;Python模块大全&quot;&gt;TOC&lt;/a&gt;&lt;/p&gt;
&lt;h1 id=&quot;random-随机数模块&quot;&gt;&lt;a href=&quot;#random-随机数模块&quot; class=&quot;headerlink&quot; title=&quot;random 随机数模块&quot;&gt;&lt;/a&gt;random 随机数模块&lt;
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title></title>
    <link href="https://hubhack.github.io/%E5%90%8E%E7%AB%AF/python/%E5%9F%BA%E7%A1%80/Python%E5%8C%BF%E5%90%8D%E5%87%BD%E6%95%B0lambda/"/>
    <id>https://hubhack.github.io/后端/python/基础/Python匿名函数lambda/</id>
    <published>2019-08-22T03:06:41.553Z</published>
    <updated>2019-08-19T01:40:28.029Z</updated>
    
    <content type="html"><![CDATA[<h1 id="匿名函数Lambda表达式"><a href="#匿名函数Lambda表达式" class="headerlink" title="匿名函数Lambda表达式"></a>匿名函数Lambda表达式</h1><p>Python中，使用Lambda表达式构建匿名函数<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">lambda</span> x: x ** <span class="number">2</span> <span class="comment">#定义</span></span><br><span class="line">(<span class="keyword">lambda</span> x: x ** <span class="number">2</span>)(<span class="number">4</span>) <span class="comment">#调用</span></span><br><span class="line"></span><br><span class="line">foo = <span class="keyword">lambda</span> x,y:(x+y) ** <span class="number">2</span> <span class="comment">#定义函数,不推荐,不如直接定义</span></span><br><span class="line">foo(<span class="number">1</span>,<span class="number">2</span>)</span><br><span class="line"><span class="comment">#等价于</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">foo</span><span class="params">(x,y)</span>:</span></span><br><span class="line">    <span class="keyword">return</span> (x+y) ** <span class="number">2</span></span><br></pre></td></tr></table></figure></p><ul><li>使用lambda关键字定义匿名函数,格式为 lambda [参数列表]: 表达式</li><li>参数列表不需要小括号。无参就不写参数</li><li>冒号用来分割参数列表和表达式部分</li><li>不需要使用rrturn。表达式的值，就是匿名函数的返回值。表达式中不能出现等号</li><li>lambda表达式（匿名函数）<strong>只能写在一行上</strong>，也称为单行函数<br>匿名函数往往用在未高阶函数传参时，使用lambda表达式，往往能简化代码</li><li><p>将函数对象加入列表中,通过索引访问</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[<span class="keyword">lambda</span> x : x + <span class="number">1</span>][<span class="number">0</span>](<span class="number">1</span>) <span class="comment"># 调用 #返回值 2</span></span><br></pre></td></tr></table></figure></li><li><p>比较整数和字符串大小</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">l1 = [<span class="number">1</span>, <span class="number">2</span>, <span class="string">'a'</span>, <span class="string">'1'</span>]</span><br><span class="line">sorted(l1, key=<span class="keyword">lambda</span> x: ord(x) <span class="keyword">if</span> isinstance(x, str) <span class="keyword">else</span> x)</span><br><span class="line"><span class="comment">#返回值 [1, 2, '1', 'a']</span></span><br></pre></td></tr></table></figure></li><li><p>返回常量的函数</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">print((<span class="keyword">lambda</span> :<span class="number">0</span>)()) <span class="comment">#</span></span><br></pre></td></tr></table></figure></li><li><p>加法匿名函数，带缺省值</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">print((<span class="keyword">lambda</span> x,y=<span class="number">3</span>:x + y)(<span class="number">5</span>)) <span class="comment"># 打印结果 8</span></span><br><span class="line">print((<span class="keyword">lambda</span> x,y=<span class="number">3</span>:x + y)(<span class="number">5</span>,<span class="number">6</span>)) <span class="comment"># 打印结果 11</span></span><br></pre></td></tr></table></figure></li><li><p>keyword-only参数</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">print((<span class="keyword">lambda</span> x,*,y=<span class="number">3</span>:x + y)(<span class="number">5</span>)) <span class="comment"># 打印结果 8</span></span><br><span class="line">print((<span class="keyword">lambda</span> x,*,y=<span class="number">3</span>:x + y)(<span class="number">5</span>,y=<span class="number">6</span>)) <span class="comment"># 打印结果 11</span></span><br></pre></td></tr></table></figure></li><li><p>可变参数</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">print((<span class="keyword">lambda</span> *args:[x <span class="keyword">for</span> x <span class="keyword">in</span> args])(*range(<span class="number">5</span>))) <span class="comment"># 打印结果 [0, 1, 2, 3, 4]</span></span><br><span class="line">print((<span class="keyword">lambda</span> *args:&#123;x <span class="keyword">for</span> x <span class="keyword">in</span> args&#125;)(*range(<span class="number">5</span>)))  <span class="comment"># 打印结果  &#123;0, 1, 2, 3, 4&#125;</span></span><br><span class="line">print((<span class="keyword">lambda</span> *args:(x <span class="keyword">for</span> x <span class="keyword">in</span> args))(*range(<span class="number">5</span>))) <span class="comment"># 打印结果 &lt;generator object &lt;lambda&gt;.&lt;locals&gt;.&lt;genexpr&gt; at 0x0000000001DF5E60&gt;</span></span><br></pre></td></tr></table></figure></li></ul><p>注:print((lambda <em>args:(x for x in args))(</em>range(5)))的打印结果为生成器表达式，因为(x for x in args)使用了小括号，而这种表达方式为生成一个惰性的生成器表达式</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;匿名函数Lambda表达式&quot;&gt;&lt;a href=&quot;#匿名函数Lambda表达式&quot; class=&quot;headerlink&quot; title=&quot;匿名函数Lambda表达式&quot;&gt;&lt;/a&gt;匿名函数Lambda表达式&lt;/h1&gt;&lt;p&gt;Python中，使用Lambda表达式构建匿名函数&lt;
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title></title>
    <link href="https://hubhack.github.io/%E5%90%8E%E7%AB%AF/python/%E5%9F%BA%E7%A1%80/Python%E5%87%BD%E6%95%B0%E8%BF%94%E5%9B%9E%E5%80%BC%E4%BD%9C%E7%94%A8%E5%9F%9F%EF%BC%88%E9%97%AD%E5%8C%85%EF%BC%89/"/>
    <id>https://hubhack.github.io/后端/python/基础/Python函数返回值作用域（闭包）/</id>
    <published>2019-08-22T03:06:41.548Z</published>
    <updated>2019-08-19T01:41:01.913Z</updated>
    
    <content type="html"><![CDATA[<p>@<a href>TOC</a></p><h1 id="函数返回值"><a href="#函数返回值" class="headerlink" title="函数返回值"></a>函数返回值</h1><ul><li>例</li></ul><ol><li><p>return语句之后可以执行吗?</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">showplus</span><span class="params">(x)</span>:</span></span><br><span class="line">    print(x)</span><br><span class="line">    <span class="keyword">return</span> x + <span class="number">1</span></span><br><span class="line">    print(<span class="string">'-'</span>*<span class="number">30</span>)  <span class="comment"># return语句之后会执行吗</span></span><br><span class="line"></span><br><span class="line">showplus(<span class="number">5</span>) <span class="comment"># 5，输出结果</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># return之后print('-'*30)并没有执行</span></span><br><span class="line"></span><br><span class="line"><span class="number">5</span> <span class="comment"># 输出结果,return之后print('-'*30)并没有执行</span></span><br></pre></td></tr></table></figure></li><li><p>多条return语句都会执行吗</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">showplus</span><span class="params">(x)</span>:</span></span><br><span class="line">    print(x)</span><br><span class="line">    <span class="keyword">return</span> x + <span class="number">1</span></span><br><span class="line">    <span class="keyword">return</span> x + <span class="number">2</span></span><br><span class="line"></span><br><span class="line">showplus(<span class="number">5</span>) <span class="comment">#， 输出结果 </span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"> <span class="comment"># return之后return x + 2并没有执行</span></span><br></pre></td></tr></table></figure></li><li><p>下例多个return可以执行吗?</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">guess</span><span class="params">(x)</span>:</span></span><br><span class="line">    <span class="keyword">if</span> x &gt; <span class="number">3</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"&gt; 3"</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"&lt;= 3"</span></span><br><span class="line"></span><br><span class="line">print(guess(<span class="number">4</span>)) <span class="comment"># &gt;3, 输出结果</span></span><br><span class="line">print(guess(<span class="number">2</span>)) <span class="comment"># &lt;=3,输出结果</span></span><br></pre></td></tr></table></figure></li><li><p>观察下例函数执行的结果</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">fn</span><span class="params">(x)</span>:</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(x):</span><br><span class="line">        <span class="keyword">if</span> i &gt; <span class="number">3</span>:</span><br><span class="line">            <span class="keyword">return</span> i</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        print(<span class="string">"&#123;&#125; is not greater than 3"</span>.format(x))</span><br><span class="line"></span><br><span class="line">print(fn(<span class="number">5</span>)) <span class="comment">#4 输出结果</span></span><br><span class="line">print(fn(<span class="number">2</span>)) <span class="comment"># 2 is not greater than 3 ；None 输出结果</span></span><br></pre></td></tr></table></figure></li></ol><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><ul><li>Python函数使用return语句返回“返回值”</li><li>所有函数都有返回值，如果没有return语句，隐式调用retuen None</li><li>return语句并不一定是函数的语句块的最后一条语句</li><li>一个函数可以存在多个return语句，但是只有一条可以被执行。如果没有一条return语句被执行到，隐式调用return None</li><li>如果有必要，可以显示调用return None，可以简写为return</li><li>如果函数执行了return语句，函数就会返回，当前被执行的reutrn语句之后的其他语句就不会被执行了</li><li><p>返回值的作用：结束函数调用、返回“返回值”</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">showvalues</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">1</span>, <span class="number">3</span>, <span class="number">5</span></span><br><span class="line"></span><br><span class="line">print(showvalues()) <span class="comment">#输出结果(1, 3, 5)</span></span><br></pre></td></tr></table></figure></li><li><p>函数不能同时返回多个值</p></li><li>return 1, 3, 5看似返回多个值，隐式的被python封装成了一个元祖</li><li>x, ,y, z =showlist() 使用结构提取返回值更为方便<h1 id="函数作用域"><a href="#函数作用域" class="headerlink" title="函数作用域"></a>函数作用域</h1><h2 id="作用域"><a href="#作用域" class="headerlink" title="作用域"></a>作用域</h2></li><li><p>一个标识符的课件范围，这就是标识符的作用域。一般常说的是变量的作用域</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">foo</span><span class="params">()</span>:</span></span><br><span class="line">x = <span class="number">100</span></span><br><span class="line"></span><br><span class="line">print(x) <span class="comment"># 可以访问到吗</span></span><br></pre></td></tr></table></figure></li><li><p>上例中x不可以访问，会抛出异常（NameError:name ‘x’ is not defined）,原因在于函数是一个封装，它会开辟一个<strong>作用域</strong>，x变量被限制在这个作用域中，所以在函数外部x变量<strong>不可见</strong></p></li><li><strong>注意：每一个函数都会开辟一个作用域</strong><h2 id="作用域分类"><a href="#作用域分类" class="headerlink" title="作用域分类"></a>作用域分类</h2></li><li>全局作用域<br>在整个程序运行环境中都可见<br>全局作用域中的变量称为全局变量</li><li>局部作用域<br>在函数、类等内部课件<br>局部作用域中的变量称为局部变量，其使用范围不能超过其所在局部作用域</li><li><p>局部变量</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">fn1</span><span class="params">()</span>:</span></span><br><span class="line">    x = <span class="number">1</span> <span class="comment">#局部作用域,x为局部变量,使用范围在fn1内</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">fn2</span><span class="params">()</span>:</span></span><br><span class="line">    print(x) <span class="comment"># x 能打印吗? 可见吗? 为什么?</span></span><br><span class="line"></span><br><span class="line">print(x) <span class="comment">#x能打印吗?可见吗?为什么?</span></span><br></pre></td></tr></table></figure></li><li><p>全局变量</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">x = <span class="number">5</span> <span class="comment"># 全局变量，也在函数外定义</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">foo</span><span class="params">()</span>:</span></span><br><span class="line">    print(x) <span class="comment">#可见吗？为什么？</span></span><br><span class="line">    </span><br><span class="line">foo()</span><br></pre></td></tr></table></figure></li><li><p>一般来讲外部作用域变量在函数内部可见，可以使用</p></li><li>反过来，函数内部的局部变量，不能在函数外部看到<h1 id="函数嵌套"><a href="#函数嵌套" class="headerlink" title="函数嵌套"></a>函数嵌套</h1></li><li><p>在一个函数中定义了另外一个函数</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">outer</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">inner</span><span class="params">()</span>:</span></span><br><span class="line">        print(<span class="string">"inner"</span>)</span><br><span class="line">    print(<span class="string">"outer"</span>)</span><br><span class="line">    inner()</span><br><span class="line">    </span><br><span class="line">outer() <span class="comment"># 可以调用吗</span></span><br><span class="line">inner() <span class="comment"># 可以调用吗</span></span><br></pre></td></tr></table></figure></li><li><p>内部函数inner不能在外部直接使用，会抛出NameError异常，因为它在函数外部不可见</p></li><li>其实，inner不过就是一个标识符，就是一个函数outer内部定义的变量而已<h3 id="嵌套结构的作用域"><a href="#嵌套结构的作用域" class="headerlink" title="嵌套结构的作用域"></a>嵌套结构的作用域</h3>对比下面嵌套结构，代码执行的效果<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">outer</span><span class="params">()</span>:</span></span><br><span class="line">    o = <span class="number">65</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">inner</span><span class="params">()</span>:</span></span><br><span class="line">        print(<span class="string">"inner &#123;&#125;"</span>.format(o))</span><br><span class="line">        print(chr(<span class="number">0</span>))</span><br><span class="line"></span><br><span class="line">    inner()</span><br><span class="line">    print(<span class="string">"outer &#123;&#125;"</span>.format(o))</span><br><span class="line"></span><br><span class="line">outer() <span class="comment">#输出结果 inner 65  ； outer 65</span></span><br></pre></td></tr></table></figure></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">outer2</span><span class="params">()</span>:</span></span><br><span class="line">    o = <span class="number">65</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">inner</span><span class="params">()</span>:</span></span><br><span class="line">        o = <span class="number">97</span></span><br><span class="line">        print(<span class="string">"inner &#123;&#125;"</span>.format(o))</span><br><span class="line">        print(chr(<span class="number">0</span>))</span><br><span class="line"></span><br><span class="line">    inner()</span><br><span class="line">    print(<span class="string">"outer &#123;&#125;"</span>.format(o))</span><br><span class="line"></span><br><span class="line">outer2() <span class="comment">#输出结果 inner 97  ； outer 65</span></span><br></pre></td></tr></table></figure><ul><li>从执行的结果来看：<br>外层变量在内部作用域课件<br>内部作用域inner中，如果定义了 o = 97，相当于在当前函数inner作用域中重新定义了一个新的变量o，但是，这个o并不能覆盖掉外部作用域outer2中的变量o，只不过对于inner函数来说，其只能可见自己作用域中定义的变量o</li></ul><h1 id="一个赋值语句的问题"><a href="#一个赋值语句的问题" class="headerlink" title="一个赋值语句的问题"></a>一个赋值语句的问题</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">x = <span class="number">5</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">foo</span><span class="params">()</span>:</span></span><br><span class="line">x += <span class="number">1</span></span><br><span class="line">foo() <span class="comment">#报错如下</span></span><br><span class="line"><span class="comment"># UnboundLocalError: local variable 'x' referenced before assignment</span></span><br></pre></td></tr></table></figure><ul><li>原因分析：<br>x += 1其实是 x = x+1<br>相当于在foo内部定义一个局部变量 x，那么foo内部所有x都是这个局部变量x了<br>x = x +1 相当于使用了局部变量x，但是这个x还没有完成赋值，就被右边拿来做加1操作了</li><li><p>如果解决这个常见问题？</p><h1 id="global语句"><a href="#global语句" class="headerlink" title="global语句"></a>global语句</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">x = <span class="number">5</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">foo</span><span class="params">()</span>:</span></span><br><span class="line"><span class="keyword">global</span> x <span class="comment">#全局变量</span></span><br><span class="line">x +=<span class="number">1</span></span><br><span class="line">print(x)</span><br><span class="line">foo()</span><br></pre></td></tr></table></figure></li><li><p>使用global关键字的变量，将foo内的x声明为使用<strong>外部的全局作用域</strong>中定义的x</p></li><li>全局作用域中必须有x的定义<br>使用了global，foo中的x不再是局部变量，它是全局变量<h2 id="总结-1"><a href="#总结-1" class="headerlink" title="总结"></a>总结</h2></li><li>x += 1 这种是特殊形式产生的错误的原因？先引用后赋值，而python动态语言是赋值才算定义，才能被引用。解决办法，在这条与语句前增加x=0之类的赋值语句，或者使用global告诉内部作用域，去全局作用域查找变量定义</li><li>内部作用域使用 x= 10 之类的赋值语句会重新定义局部作用域使用的变量x，但是，一旦这个作用域中使用global声明x为全局的，那么x=5相当于在未全局作用域的变量x赋值<h2 id="global使用原则"><a href="#global使用原则" class="headerlink" title="global使用原则"></a>global使用原则</h2></li><li>外部作用域变量会在内部作用域可见，但也不要在这个内部的局部作用域中直接使用，因为函数的目的就是为了封装，列表玉外界隔离</li><li>如果函数需要使用外部全局变量，请尽量使用函数的形参定义，并在调用传实参解决</li></ul><h1 id="闭包"><a href="#闭包" class="headerlink" title="闭包"></a>闭包</h1><ul><li>自由变量：未在本地作用域中定义的变量。例如定义在内层函数外的外层函数的作用域中的变量</li><li><p>闭包：就是一个概念，出现在嵌套函数中，指的是内层函数引用到了外层函数的自由变量，就形成了闭包。很多语言都有这个概念，最熟悉就是JaveSceipt</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">counter</span><span class="params">()</span>:</span></span><br><span class="line">c = [<span class="number">0</span>]</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">inc</span><span class="params">()</span>:</span></span><br><span class="line">c[<span class="number">0</span>] += <span class="number">1</span></span><br><span class="line"><span class="keyword">return</span> c[<span class="number">0</span>]</span><br><span class="line"><span class="keyword">return</span> inc</span><br><span class="line">foo = counter()</span><br><span class="line">print(foo(), foo())</span><br><span class="line">c = <span class="number">100</span></span><br><span class="line">print(foo())</span><br></pre></td></tr></table></figure></li><li><p>代码分析<br>第7行会执行counter函数并返回inc对应的函数对象，注意这个函数对象并不释放，因为有foo记着<br>第4行不会报错，c已经在counter函数中定义过了。而且inc中的使用方式是为c的元素修改值，而不是重新定义c变量<br>第8行打印 1 2<br>第10行打印 3<br>第9行的c和counter中的不一样，而inc引用的是自变量真是counter中的变量c</p></li><li>这就是Python2中实现闭包的方式，Python3还可以使用nonlocal关键字<h2 id="nonlocal语句"><a href="#nonlocal语句" class="headerlink" title="nonlocal语句"></a>nonlocal语句</h2>nonlocal：将变量标记为不在本地作用域定义，而是在上级的某一级局部作用域中定义，但不能是全局作用域中定义。<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">counter</span><span class="params">()</span>:</span></span><br><span class="line">    count =<span class="number">0</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">inc</span><span class="params">()</span>:</span></span><br><span class="line">        <span class="keyword">nonlocal</span> count <span class="comment">#声明变量count不是本地变量</span></span><br><span class="line">        count += <span class="number">1</span></span><br><span class="line">        <span class="keyword">return</span> count</span><br><span class="line">    <span class="keyword">return</span> inc</span><br><span class="line"></span><br><span class="line">foo = counter()</span><br><span class="line">print(foo(),foo()) <span class="comment"># 打印结果 1  2</span></span><br></pre></td></tr></table></figure></li></ul><p>count 是外层函数的局部变量，被内部函数引用<br>内部函数使用nonlocal关键字声明count变量在上级作用域而非本地作用域中定义<br>代码中内层函数引用外部局部作用域中的自由变量，形成闭包</p><h1 id="默认值的作用域"><a href="#默认值的作用域" class="headerlink" title="默认值的作用域"></a>默认值的作用域</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">foo</span><span class="params">(xyz=<span class="number">1</span>)</span>:</span></span><br><span class="line">    print(xyz)</span><br><span class="line"></span><br><span class="line">foo() <span class="comment">#打印 1</span></span><br><span class="line">foo() <span class="comment">#打印 1</span></span><br><span class="line">print(xyz) <span class="comment">#错误传参 xyz是foo函数的本地变量，不可再函数范围外直接调用</span></span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">foo</span> <span class="params">(xyz=[])</span>:</span></span><br><span class="line">    xyz.append(<span class="number">1</span>)</span><br><span class="line">    print(xyz)</span><br><span class="line"></span><br><span class="line">foo() <span class="comment">#打印 [1]</span></span><br><span class="line">foo() <span class="comment">#打印[1, 1]</span></span><br><span class="line">print(xyz) <span class="comment">#同上</span></span><br></pre></td></tr></table></figure><ul><li>第二次调用foo函数打印的是[1, 1]<br>因为函数也是对象，每个函数定义被执行后，就生成了一个函数对象和函数名这个标识符关联<br>python把函数的默认值放在了函数对象的属性中，这个属性就伴随着这个函数对象的整个生命周期<br>通过查看foo.<em>defaults</em>属性,它是个元祖<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">foo</span> <span class="params">(xyz=[], m=<span class="number">123</span>, n=<span class="string">'abc'</span>)</span>:</span></span><br><span class="line">    xyz.append(<span class="number">1</span>)</span><br><span class="line">    print(xyz)</span><br><span class="line"></span><br><span class="line">print(id(foo),foo.__defaults__)<span class="comment"># 打印结果 35535864 ([], 123, 'abc')</span></span><br><span class="line">foo()<span class="comment"># 打印结果 [1]</span></span><br><span class="line">print(id(foo),foo.__defaults__)<span class="comment">#打印结果 35535864 ([1], 123, 'abc')</span></span><br><span class="line">foo()<span class="comment">#打印结果[1, 1]</span></span><br><span class="line">print(id(foo),foo.__defaults__) <span class="comment">#打印结果 35535864 ([1, 1], 123, 'abc')</span></span><br></pre></td></tr></table></figure></li></ul><p>函数地址并没有变，就是说foo这个函数对象没有变过，调用它，它的属性<strong>defaults</strong>中使用元祖保存默认值xyz默认值是引用类型，引用类型的元素变动，并不是元祖的变化</p><h2 id="非引用类型缺省值"><a href="#非引用类型缺省值" class="headerlink" title="非引用类型缺省值"></a>非引用类型缺省值</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">foo</span> <span class="params">(xyz, m=<span class="number">123</span>, n=<span class="string">'abc'</span>)</span>:</span></span><br><span class="line">    m = <span class="number">456</span></span><br><span class="line">    n = <span class="string">'def'</span></span><br><span class="line">    print(xyz)</span><br><span class="line"></span><br><span class="line">print(foo.__defaults__)<span class="comment">#结果 (123, 'abc')</span></span><br><span class="line">foo(<span class="string">'hello'</span>)<span class="comment">#结果 hello</span></span><br><span class="line">print(foo.__defaults__)<span class="comment">#结果 (123, 'abc')</span></span><br></pre></td></tr></table></figure><p>属性<strong>defaults</strong>中使用元祖保存所有位置参数默认值，它不会因为在函数体内改变了局部变量（形参）的值而发生改变</p><h2 id="keyword-only参数的缺省值"><a href="#keyword-only参数的缺省值" class="headerlink" title="keyword-only参数的缺省值"></a>keyword-only参数的缺省值</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">foo</span><span class="params">(xyz, m=<span class="number">123</span>, *,n=<span class="string">'abc'</span>,t =[<span class="number">1</span>, <span class="number">2</span>])</span>:</span></span><br><span class="line">    m = <span class="number">456</span></span><br><span class="line">    n = <span class="string">'def'</span></span><br><span class="line">    t.append(<span class="number">30</span>)</span><br><span class="line">    print(xyz, m, n, t)</span><br><span class="line"></span><br><span class="line">print(foo.__defaults__,foo.__kwdefaults__)<span class="comment"># 结果 (123,) &#123;'n': 'abc', 't': [1, 2]&#125;</span></span><br><span class="line">foo(<span class="string">'hello'</span>)<span class="comment"># 结果 hello 456 def [1, 2, 30]</span></span><br><span class="line">print(foo.__defaults__,foo.__kwdefaults__)<span class="comment"># 结果 &#123;'n': 'abc', 't': [1, 2, 30]&#125;</span></span><br></pre></td></tr></table></figure><ul><li><strong>属性<strong>defaults</strong>中使用元祖保存所有位置参数默认值</strong></li><li><strong>属性<strong>kwdefaults</strong>中使用字典保存所有keyword-only参数的默认值</strong></li><li>+和+=的区别：<br>+表示两个列表合并并返回一个全新的列表<br>+=表示，就地修改前一个列表，在其后追加一个列表。就是extend方法<h1 id="变量名解析原则LEGB"><a href="#变量名解析原则LEGB" class="headerlink" title="变量名解析原则LEGB"></a>变量名解析原则LEGB</h1></li><li>Local，本地作用域、局部作用域的local命名空间。函数调用时穿件，调用结束消亡</li><li>Enclosing，Python2.2时引入了嵌套函数，实现了闭包，这个就是嵌套函数的外部函数的命名空间</li><li>Global，全局作用域，即一个模块的命名空间。模块被import时创建，解释器退出时消亡</li><li>Build-in，内置模块的命名空间，生命周期从python解释器启动时创建到解释器退出时消亡。例如print(open)，print和open都是内置的变量<br><img src="https://img-blog.csdnimg.cn/2019041613171011.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3B5dGhvbl9scXg=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><h1 id="函数的销毁"><a href="#函数的销毁" class="headerlink" title="函数的销毁"></a>函数的销毁</h1></li><li>定义一个函数就是生产一个函数对象，函数名指向的就是函数对象</li><li>可以使用del语句删除函数，使用引用计数减1</li><li>可以使用同名标识符覆盖原有定义，本质上也是使其应用计数减1</li><li>Python程序结束时，所有对象销毁</li><li>函数也是对象，也不例外，是否销毁，还是看引用计数是否减为0</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;@&lt;a href&gt;TOC&lt;/a&gt;&lt;/p&gt;
&lt;h1 id=&quot;函数返回值&quot;&gt;&lt;a href=&quot;#函数返回值&quot; class=&quot;headerlink&quot; title=&quot;函数返回值&quot;&gt;&lt;/a&gt;函数返回值&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;例&lt;/li&gt;
&lt;/ul&gt;
&lt;ol&gt;
&lt;li&gt;&lt;p&gt;ret
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title></title>
    <link href="https://hubhack.github.io/%E5%90%8E%E7%AB%AF/python/%E5%9F%BA%E7%A1%80/Python%E5%87%BD%E6%95%B0%E3%80%81%E5%8F%82%E6%95%B0%E3%80%81%E5%8F%82%E6%95%B0%E8%A7%A3%E6%9E%84/"/>
    <id>https://hubhack.github.io/后端/python/基础/Python函数、参数、参数解构/</id>
    <published>2019-08-22T03:06:41.543Z</published>
    <updated>2019-08-19T01:41:06.070Z</updated>
    
    <content type="html"><![CDATA[<p>@<a href>TOC</a></p><h1 id="Python函数"><a href="#Python函数" class="headerlink" title="Python函数"></a>Python函数</h1><h2 id="函数"><a href="#函数" class="headerlink" title="函数"></a>函数</h2><h3 id="数学定义"><a href="#数学定义" class="headerlink" title="数学定义"></a>数学定义</h3><ul><li>y=f(x)，y是x的函数，x是自变量。y=f(x0,x1,…xn)<h3 id="Python函数-1"><a href="#Python函数-1" class="headerlink" title="Python函数"></a>Python函数</h3></li><li>由若干语句组成的语句块、函数名称、参数列表构成，它是组织代码的最小单元</li><li>完成一定的功能<h3 id="函数的作用"><a href="#函数的作用" class="headerlink" title="函数的作用"></a>函数的作用</h3></li><li>结构化变成对代码的最基本的封装，一般按照功能组织一段代码</li><li>封装的目的为了复用，减少冗余代码</li><li>代码更加简介美观、可读易懂<h3 id="函数的分类"><a href="#函数的分类" class="headerlink" title="函数的分类"></a>函数的分类</h3></li><li>内建函数，如max()、reversed()等</li><li>库函数，如math、ceil()等</li><li><p>自定义函数，使用def关键字定义</p><h2 id="函数定义"><a href="#函数定义" class="headerlink" title="函数定义"></a>函数定义</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> 函数名<span class="params">(参数列表)</span>:</span></span><br><span class="line">函数体(代码块)</span><br><span class="line">[<span class="keyword">return</span> 返回值]</span><br></pre></td></tr></table></figure></li><li><p>函数名就是标识符，命名要求一样</p></li><li>语句块必须缩进，约定4个空格</li><li>Python的函数若没有return语句，会隐式返回一个None值</li><li>定义中的参数列表称为<strong>形式参数</strong>，只是一种符号表达（标识符），简称<strong>形参</strong><h2 id="函数调用"><a href="#函数调用" class="headerlink" title="函数调用"></a>函数调用</h2></li><li>函数定义，只是声明了一个函数，它不能被执行，需要调用执行</li><li>调用的方式，就是<strong>函数名后加上小括号</strong>，如有必要在括号内填上参数</li><li>调用时写的参数是<strong>实际参数</strong>，是实实在在传入的值，简称<strong>实参</strong><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">add</span><span class="params">(x, y)</span>:</span> <span class="comment"># 函数定义</span></span><br><span class="line">result = x + y <span class="comment"># 函数体</span></span><br><span class="line"><span class="keyword">return</span> result <span class="comment"># 返回值</span></span><br><span class="line"></span><br><span class="line">out = add(<span class="number">4</span>, <span class="number">5</span>) <span class="comment"># 函数调用，可能有返回值，使用变量接收这个返回值</span></span><br><span class="line">print(out) <span class="comment"># print函数加上括号也是调用</span></span><br></pre></td></tr></table></figure></li></ul><p>上面代码解释：</p><ul><li>定义一个函数add，及函数名是add，接受2个参数</li><li>该函数计算的结果，通过返回值返回，需要return语句</li><li>调用时，通过函数名add后加2个参数，返回值可使用变量接受。</li><li><strong>函数名也是标识符，返回值也是值</strong></li><li>定义需要在调用前</li><li>函数是<strong>可调用的对象</strong>，如callable()<h2 id="函数参数"><a href="#函数参数" class="headerlink" title="函数参数"></a>函数参数</h2></li><li>函数在定义是要约定好形式参数，调用时也提供足够的十级参数，一般来说，形参和实参个数要一致（可变参数除外）<h3 id="传参方式"><a href="#传参方式" class="headerlink" title="传参方式"></a>传参方式</h3><h4 id="位置传参"><a href="#位置传参" class="headerlink" title="位置传参"></a>位置传参</h4></li><li>定义时def f(x,y,z)，调用使用f(1,3,5)，按照参数定义顺序传入实参<h4 id="关键字传参"><a href="#关键字传参" class="headerlink" title="关键字传参"></a>关键字传参</h4></li><li>定义时def f(x,y,z)，调用使用f(x=1, y=3, z= 5)，使用形参的名字来传入实参的方式，如果使用了形参名字，那么传参顺序就可和定义顺序不同</li><li><strong>要求位置参数必须在关键字参数之前</strong>传入，位置参数是按位置对应的<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">f</span><span class="params">(x, y, z)</span>:</span></span><br><span class="line"><span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line">f(z=<span class="literal">None</span>, y=<span class="number">10</span>, x=[<span class="number">1</span>])</span><br><span class="line">f((<span class="number">1</span>,), z=<span class="number">6</span>, y=<span class="number">4.1</span>)</span><br><span class="line">f(y=<span class="number">5</span>, z=<span class="number">6</span>, <span class="number">2</span>) <span class="comment">#错误传参</span></span><br></pre></td></tr></table></figure></li></ul><h3 id="参数缺省值"><a href="#参数缺省值" class="headerlink" title="参数缺省值"></a>参数缺省值</h3><p>缺省值也称为默认值，可以在函数定义时，为形参增加一个缺省值。其作用：</p><ul><li>参数的默认值可以在未传入足够的实参的时候，对没有给定的参数赋值为默认值</li><li>参数非常多的时候，并不需要用户每次都输入所有的参数，简化函数调用</li><li>可在定义缺省值时，将不常修改的缺省值放在其他缺省值后<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">add</span><span class="params">(x=<span class="number">4</span>, y=<span class="number">5</span>)</span>:</span></span><br><span class="line"><span class="keyword">return</span> x+y</span><br></pre></td></tr></table></figure></li></ul><p>测试调用:<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#用print()测一下输出结果是多少</span></span><br><span class="line">add()<span class="number">9</span></span><br><span class="line">add(x=<span class="number">5</span>)<span class="number">10</span></span><br><span class="line">add(y=<span class="number">7</span>)<span class="number">11</span></span><br><span class="line">add(<span class="number">6</span>, <span class="number">10</span>)<span class="number">16</span></span><br><span class="line">(add(<span class="number">6</span>, y=<span class="number">7</span>)<span class="number">13</span></span><br><span class="line">add(x=<span class="number">5</span>, y=<span class="number">6</span>)<span class="number">11</span></span><br><span class="line">add(y=<span class="number">5</span>, x=<span class="number">6</span>)<span class="number">11</span></span><br><span class="line">add(x=<span class="number">5</span>, <span class="number">6</span>)<span class="comment">#SyntaxError</span></span><br><span class="line">add(y=<span class="number">8</span>, <span class="number">4</span>)<span class="comment">#SyntaxError</span></span><br><span class="line">add(<span class="number">8</span>, x=<span class="number">4</span>)<span class="comment">#TypeError</span></span><br></pre></td></tr></table></figure></p><p>def add(x, y=5)，这样可以定义<br>def add(x=4, y)，这样定义会报错SyntaxError</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 定义一个函数login，参数名称为lost、port、username、password</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">login</span><span class="params">(host=<span class="string">'192.168.1.1'</span>, port=<span class="string">'8080'</span>, username=<span class="string">'luqx'</span>,password=<span class="string">'luqx'</span>)</span>:</span></span><br><span class="line">    print(<span class="string">'&#123;&#125;:&#123;&#125;@&#123;&#125;/&#123;&#125;'</span>.format(host, port, username, password))</span><br><span class="line"></span><br><span class="line">login()</span><br><span class="line">login(<span class="string">'127,0,0,1'</span>, <span class="number">80</span>, <span class="string">'tom'</span>, <span class="string">'tom'</span>)</span><br><span class="line">login(<span class="string">'127.0.0.1'</span>, port=<span class="number">80</span>, password=<span class="string">'com'</span>)</span><br><span class="line">login(<span class="string">'localhost'</span>, port=<span class="number">80</span>, password=<span class="string">'com'</span>)</span><br><span class="line">login(port=<span class="number">80</span>, password=<span class="string">'magedu'</span>, host=<span class="string">'www'</span>)</span><br></pre></td></tr></table></figure><p>输出结果<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">192.168</span><span class="number">.1</span><span class="number">.1</span>:<span class="number">8080</span>@luqx/luqx</span><br><span class="line"><span class="number">127</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">1</span>:<span class="number">80</span>@tom/tom</span><br><span class="line"><span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">80</span>@luqx/com</span><br><span class="line">localhost:<span class="number">80</span>@luqx/com</span><br><span class="line">www:<span class="number">80</span>@luqx/magedu</span><br></pre></td></tr></table></figure></p><h2 id="可变参数"><a href="#可变参数" class="headerlink" title="可变参数"></a>可变参数</h2><ul><li>需求：写一个函数，可以对多个数累加求和<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">sum</span><span class="params">(iterable)</span>:</span></span><br><span class="line">    sum = <span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span> x <span class="keyword">in</span> iterable:</span><br><span class="line">        sum += x</span><br><span class="line">    <span class="keyword">return</span> sum</span><br><span class="line"></span><br><span class="line">print(sum([<span class="number">1</span>,<span class="number">2</span>,<span class="number">5</span>]))</span><br><span class="line">print(sum(range(<span class="number">4</span>)))</span><br></pre></td></tr></table></figure></li></ul><p>输出结果<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">8</span></span><br><span class="line"><span class="number">6</span></span><br></pre></td></tr></table></figure></p><ul><li>上例，传入可迭代对象，并累加每一个元素</li><li>也可以使用可变参数完成上面的参数<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">sum</span><span class="params">(*nums)</span>:</span></span><br><span class="line">    sum = <span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span> x <span class="keyword">in</span> nums:</span><br><span class="line">        sum += x</span><br><span class="line">    <span class="keyword">return</span> sum</span><br></pre></td></tr></table></figure></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">9</span></span><br><span class="line"><span class="number">6</span></span><br></pre></td></tr></table></figure><h3 id="可变位置参数"><a href="#可变位置参数" class="headerlink" title="可变位置参数"></a>可变位置参数</h3><ul><li>在形参前使用 * 表示该形参是可变位置参数，可以接受多个实参</li><li>它将收集来的实参组织到一个tuple中<h3 id="可变关键字参数"><a href="#可变关键字参数" class="headerlink" title="可变关键字参数"></a>可变关键字参数</h3></li><li>在形参前使用 ** 表示该形参是可变关键字参数，可以接受多个关键字参数</li><li>它将收集来的实参的名称和值，组织到一个dict中<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">showconfig</span><span class="params">(**kwargs)</span>:</span></span><br><span class="line">    <span class="keyword">for</span> k, v <span class="keyword">in</span> kwargs.items():</span><br><span class="line">        print(<span class="string">"&#123;&#125;=&#123;&#125;"</span>.format(k,v), end=<span class="string">','</span>)</span><br><span class="line"></span><br><span class="line">showconfig(host=<span class="string">'192.168.1.1'</span>, port=<span class="number">8080</span>, username=<span class="string">'tom'</span>, password=<span class="string">'tom'</span>)</span><br></pre></td></tr></table></figure></li></ul><p>输出结果<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">host=<span class="number">192.168</span><span class="number">.1</span><span class="number">.1</span>,port=<span class="number">8080</span>,username=tom,password=tom,</span><br></pre></td></tr></table></figure></p><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><ul><li>有可变位置参数和可变关键字参数</li><li>可变位置参数在形参前使用一个星号 *</li><li>可变关键字参数在形参前使用两个星号 **</li><li>可变位置参数和可变关键字参数都可以收集若干个实参,可变位置参数收集形成一个tuple，可变关键字参数收集形成一个dict</li><li>混合使用参数的时候，普通参数需要放到参数列表前面，可变参数要放到参数列表的后面，可变位置参数需要在可变关键字参数之前</li><li>例:<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">fn</span><span class="params">(x, y, *args, **kwargs)</span>:</span></span><br><span class="line">    print(x, y, args, kwargs, sep=<span class="string">'\n'</span>, end=<span class="string">'\n\n'</span>)</span><br><span class="line"></span><br><span class="line">fn(<span class="number">3</span>, <span class="number">5</span>, <span class="number">7</span>, <span class="number">9</span>, <span class="number">10</span>, a=<span class="number">1</span>, b=<span class="string">'abc'</span>)</span><br><span class="line">fn(<span class="number">3</span>, <span class="number">5</span>)</span><br><span class="line">fn(<span class="number">3</span>, <span class="number">5</span>, <span class="number">7</span>)</span><br><span class="line">fn(<span class="number">3</span>, <span class="number">5</span>, a=<span class="number">1</span>, b=<span class="string">'abc'</span>)</span><br><span class="line">fn(x=<span class="number">3</span>, y=<span class="number">8</span>, <span class="number">97</span>, a=<span class="number">1</span>, b=<span class="string">'abc'</span>) <span class="comment"># 错误传参，位置传参必须在关键字传参之前</span></span><br><span class="line">fn(<span class="number">7</span>, <span class="number">9</span>, y=<span class="number">5</span>, x=<span class="number">3</span>, a=<span class="number">1</span>, b=<span class="string">'abc'</span>) <span class="comment"># 错误传参，7、9已按位置传参，y=5，x=3有重复传参</span></span><br></pre></td></tr></table></figure></li></ul><h2 id="keywoed-only-参数"><a href="#keywoed-only-参数" class="headerlink" title="keywoed-only 参数"></a>keywoed-only 参数</h2><ul><li>在Python3之后，新增了keyword-only参数</li><li><p>keywoed-only参数：在形参定义时，在一个*星号之后，或一个可变位置参数之后，出现的普通参数，就已经不是普通的参数了，称为keyword-only参数</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">fn</span><span class="params">(*args,x)</span>:</span></span><br><span class="line">    print(x, args, sep=<span class="string">'\n'</span>, end<span class="string">'\n\n'</span>)</span><br><span class="line"></span><br><span class="line">fn(<span class="number">3</span>, <span class="number">5</span>) <span class="comment"># 传参有误</span></span><br><span class="line">fn(<span class="number">3</span>, <span class="number">5</span>, <span class="number">7</span>) <span class="comment"># 传参有误</span></span><br><span class="line">fn(<span class="number">3</span>, <span class="number">5</span>, x=<span class="number">7</span>)</span><br></pre></td></tr></table></figure></li><li><p>keyword-only参数，言下之意就是这个参数必须采用关键字传参</p></li><li>可以认为，上例中，args可变位置参数已经获取了所有位置参数，其后的变量x不可能通过位置传参传入了</li><li><p>思考：def fn(**kwargs, x) 可以吗?</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">fn</span><span class="params">(**kwargs, x)</span>:</span></span><br><span class="line">print(x, kwargs, sep=<span class="string">'\m'</span>, end=<span class="string">'\n\n'</span>)</span><br></pre></td></tr></table></figure></li><li><p>这样传参会直接报语法错误</p></li><li>可以认为，kwargs会截取所有关键字传参，就算写了x=5，x也没有机会得到这个值，所以这种语法不存在</li><li>keyword-only参数另一种形式</li></ul><ul><li>星号后所有的普通参数都称为了keyword-only参数<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">fn</span><span class="params">(*, x, y)</span>:</span></span><br><span class="line">print(x, y)</span><br><span class="line"></span><br><span class="line">fn(x=<span class="number">6</span>, y=<span class="number">7</span>)</span><br><span class="line">fn(y=<span class="number">8</span>, x=<span class="number">9</span>)</span><br></pre></td></tr></table></figure></li></ul><h2 id="参数的混合使用"><a href="#参数的混合使用" class="headerlink" title="参数的混合使用"></a>参数的混合使用</h2><ul><li><p>可变位置参数、keyword-only参数、缺省值</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">fn</span><span class="params">(*args, x=<span class="number">5</span>)</span>:</span></span><br><span class="line">    print(x)</span><br><span class="line">    print(args)</span><br><span class="line"></span><br><span class="line">fn() <span class="comment"># 等价于fn(x=5) # 返回值 5 ()</span></span><br><span class="line">fn(<span class="number">5</span>) <span class="comment"># 返回值 5 (5,)</span></span><br><span class="line">fn(x=<span class="number">6</span>) <span class="comment"># 6 ()</span></span><br><span class="line">fn(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, x=<span class="number">10</span>) <span class="number">10</span> (<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>)</span><br></pre></td></tr></table></figure></li><li><p>普通参数、可变位置参数、keyword-only参数、缺省值</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">fn</span><span class="params">(y, *args, x=<span class="number">5</span>)</span>:</span></span><br><span class="line">    print(<span class="string">"x=&#123;&#125;, y=&#123;&#125;"</span>.format(x, y))</span><br><span class="line">    print(args)</span><br><span class="line">fn() <span class="comment"># 错误传参 y未传参</span></span><br><span class="line">fn(<span class="number">5</span>)  </span><br><span class="line">fn(<span class="number">5</span>, <span class="number">8</span>)</span><br><span class="line">fn(x=<span class="number">6</span>) <span class="comment"># 错误传参</span></span><br><span class="line">fn(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, x=<span class="number">10</span>)  </span><br><span class="line">fn(y=<span class="number">17</span>, <span class="number">2</span>, <span class="number">3</span>, x= <span class="number">10</span>) <span class="comment"># 错误传参，关键字传参不允许在位置传参前</span></span><br><span class="line">fn(<span class="number">1</span>, <span class="number">2</span>, y=<span class="number">3</span>, x=<span class="number">10</span>) <span class="comment"># 错误传参，y已经有赋值1，y=3重复传参</span></span><br></pre></td></tr></table></figure></li><li><p>普通参数、缺省值、可变位置参数</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">fn</span><span class="params">(x=<span class="number">5</span>, **kwargs )</span>:</span></span><br><span class="line">    print(<span class="string">"x=&#123;&#125;"</span>.format(x))</span><br><span class="line">    print(kwargs)</span><br><span class="line">fn()x=<span class="number">5</span>&#123;&#125;</span><br><span class="line">fn(<span class="number">5</span>)x=<span class="number">5</span>&#123;&#125;</span><br><span class="line">fn(x=<span class="number">6</span>)x=<span class="number">6</span>&#123;&#125;</span><br><span class="line">fn(y=<span class="number">3</span>, x=<span class="number">10</span>)x=<span class="number">10</span>&#123;<span class="string">'y'</span>: <span class="number">3</span>&#125;</span><br><span class="line">fn(<span class="number">3</span>, y=<span class="number">10</span>)x=<span class="number">3</span>&#123;<span class="string">'y'</span>: <span class="number">10</span>&#125;</span><br><span class="line">fn(y=<span class="number">3</span>, z=<span class="number">20</span>)x=<span class="number">5</span>&#123;<span class="string">'y'</span>: <span class="number">3</span>, <span class="string">'z'</span>: <span class="number">20</span>&#125;</span><br></pre></td></tr></table></figure></li></ul><h2 id="参数规则"><a href="#参数规则" class="headerlink" title="参数规则"></a>参数规则</h2><ul><li>参数列表参数一般顺序是：普通参数、缺省参数、可变位置参数、keyword-only参数（可带缺省值）、可变关键字参数</li><li>注意：<br>代码应该易读易懂，而不是为难别人<br>请按照书写习惯定义函数参数<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">fn</span><span class="params">(x, y, z=<span class="number">3</span>, *args, m=<span class="number">4</span>, n, **kwargs)</span>:</span></span><br><span class="line">    print(x, y, z, m ,n)</span><br><span class="line">    print(args)</span><br><span class="line">    print(kwargs)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">connect</span><span class="params">(host=<span class="string">'localhost'</span>, port=<span class="string">'3306'</span>, user=<span class="string">'tom'</span>,password=<span class="string">'tom'</span>,**kwargs)</span>:</span></span><br><span class="line">    print(host, port)</span><br><span class="line">    print(user, password)</span><br><span class="line">    print(kwargs)</span><br><span class="line">connect(db=<span class="string">'cmdb'</span>)</span><br><span class="line">connect(host=<span class="string">'192.168.1.123'</span>, db=<span class="string">'cmdb'</span>)</span><br><span class="line">connect(host=<span class="string">'192.168.1.123'</span>, db=<span class="string">'cmdb'</span>,password=<span class="string">'mysql'</span>)</span><br></pre></td></tr></table></figure></li></ul><p>输出结果:<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">localhost <span class="number">3306</span></span><br><span class="line">tom tom</span><br><span class="line">&#123;<span class="string">'db'</span>: <span class="string">'cmdb'</span>&#125;</span><br><span class="line"><span class="number">192.168</span><span class="number">.1</span><span class="number">.123</span> <span class="number">3306</span></span><br><span class="line">tom tom</span><br><span class="line">&#123;<span class="string">'db'</span>: <span class="string">'cmdb'</span>&#125;</span><br><span class="line"><span class="number">192.168</span><span class="number">.1</span><span class="number">.123</span> <span class="number">3306</span></span><br><span class="line">tom mysql</span><br><span class="line">&#123;<span class="string">'db'</span>: <span class="string">'cmdb'</span>&#125;</span><br></pre></td></tr></table></figure></p><ul><li>定义最常用参数为普通参数，可不提供缺省值，必须由用户提供，注意这些参数的顺序，最常用的先定义</li><li>必须使用名称的才能使用的参数，定义为keyword-only，要求必须使用关键字传参</li><li>如果函数有很多参数，无法逐一定义，可使用可变参数。如果需要知道这些参数的意义，则使用可变关键字参数收集</li></ul><h2 id="参数结构"><a href="#参数结构" class="headerlink" title="参数结构"></a>参数结构</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">add</span><span class="params">(x, y)</span>:</span></span><br><span class="line">    print(x, y)</span><br><span class="line">    <span class="keyword">return</span> x +y</span><br><span class="line"></span><br><span class="line">add(<span class="number">4</span>, <span class="number">5</span>)</span><br><span class="line">add((<span class="number">4</span>, <span class="number">5</span>)) <span class="comment"># 传参错误,只传了一个参数(4, 5)</span></span><br><span class="line">t = <span class="number">4</span>, <span class="number">5</span></span><br><span class="line">add(t[<span class="number">0</span>], t[<span class="number">1</span>])</span><br><span class="line"><span class="comment"># 将参数结构，分为两个参数</span></span><br><span class="line">add(*t)</span><br><span class="line">add(*(<span class="number">4</span>, <span class="number">5</span>))</span><br><span class="line">add(*[<span class="number">4</span>, <span class="number">5</span>])</span><br><span class="line">add(*&#123;<span class="number">4</span>, <span class="number">5</span>&#125;)</span><br><span class="line">add(*range(<span class="number">4</span>, <span class="number">6</span>))</span><br></pre></td></tr></table></figure><p>结果都为4, 5<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">add(*&#123;<span class="string">'a'</span>:<span class="number">100</span>, <span class="string">'b'</span>:<span class="number">11</span>&#125;) <span class="comment">#结果为 ab 等价于 a,b</span></span><br><span class="line">add(**&#123;<span class="string">'a'</span>:<span class="number">10</span>, <span class="string">'b'</span>:<span class="number">11</span>&#125;) <span class="comment"># 错误，**为结构成关键字传参，定义的函数中形参并没有a，b</span></span><br><span class="line">add(**&#123;<span class="string">'x'</span>:<span class="number">10</span>, <span class="string">'y'</span>:<span class="number">11</span>&#125;)结果为<span class="number">10</span><span class="number">11</span> 等价于,x=<span class="number">10</span>,y=<span class="number">11</span></span><br></pre></td></tr></table></figure></p><ul><li>在给函数提供实参的时候，可以在可迭代对象前使用* 或者  ** 来进行结构的解构，提取出其中所有元素作为函数的实参</li><li>使用 * 解构成位置传参</li><li>使用 ** 解构成关键字传参</li><li>提取出来的元素数目要和参数的要求匹配<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">add</span><span class="params">(*iterable)</span>:</span></span><br><span class="line">    result = <span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span> x <span class="keyword">in</span> iterable:</span><br><span class="line">        result += x</span><br><span class="line">    print(result)</span><br><span class="line"></span><br><span class="line">add(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>)<span class="comment"># 6</span></span><br><span class="line">add(*[<span class="number">1</span>, <span class="number">3</span>, <span class="number">5</span>])<span class="comment"># 9</span></span><br><span class="line">add(*range(<span class="number">5</span>))<span class="comment">#10</span></span><br></pre></td></tr></table></figure></li></ul><h2 id="练习"><a href="#练习" class="headerlink" title="练习"></a>练习</h2><p>1、编写一个函数，能够接受至少2个参数，返回最小值和最大值<br>2、完成一个函数，可以接受输入的多个数，每一次都能返回到目前为止的最大值、最小值</p><h2 id="答案"><a href="#答案" class="headerlink" title="答案"></a>答案</h2><ul><li>第一题答案<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">select</span><span class="params">(x,y,*args)</span>:</span></span><br><span class="line">    print(x, y, args)</span><br><span class="line">    <span class="keyword">return</span> max(x, y, *args), min(x, y, *args)</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> random</span><br><span class="line">print(*select(*[random.randint(<span class="number">10</span>,<span class="number">20</span>) <span class="keyword">for</span> i <span class="keyword">in</span> range(random.randint(<span class="number">2</span>, <span class="number">10</span>))]))</span><br></pre></td></tr></table></figure></li></ul><p>解析：利用max与min函数求极值， 利用random.randint生成随机数， 利用 * 结构可迭代对象</p><ul><li>第二题答案<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">double_values</span><span class="params">()</span>:</span></span><br><span class="line">    max_ = min_ = <span class="literal">None</span></span><br><span class="line">    <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">        x = input(<span class="string">'&gt;&gt;&gt;'</span>)</span><br><span class="line">        nums = [int(c) <span class="keyword">for</span> c <span class="keyword">in</span> x.replace(<span class="string">','</span>, <span class="string">' '</span>).split()]</span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> nums:</span><br><span class="line">            <span class="keyword">continue</span></span><br><span class="line">        <span class="keyword">if</span> max_ <span class="keyword">is</span> <span class="literal">None</span>:</span><br><span class="line">            max_ = min_ = nums[<span class="number">0</span>]</span><br><span class="line">        max_ = max(max_, *nums)</span><br><span class="line">        min_ = min(min_, *nums)</span><br><span class="line">        print(max_, min_)</span><br><span class="line"></span><br><span class="line">double_values()</span><br></pre></td></tr></table></figure></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;@&lt;a href&gt;TOC&lt;/a&gt;&lt;/p&gt;
&lt;h1 id=&quot;Python函数&quot;&gt;&lt;a href=&quot;#Python函数&quot; class=&quot;headerlink&quot; title=&quot;Python函数&quot;&gt;&lt;/a&gt;Python函数&lt;/h1&gt;&lt;h2 id=&quot;函数&quot;&gt;&lt;a href=&quot;#函数&quot;
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title></title>
    <link href="https://hubhack.github.io/%E5%90%8E%E7%AB%AF/python/%E5%9F%BA%E7%A1%80/Python-%E8%A3%85%E9%A5%B0%E5%99%A8%E7%9A%84%E5%BA%94%E7%94%A8%EF%BC%88%E5%91%BD%E4%BB%A4%E5%88%86%E5%8F%91%E5%99%A8%EF%BC%89/"/>
    <id>https://hubhack.github.io/后端/python/基础/Python-装饰器的应用（命令分发器）/</id>
    <published>2019-08-22T03:06:41.533Z</published>
    <updated>2019-08-19T01:39:59.940Z</updated>
    
    <content type="html"><![CDATA[<p>@<a href>TOC</a></p><h1 id="写一个命令分发器"><a href="#写一个命令分发器" class="headerlink" title="写一个命令分发器"></a>写一个命令分发器</h1><ul><li>程序员可以方便的注册函数到某一个命令，用户输入命令时，路由到注册的函数</li><li>如果此命令没有对应的注册函数，执行默认函数</li><li>用户输入用input(“&gt;&gt;”)</li></ul><h2 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h2><ul><li>输入命令映射到一个函数，并执行这个函数。应该是cmd_tbl[cmd] = fn的形式，字典正好合适</li><li>如果输入了某一个cmd命令后，没有找到函数，就要调用缺省的函数执行，这正好是字典缺省参数</li><li><p>cmd是字符串</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 构建全局字典</span></span><br><span class="line">cmd_table = &#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 注册函数</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">reg</span><span class="params">(cmd, fn)</span>:</span></span><br><span class="line">    cmd_table[cmd] = fn</span><br><span class="line"></span><br><span class="line"><span class="comment"># 缺省函数</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">default_func</span><span class="params">()</span>:</span></span><br><span class="line">    print(<span class="string">'Unknown command'</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 分发器，调度</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">dispatcher</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">        cmd = input(<span class="string">"&gt;&gt;"</span>)</span><br><span class="line">        <span class="comment"># 退出条件</span></span><br><span class="line">        <span class="keyword">if</span> cmd.strip() == <span class="string">''</span>:</span><br><span class="line">            <span class="keyword">return</span></span><br><span class="line">        cmd_table.get(cmd, default_func)() <span class="comment"># get，当cmd不存在时,使用缺省值defaul_func</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 自定义函数</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">foo1</span><span class="params">()</span>:</span></span><br><span class="line">    print(<span class="string">'hello'</span>)</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">foo2</span><span class="params">()</span>:</span></span><br><span class="line">    print(<span class="string">'python'</span>)</span><br><span class="line">    </span><br><span class="line"><span class="comment"># 注册</span></span><br><span class="line">reg(<span class="string">'hi'</span>, foo1)</span><br><span class="line">reg(<span class="string">'py'</span>, foo2)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 循环</span></span><br><span class="line">dispatcher()</span><br></pre></td></tr></table></figure></li><li><p>分析：</p></li></ul><ol><li>代码函数的注册不好看</li><li>所有的函数和字典都在全局中定义，不好</li></ol><ul><li>改进办法<h2 id="封装"><a href="#封装" class="headerlink" title="封装"></a>封装</h2></li><li>将reg函数封装成装饰器，并用它来注册函数<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">command_dispatcher</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="comment"># 构建全局字典</span></span><br><span class="line">    cmd_table = &#123;&#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 注册函数</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">reg</span><span class="params">(cmd)</span>:</span></span><br><span class="line">        <span class="function"><span class="keyword">def</span> <span class="title">_reg</span><span class="params">(fn)</span>:</span></span><br><span class="line">            cmd_table[cmd] = fn</span><br><span class="line">            <span class="keyword">return</span> fn</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> _reg</span><br><span class="line">    <span class="comment"># 缺省函数</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">default_func</span><span class="params">()</span>:</span></span><br><span class="line">        print(<span class="string">'Unknown command'</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 分发器，调度</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">dispatcher</span><span class="params">()</span>:</span></span><br><span class="line">        <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">            cmd = input(<span class="string">"&gt;&gt;"</span>)</span><br><span class="line">            <span class="comment"># 退出条件</span></span><br><span class="line">            <span class="keyword">if</span> cmd.strip() == <span class="string">''</span>:</span><br><span class="line">                <span class="keyword">return</span></span><br><span class="line">            cmd_table.get(cmd, default_func)()</span><br><span class="line">            <span class="comment"># get,当cmd不存在时,使用缺省值defaul_func</span></span><br><span class="line">    <span class="keyword">return</span> reg,dispatcher <span class="comment"># 把两个函数标识符(分别对应函数)封装到元组中</span></span><br><span class="line"></span><br><span class="line">reg, dispatcher = command_dispatcher() <span class="comment"># 将两个函数解构</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 自定义函数</span></span><br><span class="line"><span class="meta">@reg('hi')</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">foo1</span><span class="params">()</span>:</span></span><br><span class="line">    print(<span class="string">'hello'</span>)</span><br><span class="line"></span><br><span class="line"><span class="meta">@reg('py')</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">foo2</span><span class="params">()</span>:</span></span><br><span class="line">    print(<span class="string">'python'</span>)</span><br><span class="line">    </span><br><span class="line"><span class="comment"># 循环</span></span><br><span class="line">dispatcher()</span><br></pre></td></tr></table></figure></li></ul><h1 id="完善命令分发器"><a href="#完善命令分发器" class="headerlink" title="完善命令分发器"></a>完善命令分发器</h1><ul><li>完善命令分发器，实现函数可以带任意参数（可变参数除外），解析参数并要求用户输入</li><li>即解决下面的问题<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 自定义函数</span></span><br><span class="line"><span class="meta">@reg('hi')</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">foo1</span><span class="params">(x,y)</span>:</span></span><br><span class="line">print(<span class="string">'hello'</span>, x,  y)</span><br><span class="line"></span><br><span class="line"><span class="meta">@reg('py')</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">foo2</span><span class="params">(a,=<span class="number">100</span>)</span>:</span></span><br><span class="line">print(<span class="string">'python'</span>, a, b)</span><br></pre></td></tr></table></figure></li></ul><h2 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h2><ul><li>可以有2中方式</li></ul><ol><li>注册的时候，固定死，@reg(‘py’,200,100)<br>可以认为@reg(‘py’,200,100)和@reg(‘py’,300,100)是不同的函数，可以用partial函数</li><li>运行时，在输入cmd的时候，逗号或空格分割，获取参数</li></ol><ul><li>一般用户都喜欢使用单纯一个命令如hi，然后直接显示想要的结构，就采用方式一实现<h2 id="方式一实现"><a href="#方式一实现" class="headerlink" title="方式一实现"></a>方式一实现</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 自定义函数可以有任意参数,可变参数、keyword-only除外</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">command_dispatcher</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="comment"># 构建全局字典</span></span><br><span class="line">    cmd_tbl = &#123;&#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 注册函数</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">reg</span><span class="params">(cmd, *args, **kwargs)</span>:</span></span><br><span class="line">        <span class="function"><span class="keyword">def</span> <span class="title">_reg</span><span class="params">(fn)</span>:</span></span><br><span class="line">            cmd_tbl[cmd] = fn, args, kwargs</span><br><span class="line">            <span class="keyword">return</span> fn</span><br><span class="line">        <span class="keyword">return</span> _reg</span><br><span class="line">    <span class="comment"># 缺省函数</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">default_func</span><span class="params">()</span>:</span></span><br><span class="line">        print(<span class="string">'Uknown command'</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 调度器</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">dispatcher</span><span class="params">()</span>:</span></span><br><span class="line">        <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">            cmd = input(<span class="string">'please input cmd&gt;&gt;'</span>)</span><br><span class="line">            <span class="comment"># 退出条件</span></span><br><span class="line">            <span class="keyword">if</span> cmd.strip() == <span class="string">''</span>:</span><br><span class="line">                <span class="keyword">return</span></span><br><span class="line"></span><br><span class="line">            fn, args, kwargs = cmd_tbl.get(cmd, (default_func, (), &#123;&#125;)) </span><br><span class="line">            <span class="comment"># get,当cmd不存在时,使用缺省值(defaul_func, (), &#123;&#125;) ，并将其解构，fn对应default_func...</span></span><br><span class="line">            fn(*args,**kwargs) <span class="comment"># 调用cmd[0]或default_func函数</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> reg,dispatcher</span><br><span class="line"></span><br><span class="line">reg, dispatcher = command_dispatcher()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 自定义函数</span></span><br><span class="line"><span class="meta">@reg('hi', z=200, y=300, x=100)</span></span><br><span class="line"><span class="meta">@reg('hi1', z=300, y=300, x=300)</span></span><br><span class="line"><span class="meta">@reg('hi2', 1, 2, 3)</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">foo1</span><span class="params">(x, y, z)</span>:</span></span><br><span class="line">    print(<span class="string">'hello'</span>,x, y, z)</span><br><span class="line"></span><br><span class="line"><span class="meta">@reg('py', 300, b=400)</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">foo2</span><span class="params">(a, b=<span class="number">100</span>)</span>:</span></span><br><span class="line">    print(<span class="string">'python'</span>, a, b)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 调度循环</span></span><br><span class="line">dispatcher()</span><br><span class="line">```python</span><br><span class="line"><span class="comment">## 方法二实现</span></span><br></pre></td></tr></table></figure></li></ul><h1 id="自定义函数可以有任意参数-可变参数、keyword-only除外"><a href="#自定义函数可以有任意参数-可变参数、keyword-only除外" class="headerlink" title="自定义函数可以有任意参数,可变参数、keyword-only除外"></a>自定义函数可以有任意参数,可变参数、keyword-only除外</h1><p>def command_dispatcher():</p><pre><code># 构建全局字典commands = {}</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 注册函数</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">reg</span><span class="params">(cmd)</span>:</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">_reg</span><span class="params">(fn)</span>:</span></span><br><span class="line">    commands[cmd] = fn</span><br><span class="line">        <span class="keyword">return</span> fn</span><br><span class="line">    <span class="keyword">return</span> _reg</span><br><span class="line"><span class="comment"># 缺省函数</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">default_fn</span><span class="params">(*args,**kwargs)</span>:</span></span><br><span class="line">print(<span class="string">'Uknown command'</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 调度器</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">dispatcher</span><span class="params">()</span>:</span></span><br><span class="line"><span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">    cmd = input(<span class="string">'&gt;&gt;'</span>)</span><br><span class="line">    <span class="comment"># 退出条件</span></span><br><span class="line">    <span class="keyword">if</span> cmd.strip() == <span class="string">''</span>:</span><br><span class="line">    <span class="keyword">break</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">    fname, *params = cmd.replace(<span class="string">','</span>, <span class="string">' '</span>).split() <span class="comment">#list</span></span><br><span class="line">        <span class="comment">#print(params) # ['1', 'y=5']</span></span><br><span class="line">        args = []</span><br><span class="line">        kwargs = &#123;&#125;</span><br><span class="line">        <span class="keyword">for</span> param <span class="keyword">in</span> params:</span><br><span class="line">        x = param.split(<span class="string">'='</span>, maxsplit=<span class="number">1</span>) <span class="comment"># 按'='切,最大切一刀</span></span><br><span class="line">                <span class="keyword">if</span> len(x) == <span class="number">1</span>: <span class="comment"># 顺序传参</span></span><br><span class="line">                    args.append(int(x[<span class="number">0</span>]))</span><br><span class="line">                <span class="keyword">elif</span> len(x) == <span class="number">2</span>: <span class="comment"># a=1 [a,1]</span></span><br><span class="line">                    kwargs[x[<span class="number">0</span>]] = int(x[<span class="number">1</span>])</span><br><span class="line"></span><br><span class="line">            <span class="comment">#print(args, kwargs)</span></span><br><span class="line">            commands.get(fname, default_fn)(*args, **kwargs)</span><br><span class="line">    <span class="keyword">return</span> reg, dispatcher</span><br><span class="line"></span><br><span class="line">reg, dispatcher = command_dispatcher()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 自定义函数</span></span><br><span class="line"><span class="meta">@reg('hi')</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">foo1</span><span class="params">(x, y)</span>:</span></span><br><span class="line">    print(<span class="string">'hello'</span>, x, y, x+y)</span><br><span class="line"></span><br><span class="line"><span class="meta">@reg('py')</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">foo2</span><span class="params">(a, b=<span class="number">100</span>)</span>:</span></span><br><span class="line">    print(<span class="string">'python'</span>, a, b, a+b)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 调度循环</span></span><br><span class="line">dispatcher()</span><br><span class="line"></span><br><span class="line"><span class="comment"># &gt;&gt; py 200 300</span></span><br><span class="line"><span class="comment"># &gt;&gt; py 200</span></span><br><span class="line"><span class="comment"># &gt;&gt; py 200,y=200</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;@&lt;a href&gt;TOC&lt;/a&gt;&lt;/p&gt;
&lt;h1 id=&quot;写一个命令分发器&quot;&gt;&lt;a href=&quot;#写一个命令分发器&quot; class=&quot;headerlink&quot; title=&quot;写一个命令分发器&quot;&gt;&lt;/a&gt;写一个命令分发器&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;程序员可以方便的注册函数到某一个
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title></title>
    <link href="https://hubhack.github.io/%E5%90%8E%E7%AB%AF/python/%E5%9F%BA%E7%A1%80/Python-%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F%EF%BC%88re%E6%A8%A1%E5%9D%97%EF%BC%89/"/>
    <id>https://hubhack.github.io/后端/python/基础/Python-正则表达式（re模块）/</id>
    <published>2019-08-22T03:06:41.528Z</published>
    <updated>2019-08-19T01:38:52.639Z</updated>
    
    <content type="html"><![CDATA[<p>@<a href="正则表达式（re模块）">TOC</a><br>Python使用re模块提供了正则表达式处理的能力</p><h1 id="常量"><a href="#常量" class="headerlink" title="常量"></a>常量</h1><p><img src="https://img-blog.csdnimg.cn/20190508105658984.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3B5dGhvbl9scXg=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h1 id="多重选项"><a href="#多重选项" class="headerlink" title="多重选项"></a>多重选项</h1><ul><li>使用 | 位或 运算开启多重选项</li><li>如果单独存在，设计为1-9 如果多个存在，设置为1,2,4,8,16..<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">impoet re</span><br><span class="line"></span><br><span class="line">re.M | re.S</span><br></pre></td></tr></table></figure></li></ul><h1 id="方法"><a href="#方法" class="headerlink" title="方法"></a>方法</h1><h2 id="编译"><a href="#编译" class="headerlink" title="编译"></a>编译</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">re.compile(pattern, flags=<span class="number">0</span>)</span><br></pre></td></tr></table></figure><ul><li>设定flags，编译模式，返回正则表达式对象regex</li><li>pattern就是正则表达式字符串，flags是选项，指代当前工作模式。正则表达式需要被编译，为了提高效率，这些编译后的结果被保存，下次使用同样的pattern的时候，就不需要再次编译</li><li>re的其他方法为了提高效率都调用了编译方法，就是为了提速<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 先编译在操作</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> re</span><br><span class="line"></span><br><span class="line">s = <span class="string">'apple\nbig'</span></span><br><span class="line">regex = re.compile(<span class="string">'^a'</span>, re.M)</span><br><span class="line">r = regex.match(s)</span><br><span class="line">print(s)</span><br></pre></td></tr></table></figure></li></ul><h2 id="单次匹配"><a href="#单次匹配" class="headerlink" title="单次匹配"></a>单次匹配</h2><h3 id="match"><a href="#match" class="headerlink" title="match"></a>match</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">re.match(pattern, string, flags=<span class="number">0</span>)</span><br><span class="line">regex.match(string[, pos[, endpos]])</span><br></pre></td></tr></table></figure><ul><li>match 匹配，只从开头匹配</li><li><p>regex对象match方法可以重设定开始位置和结束位置。返回match对象</p><h3 id="search"><a href="#search" class="headerlink" title="search"></a>search</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">re.search(pattern, string, flags=<span class="number">0</span>)</span><br><span class="line">regex.search(string[, pos[, endpos]])</span><br></pre></td></tr></table></figure></li><li><p>从头搜索直到第一个匹配</p></li><li><p>regex对象search方法可以重设定开始位置和结束位置，返回match对象</p><h3 id="fullmatch"><a href="#fullmatch" class="headerlink" title="fullmatch"></a>fullmatch</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">re.fullmatch(pattern, string, flags=<span class="number">0</span>)</span><br><span class="line">regex.fullmatch(string[, pos[, endpos]])</span><br></pre></td></tr></table></figure></li><li><p>全长完全匹配，整个字符串和正则表达式匹配</p><h4 id="match举例"><a href="#match举例" class="headerlink" title="match举例"></a>match举例</h4><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> re</span><br><span class="line"></span><br><span class="line">s = <span class="string">"""python\nhello\nwho"""</span></span><br><span class="line">r = re.match(<span class="string">'p'</span>, s)</span><br><span class="line">print(type(r), r) <span class="comment"># match 对象，出一个结果</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 打印结果</span></span><br><span class="line">&lt;class '_sre.SRE_Match'&gt; &lt;_sre.SRE_Match object; span=(0, 1), match='p'&gt;</span><br></pre></td></tr></table></figure></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 设置模式</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> re</span><br><span class="line"></span><br><span class="line">s = <span class="string">"""python\nhello\nwho"""</span></span><br><span class="line">r = re.match(<span class="string">'^h'</span>, s, re.M)</span><br><span class="line">print(type(r), r) <span class="comment"># match 对象，出一个结果</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 打印结果</span></span><br><span class="line"> &lt;<span class="class"><span class="keyword">class</span> '<span class="title">NoneType</span>'&gt; <span class="title">None</span></span></span><br><span class="line"><span class="class"># <span class="title">None</span>原因：虽然<span class="title">re</span>.<span class="title">M</span>为多行模式，但是<span class="title">match</span>只从头开始找</span></span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 先编译，在匹配，设置开始位置</span></span><br><span class="line"><span class="keyword">import</span> re</span><br><span class="line"></span><br><span class="line">s = <span class="string">"""python\nhello\nwho"""</span></span><br><span class="line">regex = re.compile(<span class="string">'t'</span>, re.M)</span><br><span class="line">r = regex.match(s, <span class="number">2</span>) <span class="comment"># 把索引2作为开始找</span></span><br><span class="line">print(type(r), r)</span><br><span class="line"></span><br><span class="line"><span class="comment">#打印结果</span></span><br><span class="line">&lt;class '_sre.SRE_Match'&gt; &lt;_sre.SRE_Match object; span=(2, 3), match='t'&gt;</span><br><span class="line"><span class="comment"># 只有先编译，在match，才可以调整开始位置</span></span><br></pre></td></tr></table></figure><ul><li>总结：mauch不管单行多行，只从头或指定开始索引找</li></ul><h4 id="search举例"><a href="#search举例" class="headerlink" title="search举例"></a>search举例</h4><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> re</span><br><span class="line"></span><br><span class="line">s = <span class="string">"""python\nhello\nwho"""</span></span><br><span class="line"><span class="comment">#regex = re.compile('h', re.M)</span></span><br><span class="line">r = re.search(<span class="string">'h'</span>,s) <span class="comment"># 找到python的h就停止匹配了</span></span><br><span class="line">print(type(r), r)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 打印结果</span></span><br><span class="line">&lt;class '_sre.SRE_Match'&gt; &lt;_sre.SRE_Match object; span=(3, 4), match='h'&gt;</span><br></pre></td></tr></table></figure><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 设置模式</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> re</span><br><span class="line"></span><br><span class="line">s = <span class="string">"""python\nhello\nwho"""</span></span><br><span class="line"><span class="comment">#regex = re.compile('h', re.M)</span></span><br><span class="line">r = re.search(<span class="string">'e'</span>,s, re.M)</span><br><span class="line">print(type(r), r)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 打印结果</span></span><br><span class="line">&lt;class '_sre.SRE_Match'&gt; &lt;_sre.SRE_Match object; span=(8, 9), match='e'&gt;</span><br></pre></td></tr></table></figure><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 先编译在匹配，设置开始位置</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> re</span><br><span class="line"></span><br><span class="line">s = <span class="string">"""python\nhello\nwho"""</span></span><br><span class="line">regex = re.compile(<span class="string">'h'</span>, re.M) <span class="comment"># 设置为多行模式</span></span><br><span class="line">r = regex.search(s,<span class="number">4</span>,<span class="number">9</span>) <span class="comment"># 从索引4开始，到索引8结束，[4,9)</span></span><br><span class="line">print(type(r), r)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 打印结果</span></span><br><span class="line">&lt;class '_sre.SRE_Match'&gt; &lt;_sre.SRE_Match object; span=(7, 8), match='h'&gt;</span><br></pre></td></tr></table></figure><ul><li>总结： search不管是不是多行，找到就返回<h4 id="fullmatch举例"><a href="#fullmatch举例" class="headerlink" title="fullmatch举例"></a>fullmatch举例</h4><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> re</span><br><span class="line"></span><br><span class="line">s = <span class="string">"""python\nhello\nwho"""</span></span><br><span class="line">regex = re.compile(<span class="string">'.+'</span>, re.S) <span class="comment"># .+  在单行模式下, . 点可匹配到换行符</span></span><br><span class="line">r = regex.search(s)</span><br><span class="line">print(type(r), r) <span class="comment"># match='python\nhello\nwho'</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 打印结果</span></span><br><span class="line">&lt;class '_sre.SRE_Match'&gt; &lt;_sre.SRE_Match object; span=(0, 16), match='python\nhello\nwho'&gt;</span><br></pre></td></tr></table></figure></li></ul><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> re</span><br><span class="line"></span><br><span class="line">s = <span class="string">"""python\nhello\nwho"""</span></span><br><span class="line">regex = re.compile(<span class="string">'\w+'</span>) <span class="comment"># 先编译</span></span><br><span class="line">r = regex.search(s, <span class="number">1</span>, <span class="number">3</span>) <span class="comment"># 匹配 [1,3)</span></span><br><span class="line">print(type(r), r) <span class="comment">#  match =yt</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 打印结果</span></span><br><span class="line">&lt;class '_sre.SRE_Match'&gt; &lt;_sre.SRE_Match object; span=(1, 3), match='yt'&gt;</span><br></pre></td></tr></table></figure><ul><li><p>总结：fullmatch不管单行多行模式情况下整个字符串（或指定区间）需与正则表达式匹配</p><h2 id="全文搜索"><a href="#全文搜索" class="headerlink" title="全文搜索"></a>全文搜索</h2><h3 id="findall"><a href="#findall" class="headerlink" title="findall"></a>findall</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">re.findall(pattern,string,flags=<span class="number">0</span>)</span><br><span class="line">regex.findall(string[, pos[, endpos]])</span><br></pre></td></tr></table></figure></li><li><p>对整个字符串，从左至右匹配，返回所有匹配项的列表，里面是str</p><h3 id="finditer"><a href="#finditer" class="headerlink" title="finditer"></a>finditer</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">re.finditer(pattern,string,flags=<span class="number">0</span>)</span><br><span class="line">regex.finditer(string[, pos[, endpos]])</span><br></pre></td></tr></table></figure></li><li><p>对整个字符串，从左至右匹配，返回所有匹配项，返回迭代器</p></li><li>注意每次迭代返回的是match对象<h4 id="findall举例"><a href="#findall举例" class="headerlink" title="findall举例"></a>findall举例</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> re</span><br><span class="line"></span><br><span class="line">s = <span class="string">"""python\nhello\nwho"""</span></span><br><span class="line">r= re.findall(<span class="string">'h'</span>,s)</span><br><span class="line">print(r)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 打印结果</span></span><br><span class="line">[<span class="string">'h'</span>, <span class="string">'h'</span>, <span class="string">'h'</span>]</span><br></pre></td></tr></table></figure></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 按区间匹配，需先编译</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> re</span><br><span class="line"></span><br><span class="line">s = <span class="string">"""python\nhello\nwho"""</span></span><br><span class="line">regex = re.compile(<span class="string">'h'</span>)</span><br><span class="line">r= regex.findall(s, <span class="number">3</span>,<span class="number">10</span>) <span class="comment"># 匹配 [3,10)</span></span><br><span class="line">print(r)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 打印结果</span></span><br><span class="line">[<span class="string">'h'</span>, <span class="string">'h'</span>]</span><br></pre></td></tr></table></figure><h4 id="finditer举例"><a href="#finditer举例" class="headerlink" title="finditer举例"></a>finditer举例</h4><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> re</span><br><span class="line"></span><br><span class="line">s = <span class="string">"""python\nhello\nwho"""</span></span><br><span class="line">r= re.finditer(<span class="string">'h'</span>,s)</span><br><span class="line">print(r) <span class="comment"># &lt;callable_iterator object at 0x00000000021E09B0&gt;</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> r:</span><br><span class="line">    print(type(i),i,s[i.start():i.end()]) <span class="comment"># s[i.start():i.end()] 切片拿到match值</span></span><br><span class="line"> </span><br><span class="line"> <span class="comment"># 打印结果</span></span><br><span class="line">&lt;class '_sre.SRE_Match'&gt; &lt;_sre.SRE_Match object; span=(3, 4), match='h'&gt; h</span><br><span class="line">&lt;class '_sre.SRE_Match'&gt; &lt;_sre.SRE_Match object; span=(7, 8), match='h'&gt; h</span><br><span class="line">&lt;class '_sre.SRE_Match'&gt; &lt;_sre.SRE_Match object; span=(14, 15), match='h'&gt; h</span><br></pre></td></tr></table></figure><h2 id="匹配替换"><a href="#匹配替换" class="headerlink" title="匹配替换"></a>匹配替换</h2><h3 id="sub"><a href="#sub" class="headerlink" title="sub"></a>sub</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">re.sub(pattern, replacement, string, count=<span class="number">0</span>, flags=<span class="number">0</span>)</span><br><span class="line">regex.sub(replacement, string, count=<span class="number">0</span>)</span><br></pre></td></tr></table></figure><ul><li>使用pattern对字符串string进行匹配，对匹配项使用replacement替换，返回的是str</li><li><p>replacement可是是string、bytes、function</p><h3 id="subn"><a href="#subn" class="headerlink" title="subn"></a>subn</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">re.subn(pattern, replacement, string, count=<span class="number">0</span>, flags=<span class="number">0</span>)</span><br><span class="line">regex.subn(replacement, string, count=<span class="number">0</span>)</span><br></pre></td></tr></table></figure></li><li><p>同sub返回一个元祖(new_string, number_of_subs_made)</p><h4 id="sub举例"><a href="#sub举例" class="headerlink" title="sub举例"></a>sub举例</h4><p><img src="https://img-blog.csdnimg.cn/20190508151715844.png" alt="在这里插入图片描述"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> re</span><br><span class="line"></span><br><span class="line">s = <span class="string">"""python\nhello\nwho"""</span></span><br><span class="line">r= re.sub(<span class="string">'h'</span>, <span class="string">'ab'</span>, s)</span><br><span class="line">print(type(r), r)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 打印结果</span></span><br><span class="line">&lt;<span class="class"><span class="keyword">class</span> '<span class="title">str</span>'&gt; <span class="title">pytabon</span></span></span><br><span class="line"><span class="class"><span class="title">abello</span></span></span><br><span class="line"><span class="class"><span class="title">wabo</span></span></span><br></pre></td></tr></table></figure></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 指定替换次数</span></span><br><span class="line"><span class="keyword">import</span> re</span><br><span class="line"></span><br><span class="line">s = <span class="string">"""python\nhello\nwho"""</span></span><br><span class="line">r= re.sub(<span class="string">'h'</span>, <span class="string">'ab'</span>, s, <span class="number">1</span>) <span class="comment"># 替换1次</span></span><br><span class="line">print(type(r), r)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 打印结果 # 仅python被替换为pytabon</span></span><br><span class="line">&lt;<span class="class"><span class="keyword">class</span> '<span class="title">str</span>'&gt; <span class="title">pytabon</span></span></span><br><span class="line"><span class="class"><span class="title">hello</span></span></span><br><span class="line"><span class="class"><span class="title">who</span></span></span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 先编译后替换，指定替换次数</span></span><br><span class="line"><span class="keyword">import</span> re</span><br><span class="line"></span><br><span class="line">s = <span class="string">"""python\nhello\nwho"""</span></span><br><span class="line">regex = re.compile(<span class="string">'h'</span>)</span><br><span class="line">r= regex.sub(<span class="string">'ab'</span>, s, <span class="number">2</span>) <span class="comment"># 替换2次</span></span><br><span class="line">print(type(r), r)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 打印结果 # 仅python和hello被替换</span></span><br><span class="line">&lt;<span class="class"><span class="keyword">class</span> '<span class="title">str</span>'&gt; <span class="title">pytabon</span></span></span><br><span class="line"><span class="class"><span class="title">abello</span></span></span><br><span class="line"><span class="class"><span class="title">who</span></span></span><br></pre></td></tr></table></figure><ul><li>引用分组，添加后缀或前缀<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 添加前缀</span></span><br><span class="line"><span class="keyword">import</span> re</span><br><span class="line"></span><br><span class="line">s = <span class="string">"""honey\nhello\nhi"""</span></span><br><span class="line">r= re.sub(<span class="string">'(h\w+)'</span>, <span class="string">r'python-----\1'</span>, s)</span><br><span class="line">print(r)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 打印结果</span></span><br><span class="line">python-----honey</span><br><span class="line">python-----hello</span><br><span class="line">python-----hi</span><br><span class="line"></span><br><span class="line"><span class="comment"># 添加后缀</span></span><br><span class="line">r= re.sub(<span class="string">'(h\w+)'</span>, <span class="string">r'\1------python'</span>, s)</span><br><span class="line">print(r)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 打印结果</span></span><br><span class="line">honey------python</span><br><span class="line">hello------python</span><br><span class="line">hi------python</span><br></pre></td></tr></table></figure></li></ul><h4 id="sunb举例"><a href="#sunb举例" class="headerlink" title="sunb举例"></a>sunb举例</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> re</span><br><span class="line"></span><br><span class="line">s = <span class="string">"""honey\nhello\nhi"""</span></span><br><span class="line">r= re.subn(<span class="string">'h'</span>, <span class="string">'p'</span>, s)</span><br><span class="line">print(type(r), r)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 打印结果</span></span><br><span class="line">&lt;<span class="class"><span class="keyword">class</span> '<span class="title">tuple</span>'&gt; <span class="params">(<span class="string">'poney\npello\npi'</span>, <span class="number">3</span>)</span></span></span><br><span class="line"><span class="class"></span></span><br><span class="line"><span class="class"><span class="title">for</span> <span class="title">i</span> <span class="title">in</span> <span class="title">r</span>:</span></span><br><span class="line">    print(i)</span><br><span class="line">   </span><br><span class="line"><span class="comment"># 打印结果</span></span><br><span class="line">poney</span><br><span class="line">pello</span><br><span class="line">pi</span><br><span class="line"><span class="number">3</span></span><br></pre></td></tr></table></figure><h2 id="分割字符串"><a href="#分割字符串" class="headerlink" title="分割字符串"></a>分割字符串</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">re.split(pattern, string, maxsplit=<span class="number">0</span>, flags=<span class="number">0</span>)</span><br></pre></td></tr></table></figure><ul><li>re.split 分割字符串<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> re</span><br><span class="line"></span><br><span class="line">s = <span class="string">"""</span></span><br><span class="line"><span class="string">os.path.abspath(path)</span></span><br><span class="line"><span class="string">normpath(join(os.getcwd(), path))</span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="comment"># 把每行单词提取出来</span></span><br><span class="line">print(s.split())  <span class="comment"># 做不到</span></span><br><span class="line"><span class="comment"># 打印结果</span></span><br><span class="line">[<span class="string">'os.path.abspath(path)'</span>, <span class="string">'normpath(join(os.getcwd(),'</span>, <span class="string">'path))'</span>]</span><br><span class="line"></span><br><span class="line">print(re.split(<span class="string">'[\.()\s,]+'</span>, s))</span><br><span class="line"><span class="comment"># 打印结果</span></span><br><span class="line">[<span class="string">''</span>, <span class="string">'os'</span>, <span class="string">'path'</span>, <span class="string">'abspath'</span>, <span class="string">'path'</span>, <span class="string">'normpath'</span>, <span class="string">'join'</span>, <span class="string">'os'</span>, <span class="string">'getcwd'</span>, <span class="string">'path'</span>, <span class="string">''</span>]</span><br></pre></td></tr></table></figure></li></ul><h1 id="分组"><a href="#分组" class="headerlink" title="分组"></a>分组</h1><ul><li>使用小括号的pattern捕获的数据被放到了组group中</li><li>match、search函数可以返回<strong>match对象</strong></li><li>findall返回字符穿列表；finditer返回<strong>一个个match对象</strong><h2 id="group"><a href="#group" class="headerlink" title="group()"></a>group()</h2></li><li>如果pattern中使用了分组，如果有匹配的结果，会在match对象中</li></ul><ol><li>使用group(N)方式返回对应分组，1到N是对应的分组，0返回整个匹配的字符串，N不写缺省为0</li><li>如果使用了命名分组，可以使用group(‘name’)的方式取分组</li><li>也可以使用groups()返回所有组</li><li>使用groupdict()返回所有命名的分组<h3 id="分组-1"><a href="#分组-1" class="headerlink" title="分组"></a>分组</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> re</span><br><span class="line"></span><br><span class="line">s = <span class="string">'''bottle\nbag\nbig\napple'''</span></span><br><span class="line"></span><br><span class="line">regex = re.compile(<span class="string">'(b\w+)'</span>) <span class="comment"># 先编译</span></span><br><span class="line">result = regex.match(s) <span class="comment"># 从头开始匹配一次</span></span><br><span class="line">print(type(result)) <span class="comment"># &lt;class '_sre.SRE_Match'&gt;</span></span><br><span class="line">print(result.group()) <span class="comment"># bottle</span></span><br></pre></td></tr></table></figure></li></ol><h3 id="命名分组"><a href="#命名分组" class="headerlink" title="命名分组"></a>命名分组</h3><ul><li><p>分组命名从1开始，0代表整个match对象</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> re</span><br><span class="line"></span><br><span class="line">s = <span class="string">'''bottle\nbag\nbig\napple'''</span></span><br><span class="line"></span><br><span class="line">regex = re.compile(<span class="string">'(b\w+)\n(?P&lt;name2&gt;b\w+)\n(?P&lt;name3&gt;b\w+)'</span>)</span><br><span class="line">result = regex.match(s)</span><br><span class="line"></span><br><span class="line">print(result) <span class="comment"># type(result)返回的是 &lt;class '_sre.SRE_Match'&gt;</span></span><br><span class="line"><span class="comment"># 打印结果 &lt;_sre.SRE_Match object; span=(0, 14), match='bottle\nbag\nbig'&gt;</span></span><br><span class="line"></span><br><span class="line">print(result.group(<span class="number">1</span>),result.group(<span class="number">2</span>),result.group(<span class="number">3</span>))  <span class="comment"># 通过分组索引取对应分组值</span></span><br><span class="line"><span class="comment"># 打印结果 bottle bag big</span></span><br><span class="line"></span><br><span class="line">print(result.group(<span class="string">'name2'</span>),result.group(<span class="string">'name3'</span>)) <span class="comment"># 通过命名分组名称取对应分组值</span></span><br><span class="line"><span class="comment"># 打印结果 bag big</span></span><br><span class="line"></span><br><span class="line">print(result.groupdict()) <span class="comment"># 将命名分组组成kv对放入字典</span></span><br><span class="line"><span class="comment"># 打印结果 &#123;'name2': 'bag', 'name3': 'big'&#125;</span></span><br><span class="line"></span><br><span class="line">print(result.group(<span class="number">0</span>)) <span class="comment"># 等效result.group() </span></span><br><span class="line"><span class="comment"># 打印结果</span></span><br><span class="line">bottle</span><br><span class="line">bag</span><br><span class="line">big</span><br></pre></td></tr></table></figure></li><li><p>findall用法</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> re</span><br><span class="line"></span><br><span class="line">s = <span class="string">'''bottle\nbag\nbig\napple'''</span></span><br><span class="line"></span><br><span class="line">regex = re.compile(<span class="string">'(b\w+)\n(?P&lt;name2&gt;b\w+)\n(?P&lt;name3&gt;b\w+)'</span>)</span><br><span class="line">result = regex.findall(s)</span><br><span class="line"><span class="keyword">for</span> x <span class="keyword">in</span> result:</span><br><span class="line">    print(type(x),x)</span><br><span class="line"> </span><br><span class="line"> <span class="comment"># 打印结果</span></span><br><span class="line"> &lt;<span class="class"><span class="keyword">class</span> '<span class="title">tuple</span>'&gt; <span class="params">(<span class="string">'bottle'</span>, <span class="string">'bag'</span>, <span class="string">'big'</span>)</span></span></span><br></pre></td></tr></table></figure></li><li><p>finditer用法</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> re</span><br><span class="line"></span><br><span class="line">s = <span class="string">'''bottle\nbag\nbig\napple'''</span></span><br><span class="line"></span><br><span class="line">regex = re.compile(<span class="string">'(?P&lt;head&gt;b\w+)'</span>)</span><br><span class="line">result = regex.finditer(s)</span><br><span class="line"><span class="keyword">for</span> x <span class="keyword">in</span> result:</span><br><span class="line">    print(type(x), x, x.group(), x.group(<span class="string">'head'</span>))</span><br><span class="line"> </span><br><span class="line"><span class="comment"># 打印结果</span></span><br><span class="line">&lt;class '_sre.SRE_Match'&gt; &lt;_sre.SRE_Match object; span=(0, 6), match='bottle'&gt; bottle bottle</span><br><span class="line">&lt;class '_sre.SRE_Match'&gt; &lt;_sre.SRE_Match object; span=(7, 10), match='bag'&gt; bag bag</span><br><span class="line">&lt;class '_sre.SRE_Match'&gt; &lt;_sre.SRE_Match object; span=(11, 14), match='big'&gt; big big</span><br></pre></td></tr></table></figure></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;@&lt;a href=&quot;正则表达式（re模块）&quot;&gt;TOC&lt;/a&gt;&lt;br&gt;Python使用re模块提供了正则表达式处理的能力&lt;/p&gt;
&lt;h1 id=&quot;常量&quot;&gt;&lt;a href=&quot;#常量&quot; class=&quot;headerlink&quot; title=&quot;常量&quot;&gt;&lt;/a&gt;常量&lt;/h1&gt;&lt;p&gt;&lt;im
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title></title>
    <link href="https://hubhack.github.io/%E5%90%8E%E7%AB%AF/python/%E5%9F%BA%E7%A1%80/Python-%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F/"/>
    <id>https://hubhack.github.io/后端/python/基础/Python-正则表达式/</id>
    <published>2019-08-22T03:06:41.523Z</published>
    <updated>2019-08-19T01:38:57.151Z</updated>
    
    <content type="html"><![CDATA[<p>@<a href="正则表达式">TOC</a></p><h1 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h1><ul><li>正则表达式，Regular Expression，缩写为regex、regexp、RE等。</li><li>正则表达式是文本处理极为重要的技术，用它可以对字符串按照某种规则进行检索、替换。</li><li>1970年代，Unix之父Ken Thompson将正则表达式引入到Unix中文本编辑器ed和grep命令中，由此正则表达式普及开来。</li><li>1980年后，perl语言对Henry Spencer编写的库，扩展了很多新的特性。1997年开始，Philip Hazel开发出了PCRE(Perl Compatible Regular Expressions)，它被PHP和HTTPD等工具采用。</li><li>正则表达式应用极其广泛，shell中处理文本的命令、各种高级编程语言都支持正则表达式。</li><li>参考：<a href="https://www.w3cschool.cn/regex_rmjc/" target="_blank" rel="noopener">https://www.w3cschool.cn/regex_rmjc/</a><h1 id="分类"><a href="#分类" class="headerlink" title="分类"></a>分类</h1><h2 id="BRE"><a href="#BRE" class="headerlink" title="BRE"></a>BRE</h2></li><li>基本正则表达式，grep、sed、vi等软件支持。vim有扩展<h2 id="ERE"><a href="#ERE" class="headerlink" title="ERE"></a>ERE</h2></li><li>扩展正则表达式，egrep（gerp -E）、sed -r等<h2 id="PCRE"><a href="#PCRE" class="headerlink" title="PCRE"></a>PCRE</h2></li><li>几乎所有高级语言都是PCRE的方言或者变种，Python从1.6开始就使用SRE正则表达式引擎，可以认为是PCRE的子集，见模块re<h1 id="基本语法"><a href="#基本语法" class="headerlink" title="基本语法"></a>基本语法</h1><h2 id="元字符-metacharacter"><a href="#元字符-metacharacter" class="headerlink" title="元字符 metacharacter"></a>元字符 metacharacter</h2><img src="https://img-blog.csdnimg.cn/20190508095322741.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3B5dGhvbl9scXg=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><h2 id="转义"><a href="#转义" class="headerlink" title="转义"></a>转义</h2></li><li>凡是在正则表达式中有特殊意义的符号，如果想使用它的本意，需使用\转义</li><li>反斜杠自身,得使用\</li><li>\r，\n代表回车、换行<h2 id="重复"><a href="#重复" class="headerlink" title="重复"></a>重复</h2><img src="https://img-blog.csdnimg.cn/20190508095648666.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3B5dGhvbl9scXg=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><h2 id="练习"><a href="#练习" class="headerlink" title="练习"></a>练习</h2></li><li>1、匹配手机号码<br>字符串为“手机号码13899879021”</li><li>2、匹配中国坐骑<br>字符串为“号码027-65666837、0543-5837291”</li><li>代码实现</li><li>1、\d{11}</li><li>2、\d{3,5}-\d{7,8}<h2 id="or匹配与分组"><a href="#or匹配与分组" class="headerlink" title="or匹配与分组"></a>or匹配与分组</h2><img src="https://img-blog.csdnimg.cn/20190508100019947.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3B5dGhvbl9scXg=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></li><li>注意：<br>分组和捕获是同一个意思<br>使用正则表达式，能用简单表达式，就不要复杂的表达式<h2 id="零宽度断言"><a href="#零宽度断言" class="headerlink" title="零宽度断言"></a>零宽度断言</h2><img src="https://img-blog.csdnimg.cn/20190508102106408.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3B5dGhvbl9scXg=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></li><li>注意：<br>断言不占分组号。断言如同条件，只是要求匹配必须满足断言的条件<h2 id="注释"><a href="#注释" class="headerlink" title="注释"></a>注释</h2></li></ul><p><img src="https://img-blog.csdnimg.cn/20190508102137204.png" alt="在这里插入图片描述"></p><h2 id="贪婪与非贪婪"><a href="#贪婪与非贪婪" class="headerlink" title="贪婪与非贪婪"></a>贪婪与非贪婪</h2><ul><li>默认是贪婪模式，也就是说尽量多匹配更长的字符串</li><li>非贪婪很简单，在重复的符号后面加上一个？问号，就尽量的少匹配了<br><img src="https://img-blog.csdnimg.cn/20190508102619708.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3B5dGhvbl9scXg=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/20190508102631577.png" alt="在这里插入图片描述"><h1 id="引擎选项"><a href="#引擎选项" class="headerlink" title="引擎选项"></a>引擎选项</h1><img src="https://img-blog.csdnimg.cn/2019050810354979.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3B5dGhvbl9scXg=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><h1 id="工作模式"><a href="#工作模式" class="headerlink" title="工作模式"></a>工作模式</h1><h2 id="单行模式"><a href="#单行模式" class="headerlink" title="单行模式"></a>单行模式</h2></li><li><strong>.</strong> 点号可以匹配所有字符，包括换行符</li><li><strong>^</strong> 表示整个字符串的开头</li><li><strong>$</strong> 表示整个字符串的结尾<h2 id="多行模式"><a href="#多行模式" class="headerlink" title="多行模式"></a>多行模式</h2></li><li><strong>.</strong> 点号可以匹配除了换行符之外的字符，多行不影响 <strong>.</strong>  点号</li><li><strong>^</strong> 表示行首，<strong>$</strong> 表示行尾，不过这里的行是每一行<h2 id="默认模式"><a href="#默认模式" class="headerlink" title="默认模式"></a>默认模式</h2></li><li>可以看做待匹配的文本是一行，不能看做多行</li><li><strong>.</strong> 点号不能匹配换行符</li><li><strong>^</strong> 和 <strong>$</strong> 表示行首和行尾，而行首行尾就是整个字符串的开头和结尾<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2></li><li>简单讲，单行模式只影响 <strong>.</strong> 点号行为，多行模式重新定义行影响了 <strong>^</strong>  和 <strong>$</strong> </li><li>字符串看不见的换行符，\r\n会影响e\$的测试，e\$ 只能匹配e\n</li></ul><h2 id="举例"><a href="#举例" class="headerlink" title="举例"></a>举例</h2><p>very very happy<br>harry key</p><ul><li>上面2行happy之后，有可能是\r\n结尾</li><li>y$ 单行匹配key的y，多行匹配happy和key的y（这里的匹配是全局匹配）</li><li><strong>.$</strong> 指的是此行的结尾，而默认模式和单行模式都是一行，指的是这个大字符串的最后一个字符，就是key的y</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;@&lt;a href=&quot;正则表达式&quot;&gt;TOC&lt;/a&gt;&lt;/p&gt;
&lt;h1 id=&quot;概述&quot;&gt;&lt;a href=&quot;#概述&quot; class=&quot;headerlink&quot; title=&quot;概述&quot;&gt;&lt;/a&gt;概述&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;正则表达式，Regular Expression，缩写为rege
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title></title>
    <link href="https://hubhack.github.io/%E5%90%8E%E7%AB%AF/python/%E5%9F%BA%E7%A1%80/Python-%E6%A0%91Tree/"/>
    <id>https://hubhack.github.io/后端/python/基础/Python-树Tree/</id>
    <published>2019-08-22T03:06:41.518Z</published>
    <updated>2019-08-19T01:40:19.540Z</updated>
    
    <content type="html"><![CDATA[<p>@<a href>TOC</a></p><h1 id="树"><a href="#树" class="headerlink" title="树"></a>树</h1><ul><li>非线性结构</li><li>树是n(n≥0)个元素的集合<br>n = 0时,称为空树<br>树自由一个特殊的没有前驱的元素，称为树的根Root<br>树中除了根节点外，其余所有元素只能有一个前驱，可以有零个或多个后继</li><li>递归定义<br>树T是n(n≥0)个元素的集合，n = 0时，称为孔数<br>有且自由一个特殊元素根，剩余元素都可以被划分为m个互不相交的集合T1、T2、T3、…、Tm，而每一个集合都是树，称为T的子树Subtree<br>子树也有自己的根<h2 id="树的概念"><a href="#树的概念" class="headerlink" title="树的概念"></a>树的概念</h2></li><li>结点：树中的数据元素</li><li>结点的度degree：结点拥有的子树的数目称为度，记作d(v)</li><li>叶子结点：结点的度为0，称为叶子结点leaf、终端结点、末端节点</li><li>分支结点：结点的度不为0，称为非终端结点或分支结点</li><li>分支：结点之间的关系</li><li>内部结点：除根结点外的分支结点，当然也不包括叶子特点</li><li>树的度是树内各结点的度的最大值。D结点度最大为3，树的度数就是3<br><img src="https://img-blog.csdnimg.cn/20190417095217778.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3B5dGhvbl9scXg=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></li><li>孩子（儿子Child）结点：结点的子树的根结点成为该结点的孩子</li><li>双亲（父Parent）结点：一个结点是它各子树的根结点的双亲</li><li>兄弟（Sibling）结点：具有相同双亲结点的结点</li><li>祖先结点：从根结点到该结点所经分支上所有的结点。A、B、D<br>都是G的祖先结点</li><li>子孙结点：结点的所有子树上的结点都称为该结点的子孙。B的<br>子孙是D、G、H、I</li><li>结点的层次（Level）：根节点为第一层，根的孩子为第二层，以<br>此类推，记作L(v)</li><li>树的深度（高度Depth）：树的层次的最大值。上图的树深度为4</li><li>堂兄弟：双亲在同一层的结点<br>#</li><li>有序树：结点的子树是有顺序的（兄弟有大小，有先后次序），<br>不能交换。</li><li>无序树：结点的子树是有无序的，可以交换。</li><li>路径：树中的k个结点n1、n2、…、nk，满足ni是n(i+1)的双<br>亲，称为n1到nk的一条路径。就是一条线串下来的，前一个<br>都是后一个的父（前驱）结点。</li><li>路径长度=路径上结点数-1，也是分支数</li><li>森林：m(m≥0)棵不相交的树的集合</li><li>对于结点而言，其子树的集合就是森林。A结点的2棵子<br>树的集合就是森林</li></ul><h2 id="树的特点"><a href="#树的特点" class="headerlink" title="树的特点"></a>树的特点</h2><ul><li>唯一的根</li><li>子树不相交</li><li>除了根以外，每个元素只能有一个前驱，可以有零个或多个后继</li><li>根结点没有双亲结点（前驱），叶子结点没有孩子结点（后继）</li><li>vi是vj的双亲，则L(vi) = L(vj)-1，也就是说双亲比孩子结点的层次小1</li><li>堂兄弟的双亲是兄弟关系吗？<br>堂兄弟定义是，双亲结点是同一层的节点<br>下图G和J是堂兄弟，因为它们的双亲结点D和E在第三层，<br>依然是堂兄弟<br>因此，堂兄弟的双亲不一定是兄弟关系<br><img src="https://img-blog.csdnimg.cn/20190417095217778.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3B5dGhvbl9scXg=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><h1 id="二叉树"><a href="#二叉树" class="headerlink" title="二叉树"></a>二叉树</h1></li><li>每个结点最多2棵子树<br>二叉树不存在度数大于2的结点</li><li>它是有序树，左子树、右子树是顺序的，不能交换次序</li><li>即使某个结点只有一棵子树，也要确定它是左子树还是右子树<h2 id="二叉树的五种基本形态"><a href="#二叉树的五种基本形态" class="headerlink" title="二叉树的五种基本形态"></a>二叉树的五种基本形态</h2></li><li>空二叉树</li><li>只有一个根结点</li><li>根结点只有左子树</li><li>根结点只有右子树</li><li>根结点有左子树和右子树<h2 id="斜树"><a href="#斜树" class="headerlink" title="斜树"></a>斜树</h2></li><li>左斜树，所有结点都只有左子树</li><li>右斜树，所有节点都只有右子树<h2 id="满二叉树"><a href="#满二叉树" class="headerlink" title="满二叉树"></a>满二叉树</h2></li><li>一棵二叉树的所有分支结点都存在左子树和右子树，并且所有叶子结点只存在在最下面一层。</li><li>同样深度二叉树中，满二叉树结点最多。</li><li>k为深度（1≤k≤n），则结点总数为2^k-1</li><li>一个深度为4的15个结点的满二叉树<h2 id="完全二叉树Complete-Binary-Tree"><a href="#完全二叉树Complete-Binary-Tree" class="headerlink" title="完全二叉树Complete Binary Tree"></a>完全二叉树Complete Binary Tree</h2></li><li>若二叉树的深度为k，二叉树的层数从1到k-1层的结点数都达到了最大个数，在第k层的所有结点都集中在<br>最左边，这就是完全二叉树</li><li>完全二叉树由满二叉树引出</li><li>满二叉树一定是完全二叉树，但完全二叉树不一定是满二叉树</li><li>k为深度（1≤k≤n），则结点总数最大值为2^k-1，当达到最大值的时候就是满二叉树<h2 id="二叉树性质"><a href="#二叉树性质" class="headerlink" title="二叉树性质"></a>二叉树性质</h2><img src="https://img-blog.csdnimg.cn/20190418101130236.png" alt="在这里插入图片描述"><h3 id="性质1"><a href="#性质1" class="headerlink" title="性质1"></a>性质1</h3></li><li>在二叉树的第i层上至多有2^(i-1)个结点(i≥1)<h3 id="性质2"><a href="#性质2" class="headerlink" title="性质2"></a>性质2</h3></li><li>深度为k的二叉树，至多有2^k-1个节点(k≥1)</li><li>一层2-1=1</li><li>二层4-1=1+2=3</li><li>三层8-1=1+2+4=7<h3 id="性质3"><a href="#性质3" class="headerlink" title="性质3"></a>性质3</h3></li><li>对任何一棵二叉树T，如果其终端节点数为n0，度数为2的结点为<br>n2，则有n0=n2+1</li><li>换句话说，就是叶子结点数-1就等于度数为2的结点数。<br>-证明：<br>总结点数为n=n0+n1+n2，n1为度数为1的结点总数。<br>一棵树的分支数为n-1，因为除了根结点外，其余结点都有一<br>个分支，即n0+n1+n2-1。<br>分支数还等于n0<em>0+n1</em>1+n2<em>2，n2是2分支结点所以乘以2，<br>2</em>n2+n1。<br>可得2*n2+n1=n0+n1+n2-1 =&gt; n2=n0-1<h3 id="其他性质"><a href="#其他性质" class="headerlink" title="其他性质"></a>其他性质</h3></li><li>高度为k的二叉树，至少有k个结点。</li><li>含有n（n≥1）的结点的二叉树高度至多为n。和上句一个意思</li><li>含有n（n≥1）的结点的二叉树的高度至多为n，最小为<br>math.ceil(log2 (n+1))，不小于对数值的最小整数，向上取整。</li><li>假设高度为h，2^h-1=n =&gt; h = log2 (n+1)，层次数是取整。<br>如果是8个节点，3.1699就要向上取整为4，为4层<h3 id="性质4"><a href="#性质4" class="headerlink" title="性质4"></a>性质4</h3></li><li>具有n个结点的<strong>完全二叉树</strong>的深度为int(log2n)+1或者<br>math.ceil(log2(n+1))<br><img src="https://img-blog.csdnimg.cn/20190418101517687.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3B5dGhvbl9scXg=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><h3 id="性质5"><a href="#性质5" class="headerlink" title="性质5"></a>性质5</h3></li><li>如果有一棵n个结点的<strong>完全二叉树</strong>（深度为性质4），结点按照层<br>序编号，如下图</li><li>如果i=1，则结点i是二叉树的根，无双亲；如果i&gt;1，则其双亲<br>是int(i/2)，向下取整。就是子节点的编号整除2得到的就是父结<br>点的编号。父结点如果是i，那么左孩子结点就是2i，右孩子结点<br>就是2i+1。</li><li>如果2i&gt;n，则结点i无左孩子，即结点i为叶子结点；否则其左孩<br>子结点存在编号为2i。</li><li>如果2i+1&gt;n，则结点i无右孩子，注意这里并不能说明结点i没有<br>左孩子；否则右孩子结点存在编号为2i+1。<br><img src="https://img-blog.csdnimg.cn/20190418101655239.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3B5dGhvbl9scXg=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;@&lt;a href&gt;TOC&lt;/a&gt;&lt;/p&gt;
&lt;h1 id=&quot;树&quot;&gt;&lt;a href=&quot;#树&quot; class=&quot;headerlink&quot; title=&quot;树&quot;&gt;&lt;/a&gt;树&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;非线性结构&lt;/li&gt;
&lt;li&gt;树是n(n≥0)个元素的集合&lt;br&gt;n = 0时,称为空树
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title></title>
    <link href="https://hubhack.github.io/%E5%90%8E%E7%AB%AF/python/%E5%9F%BA%E7%A1%80/Python-%E6%96%87%E4%BB%B6%E6%93%8D%E4%BD%9C/"/>
    <id>https://hubhack.github.io/后端/python/基础/Python-文件操作/</id>
    <published>2019-08-22T03:06:41.512Z</published>
    <updated>2019-08-19T01:39:28.619Z</updated>
    
    <content type="html"><![CDATA[<p>@<a href>TOC</a></p><h1 id="文件操作"><a href="#文件操作" class="headerlink" title="文件操作"></a>文件操作</h1><h2 id="冯诺依曼体系架构"><a href="#冯诺依曼体系架构" class="headerlink" title="冯诺依曼体系架构"></a>冯诺依曼体系架构</h2><p><img src="https://img-blog.csdnimg.cn/20190427091513300.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3B5dGhvbl9scXg=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><ul><li>CPU由运算器和控制器组成</li><li>运算器，完成各种算数运算、逻辑运算、数据传输等数据加工处理</li><li>控制器，控制计算机各部件协调运行</li><li>存储器，用于记忆程序和数据，例如内存</li><li>输入设备，将数据或者程序输入到计算机中，例如键盘、鼠标</li><li>输出设备，将数据或程序的处理结果展示给用户，例如显示器、打印机等<br>一般说IO操作，指的是文件IO，如果指的是网络IO，都会直接说网络IO<h2 id="文件IO常用操作"><a href="#文件IO常用操作" class="headerlink" title="文件IO常用操作"></a>文件IO常用操作</h2><img src="https://img-blog.csdnimg.cn/20190427091934524.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3B5dGhvbl9scXg=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><h2 id="打开操作"><a href="#打开操作" class="headerlink" title="打开操作"></a>打开操作</h2>open(file, mode=’r’, buffering=-1, encoding=None, errors=None, newline=None, closefd= True, opener=None)</li><li>打开一个文件，返回一个文件对象（流对象）和文件描述符。打开文件失败，则返回异常</li><li><p>基本使用：<br>创建一个文件test，然后打开它，用完关闭</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">f = open(<span class="string">"tese"</span>) <span class="comment"># file对象</span></span><br><span class="line"><span class="comment"># windows &lt;_io.TextIOWrapper name='tese' mode='r' encoding='cp936'&gt;</span></span><br><span class="line"><span class="comment"># linux &lt;_io.TextIOWrapper name='tese' mode='r' encoding='UTF-8'&gt;</span></span><br><span class="line">print(f.read()) <span class="comment"># 读取文件</span></span><br><span class="line">f.close() <span class="comment"># 关闭文件</span></span><br></pre></td></tr></table></figure></li><li><p>文件操作中，最常用的操作就是 <strong>“读”</strong> 和 <strong>“写”</strong></p></li><li>文件访问的模式有两种：</li><li>文本模式和二进制模式。不同模式下，操作函数不相同，表现的结果也不一样<br>注：</li><li>windows中使用codepage代码页，可以认为每一个代码页就是一张编码表。cp936等同于GBK<h2 id="open的参数"><a href="#open的参数" class="headerlink" title="open的参数"></a>open的参数</h2></li><li>file</li><li>打开或者要创建的文件名。如果不指定路径，默认是当前路径</li><li>mode模式<br><img src="https://img-blog.csdnimg.cn/20190427093330677.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3B5dGhvbl9scXg=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>在上面的例子中，可以看到默认是文本打开模式，且是只读的<h3 id="r-模式"><a href="#r-模式" class="headerlink" title="r 模式"></a>r 模式</h3></li><li>只读打开文件，如果使用write方法，会抛异常</li><li>如果文件不存在，抛出FileNotFoundError异常</li><li>open模式是只读模式r打开已存在的文件<br><img src="https://img-blog.csdnimg.cn/20190427094141925.png" alt="在这里插入图片描述"><h3 id="w-模式"><a href="#w-模式" class="headerlink" title="w 模式"></a>w 模式</h3></li><li>表示只写打开方式，如果读取则抛出异常</li><li>如果文件不存在，则直接创建文件</li><li>如果文件存在，则清空文件内容<br><img src="https://img-blog.csdnimg.cn/2019042709395468.png" alt="在这里插入图片描述"></li></ul><h3 id="x-模式"><a href="#x-模式" class="headerlink" title="x 模式"></a>x 模式</h3><ul><li>文件不存在，创建文件，并只写方式打开</li><li>文件存在，抛出FileExistsError异常<br><img src="https://img-blog.csdnimg.cn/20190427093815910.png" alt="在这里插入图片描述"><h3 id="a-模式"><a href="#a-模式" class="headerlink" title="a 模式"></a>a 模式</h3></li><li>文件存在，只写打开，追加内容</li><li>文件不存在，则创建后，只写打开，追加内容<br><img src="https://img-blog.csdnimg.cn/20190427094259496.png" alt="在这里插入图片描述"><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3></li><li>r 是只读，wxa 都是只写</li><li>wxa 模式都可以产生新文件<br>w 不管文件存在与否，都会生成全新内容的文件<br>a 不管文件是否存在，都能在打开的文件尾部追加<br>x 必须要求文件事先不存在，自己创建一个新文件<h2 id="文本模式-t"><a href="#文本模式-t" class="headerlink" title="文本模式 t"></a>文本模式 t</h2></li><li>字符流，将文件的字节按照某种字符编码理解，按照字符操作。open的默认mode就是 rt<h2 id="二进制模式-b"><a href="#二进制模式-b" class="headerlink" title="二进制模式 b"></a>二进制模式 b</h2></li><li>字节流，将文件就按照字节理解，与字符编码无关。二进制模式操作时，字节操作使用bytes类型<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">f = open(<span class="string">"test3"</span>,<span class="string">'rb'</span>) <span class="comment"># 二进制只读</span></span><br><span class="line">s = f.read()</span><br><span class="line">print(type(s)) <span class="comment"># bytes</span></span><br><span class="line">print(s)</span><br><span class="line">f.close() <span class="comment"># 关闭文件</span></span><br><span class="line"></span><br><span class="line">f = open(<span class="string">"tese3"</span>,<span class="string">'wb'</span>) <span class="comment"># IO对象</span></span><br><span class="line">s = f.write(<span class="string">"你好"</span>.encode()) <span class="comment"># encode默认使用UTF-8编码，一个中文3个字节</span></span><br><span class="line">print(s) <span class="comment">#   6</span></span><br><span class="line">f.ckose()</span><br></pre></td></tr></table></figure></li></ul><h2 id="模式"><a href="#模式" class="headerlink" title="+ 模式"></a>+ 模式</h2><ul><li>为r、w、a、x提供缺失的读或写功能，但是获取文件对象依旧按照r、w、a、x自己的特征</li><li>+模式不能单独使用，可以认为它是为前面的模式字符做增强功能的<h2 id="文件指针"><a href="#文件指针" class="headerlink" title="文件指针"></a>文件指针</h2></li><li>文件指针，指向当前字节位置</li><li>mode=r，指针起始在0</li><li>mode=a，指针起始在EOF</li><li>tell()显示指针当前位置</li><li>seek(offset[,whence])  移动文件指针位置。offest偏移多少字节，whence从哪里开始<h3 id="文本模式下"><a href="#文本模式下" class="headerlink" title="文本模式下"></a>文本模式下</h3>whence 0 缺省值，表示从头开始，offest只能正整数<br>whence 1 表示从当前位置，offest只接受0<br>whence 2 表示从EOF开始，offest只接受0<br><img src="https://img-blog.csdnimg.cn/20190427100502491.png" alt="在这里插入图片描述"></li><li>文本模式支持从开头向后偏移的方式</li><li>whence为1表示从当前位置开始偏移，但是只支持偏移0，相当于原地不动，所以没什么用</li><li>whence为2表示从EOF开始，只支持偏移0，相当于移动文件指针到EOF</li><li>seek是按照字节偏移的</li><li>read在文本模式是按照字符读取的</li></ul><h3 id="二进制模式下"><a href="#二进制模式下" class="headerlink" title="二进制模式下"></a>二进制模式下</h3><p>whence 0 缺省值，表示从头开始，offest只能正整数<br>whence 1 表示从当前位置，offest可正可负<br>whence 2 表示从EOF开始，offest可正可负<br><img src="https://img-blog.csdnimg.cn/20190427101032466.png" alt="在这里插入图片描述"><br>二进制模式支持任意起点的便宜，从头、从尾、从中间位置开始<br>向后seek可以超界，但是向前seek的时候，不能超界，否则抛异常</p><h2 id="buffering：缓冲区"><a href="#buffering：缓冲区" class="headerlink" title="buffering：缓冲区"></a>buffering：缓冲区</h2><ul><li>-1表示使用缺省大小的buffer。如果是二进制模式，使用价格io.DEFAULT_BUFFER_SIZE值，默认是4096或者8192。如果是文本模式，如果是终端设备，实行缓存方式，如果不是，则使用二进制模式的策略</li><li>0，只在二进制模式使用，表示关buffer</li><li>1，只在文本模式使用，表示使用行缓冲。意思就是见到换行符就flush</li><li>大于1，用于指定buffer的大小<h3 id="buffer缓冲区"><a href="#buffer缓冲区" class="headerlink" title="buffer缓冲区"></a>buffer缓冲区</h3></li><li>缓冲区一个内存空间，一般来说是一个FIFO队列，到缓冲区满了或者达到阈值，数据才会flush到磁盘。<h4 id="fluch"><a href="#fluch" class="headerlink" title="fluch()"></a>fluch()</h4></li><li>将缓冲区数据写入磁盘<h4 id="chlose"><a href="#chlose" class="headerlink" title="chlose()"></a>chlose()</h4></li><li>关闭前会调用flush()</li><li>io.DEFAULT_BUFFER_SIZE 缺省缓冲区大小，字节<h4 id="二进制模式"><a href="#二进制模式" class="headerlink" title="二进制模式"></a>二进制模式</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> io</span><br><span class="line"></span><br><span class="line">f = open(<span class="string">'test'</span>,<span class="string">'w+b'</span>)</span><br><span class="line">print(io.DEFAULT_BUFFER_SIZE) <span class="comment"># 8192</span></span><br><span class="line">f.write(<span class="string">"hello"</span>.encode())</span><br><span class="line"><span class="comment"># cat test</span></span><br><span class="line">f.seek(<span class="number">0</span>) <span class="comment"># 指针回0</span></span><br><span class="line"><span class="comment"># cat test</span></span><br><span class="line">f.write(<span class="string">'python'</span>.encode())</span><br><span class="line">f.flush()</span><br><span class="line">f.close()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">f = open(<span class="string">'test'</span>,<span class="string">'w+b'</span>,<span class="number">4</span>) <span class="comment"># 缓冲区大小</span></span><br><span class="line">f.write(<span class="string">b'hello'</span>)</span><br><span class="line"><span class="comment"># cat test</span></span><br><span class="line">f.write(<span class="string">b'python'</span>)</span><br><span class="line"><span class="comment"># cat test</span></span><br><span class="line">f.close()</span><br></pre></td></tr></table></figure></li></ul><h4 id="文本模式"><a href="#文本模式" class="headerlink" title="文本模式"></a>文本模式</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> io</span><br><span class="line"></span><br><span class="line"><span class="comment"># buffering=1，使用行缓冲</span></span><br><span class="line">f = open(<span class="string">'test'</span>,<span class="string">'w+'</span>,<span class="number">1</span>)</span><br><span class="line">f.write(<span class="string">'hello'</span>) <span class="comment"># cat test</span></span><br><span class="line">f.write(<span class="string">'python'</span>*<span class="number">4</span>) <span class="comment"># cat test</span></span><br><span class="line">f.write(<span class="string">'\n'</span>) <span class="comment"># cat test</span></span><br><span class="line">f.write(<span class="string">'hi\nPython'</span>) <span class="comment"># cat test</span></span><br><span class="line">f.close()</span><br><span class="line"></span><br><span class="line"><span class="comment">#buffering&gt;1，使用指定大小的缓冲区</span></span><br><span class="line">f = open(<span class="string">'test'</span>,<span class="string">'w+'</span>,<span class="number">15</span>)</span><br><span class="line">f.write(<span class="string">'hello'</span>) <span class="comment"># cat test</span></span><br><span class="line">f.write(<span class="string">'python'</span>) <span class="comment"># cat test</span></span><br><span class="line">f.write(<span class="string">'hi\n'</span>) <span class="comment"># cat test</span></span><br><span class="line">f.write(<span class="string">'\nPython'</span>) <span class="comment"># cat test</span></span><br><span class="line">f.write(<span class="string">'a'</span> * (io.DEFAULT_BUFFER_SIZE - <span class="number">20</span>)) <span class="comment"># 设置为大于1没什么用</span></span><br><span class="line">f.write(<span class="string">'\nhelloPython'</span>)</span><br><span class="line">f.close()</span><br></pre></td></tr></table></figure><ul><li>buffering=0</li><li>这是一种特殊的二进制模式，不需要内存的buffer，可以看作是一个FIFO的文件<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">f = open(<span class="string">'test'</span>,<span class="string">'wb+'</span>,<span class="number">0</span>)</span><br><span class="line">f.write(<span class="string">'hello'</span>) <span class="comment"># cat test</span></span><br><span class="line">f.write(<span class="string">'python'</span>*<span class="number">4</span>) <span class="comment"># cat test</span></span><br><span class="line">f.write(<span class="string">'\n'</span>) <span class="comment"># cat test</span></span><br><span class="line">f.write(<span class="string">'hi\nPython'</span>) <span class="comment"># cat test</span></span><br><span class="line">f.close()</span><br></pre></td></tr></table></figure></li></ul><p><img src="https://img-blog.csdnimg.cn/20190502165107715.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3B5dGhvbl9scXg=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><ol><li>文本模式，一般都用默认缓冲区大小</li><li>二进制模式，是一个个字节的操作，可以指定buffer的大小</li><li>一般来说，默认缓冲区大小是个比较好的选择，除非明确知道，否则不调整它</li><li>一般编程中，明确知道需要写磁盘了，都会手动调用一次flush，而不是等到自动flush或者close的时候<h2 id="encoding：编码，仅文本模式使用"><a href="#encoding：编码，仅文本模式使用" class="headerlink" title="encoding：编码，仅文本模式使用"></a>encoding：编码，仅文本模式使用</h2></li></ol><ul><li>None表示使用缺省编码，依赖操作系统。windows、linux下测试如下代码<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">f = open(<span class="string">'test'</span>,<span class="string">'w'</span>)</span><br><span class="line">f.write(<span class="string">'啊'</span>)</span><br><span class="line">f.close()</span><br></pre></td></tr></table></figure></li></ul><p>windows下缺省GBK(0xB0A1)，linux下缺省UTF-8(0xE5 95 8A)</p><h2 id="其他参数"><a href="#其他参数" class="headerlink" title="其他参数"></a>其他参数</h2><h3 id="errors"><a href="#errors" class="headerlink" title="errors"></a>errors</h3><ul><li>什么样的编码错误将被捕获</li><li>None和strict表示有编码错误将抛出ValueError异常；ignore表示忽略<h3 id="newline"><a href="#newline" class="headerlink" title="newline"></a>newline</h3></li><li>文本模式中，换行的转换。可以用None、“空串、’\r’、’\n’、’\r\n’</li><li>读时，None表示’\r’、’\n’、’\r\n’都被转换为’\n’；’’空串表示不会自动转换通用换行符；其它合法字符表示换行符就是指定字符，就会按照指定字符分行</li><li>写时，None表示’\n’都会被替换为系统缺省行分割符os.linesep；’\n’或’’空串表示’\n’不替换；其它合法字符表示’\n’会被替换为指定的字符<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">f = open(<span class="string">'/etc/test'</span>, <span class="string">'w'</span>)</span><br><span class="line"><span class="comment"># newline缺省为None，windows下会把\n替换为\r\n</span></span><br><span class="line">f.write(<span class="string">'python\rwww.python.org\nwww.baidu.com\r\npython3'</span>)</span><br><span class="line"><span class="comment"># 真正写入的是</span></span><br><span class="line"><span class="comment"># 'python\rwww.python.org\rwww.baidu.com\r\rpython3'</span></span><br><span class="line">f.close()</span><br><span class="line"></span><br><span class="line">newlines = [<span class="literal">None</span>, <span class="string">''</span>, <span class="string">'\n'</span>, <span class="string">'\r\n'</span>]</span><br><span class="line"><span class="keyword">for</span> nl <span class="keyword">in</span> newlines:</span><br><span class="line">    f = open(<span class="string">'/etc/test'</span>, newline=nl) <span class="comment"># 缺省替换所有换行符</span></span><br><span class="line">    print(f.readlines())</span><br><span class="line">    f.close()</span><br><span class="line"><span class="comment"># 运行结果如下</span></span><br><span class="line"><span class="comment"># ['python\n', 'www.python.org\n', 'www.baidu.con\n', '\n', 'python3']</span></span><br><span class="line"><span class="comment"># 常见换行符都替换为\n</span></span><br><span class="line"><span class="comment"># ['python\r', 'www.python.org\r\n', 'www.baidu.con\r', '\r\n', 'python3']</span></span><br><span class="line"><span class="comment"># ''表示什么都不做</span></span><br><span class="line"><span class="comment"># ['python\rwww.python.org\r\n', 'www.baidu.con\r\r\n', 'python3']</span></span><br><span class="line"><span class="comment">#  \n做作为换行符</span></span><br><span class="line"><span class="comment"># ['python\rwww.python.org\r\n', 'www.baidu.con\r\r\n', 'python3']</span></span><br><span class="line"><span class="comment"># \r\n作为换行符</span></span><br></pre></td></tr></table></figure></li></ul><h3 id="closefd"><a href="#closefd" class="headerlink" title="closefd"></a>closefd</h3><ul><li>表示文件描述符，True表示关闭它。False会在文件关闭后保持这个描述符。fileobj.fileno()查看<h2 id="read"><a href="#read" class="headerlink" title="read"></a>read</h2></li><li>read(size=-1)</li><li>size表示读取的多少个字符或字节；负数或者None表示读取到EOF<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">f = open(<span class="string">'/etc/test'</span>, <span class="string">'r+'</span>)</span><br><span class="line">f.write(<span class="string">"hello"</span>)</span><br><span class="line">f.write(<span class="string">'\n'</span>)</span><br><span class="line">f.write(<span class="string">'你好'</span>)</span><br><span class="line">f.seek(<span class="number">0</span>)</span><br><span class="line">f.read(<span class="number">7</span>)</span><br><span class="line">f.close()</span><br><span class="line"><span class="comment"># 二进制</span></span><br><span class="line">f = open(<span class="string">'/etc/test'</span>, <span class="string">'rb+'</span>)</span><br><span class="line">f.read(<span class="number">7</span>)</span><br><span class="line">f.read(<span class="number">1</span>)</span><br><span class="line">f.close()</span><br></pre></td></tr></table></figure></li></ul><h2 id="行读取"><a href="#行读取" class="headerlink" title="行读取"></a>行读取</h2><h3 id="readline-size-1"><a href="#readline-size-1" class="headerlink" title="readline(size=1)"></a>readline(size=1)</h3><ul><li>一行行读取文件内容。size设置一次能读取行内几个字符或字节<h3 id="readlines-hint-1"><a href="#readlines-hint-1" class="headerlink" title="readlines(hint=-1)"></a>readlines(hint=-1)</h3></li><li>读取所有行的列表。指定hint则返回指定的行数<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 按行迭代</span></span><br><span class="line">f = open(<span class="string">'test'</span>) <span class="comment"># 返回可迭代对象</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> line <span class="keyword">in</span> f:</span><br><span class="line">print(line.encode())</span><br><span class="line"></span><br><span class="line">f.close()</span><br></pre></td></tr></table></figure></li></ul><h2 id="write"><a href="#write" class="headerlink" title="write"></a>write</h2><ul><li>write(s)，把字符串s写入到文件中并返回字符的个数</li><li>writelines(lines)，将字符串列表写入文件<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">f = open(<span class="string">'test'</span>, <span class="string">'w+'</span>）</span><br><span class="line"></span><br><span class="line">line = [<span class="string">'abc'</span>, <span class="string">'123\n'</span>, <span class="string">'hello'</span>] <span class="comment"># 提供换行符</span></span><br><span class="line">f.writelines(lines)</span><br><span class="line"></span><br><span class="line">f.seek(<span class="number">0</span>)</span><br><span class="line">print(f.read())</span><br><span class="line">f.close()</span><br></pre></td></tr></table></figure></li></ul><h2 id="close"><a href="#close" class="headerlink" title="close"></a>close</h2><ul><li>flush并关闭文件对象</li><li>文件已经关闭，再次关闭没有任何效果<h2 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h2><img src="https://img-blog.csdnimg.cn/20190502173052740.png" alt="在这里插入图片描述"><h2 id="上下文管理"><a href="#上下文管理" class="headerlink" title="上下文管理"></a>上下文管理</h2></li><li>在Linux中，执行<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">lst = []</span><br><span class="line"><span class="keyword">for</span> _ <span class="keyword">in</span> range(<span class="number">2000</span>):</span><br><span class="line">lst.append(open(<span class="string">'test'</span>))</span><br><span class="line"><span class="comment"># OSError: [Errno 24] Too many open files: 'test'</span></span><br><span class="line"></span><br><span class="line">print(len(lst))</span><br></pre></td></tr></table></figure></li></ul><h3 id="lsof：列出打开的文件"><a href="#lsof：列出打开的文件" class="headerlink" title="lsof：列出打开的文件"></a>lsof：列出打开的文件</h3><p>没有就# yum install lsof<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ ps aux | grep python</span><br><span class="line">$ lsof -p <span class="number">9255</span> | grep test |wc <span class="number">-1</span></span><br><span class="line">$ ulimit -a</span><br></pre></td></tr></table></figure></p><ul><li>ps命令返回进程，grep处python进程ID</li><li>lsof -p 进程号，列出该进程的所有文件描述符，grep出test文件的文件描述符，wc统计</li><li>ulimit -a 查看所有限制。其中open files就是打开问价数的限制，默认1024<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> x <span class="keyword">in</span> lst:</span><br><span class="line">x.close()</span><br></pre></td></tr></table></figure></li></ul><p>将文件一次关闭，然后就可以继续打开了。再看一次lsof<br>1、异常处理</p><ul><li><p>当出现异常的时候，拦截异常。但是，因为很多代码都可能出现OSError异常，还不好判断异常就是因为资源限制产生的</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">f = open(<span class="string">'test'</span>)</span><br><span class="line"><span class="keyword">try</span>:</span><br><span class="line">f.writs(<span class="string">"abc"</span>) <span class="comment"># 文件只读，写入失败</span></span><br><span class="line"><span class="keyword">finally</span>:</span><br><span class="line">f.close() <span class="comment"># 这样才行</span></span><br></pre></td></tr></table></figure></li><li><p>使用finally可以保证打开的文件可以被关闭<br>2、上下文管理<br>一种的特殊语法，交给解释器去释放文件对象</p><h3 id="上下文管理-1"><a href="#上下文管理-1" class="headerlink" title="上下文管理"></a>上下文管理</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">del</span> f</span><br><span class="line"><span class="keyword">with</span> open(<span class="string">'test'</span>) <span class="keyword">as</span> f:</span><br><span class="line">f.write(<span class="string">'abc'</span>) <span class="comment"># 文件只读，写入失败</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#测试f是否关闭</span></span><br><span class="line">f1.closed</span><br></pre></td></tr></table></figure></li><li><p>对于类似文件对象的IO对象，一般来说都需要在不使用的时候关闭、注销，以释放资源</p></li><li>IO被打开的时候，会获得一个文件描述符。计算机资源是有限的，所以操作系统都会做限制。就是为了保护计算机的资源不要被完全耗尽，计算资源是共享的，不是独占的</li><li>一般情况下，除非特别明确的知道资源情况，否则不要提高资源的限制值来解决问题</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;@&lt;a href&gt;TOC&lt;/a&gt;&lt;/p&gt;
&lt;h1 id=&quot;文件操作&quot;&gt;&lt;a href=&quot;#文件操作&quot; class=&quot;headerlink&quot; title=&quot;文件操作&quot;&gt;&lt;/a&gt;文件操作&lt;/h1&gt;&lt;h2 id=&quot;冯诺依曼体系架构&quot;&gt;&lt;a href=&quot;#冯诺依曼体系架构&quot; cla
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title></title>
    <link href="https://hubhack.github.io/%E5%90%8E%E7%AB%AF/python/%E5%9F%BA%E7%A1%80/Python-%E5%8F%8D%E5%B0%84/"/>
    <id>https://hubhack.github.io/后端/python/基础/Python-反射/</id>
    <published>2019-08-22T03:06:41.507Z</published>
    <updated>2019-08-19T01:37:41.737Z</updated>
    
    <content type="html"><![CDATA[<h1 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h1><p>运行时，区别于编译时，指的是程序被加载到内存中执行的时候<br>反射，reflection，指的是运行时获取类型定义信息<br>一个对象能够在运行时，像照镜子一样，反射处其类型信息<br>简单说，在python中，能够通过一个对象，找出其type、class、attribute或method的能力，称为反射或者自省<br>具有反射能力的函数有type()、isinstance()、callable()、dir()、getattr()等<br>反射相关的函数和方法<br>需求<br>有一个Point类，查看它实例的属性，并修改它。动态为实例增加属性<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Point</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, x, y)</span>:</span></span><br><span class="line">        self.x = x</span><br><span class="line">        self.y = y</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__str__</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> <span class="string">"Point(&#123;&#125;, &#123;&#125;)"</span>.format(self.x, self.y)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">show</span><span class="params">(self)</span>:</span></span><br><span class="line">        print(self.x, self.y)</span><br><span class="line"></span><br><span class="line">p = Point(<span class="number">4</span>, <span class="number">5</span>)</span><br><span class="line">print(p) <span class="comment"># Point(4, 5)</span></span><br><span class="line">print(p.__dict__) <span class="comment"># &#123;'x': 4, 'y': 5&#125;</span></span><br><span class="line">p.__dict__[<span class="string">'y'</span>] = <span class="number">16</span> <span class="comment"># &#123;'x': 4, 'y': 16&#125;</span></span><br><span class="line">print(p.__dict__) <span class="comment"># &#123;'x': 4, 'y': 16, 'z': 10&#125;</span></span><br><span class="line">p.z = <span class="number">10</span></span><br><span class="line">print(p.__dict__)</span><br><span class="line">print(dir(p))</span><br><span class="line">print(p.__dir__())</span><br></pre></td></tr></table></figure></p><p>上例通过属性字典<code>__dict__</code>来访问对象的属性，本质上也是利用的反射的能力。<br>Python提供了内置的函数<br>|内建函数|意义|<br>|:–|:–|<br>|getattr(object,name[,default])|通过name返回object的属性值。当属性不存在，将使用default返回，如果没有default，则抛出AttributeError。name必须为字符串|<br>|setattr(object,name,value)|object的属性存在，则覆盖，不存在，新增|<br>|hasattr(object,name)|判断对象是否有这个名字的属性，name必须为字符串|<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Point</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, x, y)</span>:</span></span><br><span class="line">        self.x = x</span><br><span class="line">        self.y = y</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__str__</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> <span class="string">"Point(&#123;&#125;, &#123;&#125;)"</span>.format(self.x, self.y)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">show</span><span class="params">(self)</span>:</span></span><br><span class="line">        print(self)</span><br><span class="line"></span><br><span class="line">p1 = Point(<span class="number">4</span>, <span class="number">5</span>)</span><br><span class="line">p2 = Point(<span class="number">10</span>, <span class="number">10</span>)</span><br><span class="line">print(repr(p1), repr(p2))</span><br><span class="line">print(p1.__dict__) <span class="comment"># &#123;'x': 4, 'y': 5&#125;</span></span><br><span class="line">setattr(p1, <span class="string">'y'</span>, <span class="number">16</span>)</span><br><span class="line">setattr(p1, <span class="string">'z'</span>, <span class="number">16</span>)</span><br><span class="line">print(getattr(p1, <span class="string">'__dict__'</span>)) <span class="comment"># &#123;'x': 4, 'y': 16, 'z': 16&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 动态调用方法</span></span><br><span class="line"><span class="keyword">if</span> hasattr(p1, <span class="string">'show'</span>):</span><br><span class="line">    getattr(p1, <span class="string">'show'</span>)() <span class="comment"># Point(4, 16)</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 动态增加方法</span></span><br><span class="line"><span class="comment"># 为类增加方法</span></span><br><span class="line"><span class="keyword">if</span> <span class="keyword">not</span> hasattr(Point, <span class="string">'add'</span>):</span><br><span class="line">    setattr(Point, <span class="string">'add'</span>, <span class="keyword">lambda</span> self,other: Point(self.x +other.x, self.y + other.y))</span><br><span class="line"></span><br><span class="line">print(Point.add) <span class="comment"># &lt;function &lt;lambda&gt; at 0x000002018E6E51E0&gt;</span></span><br><span class="line">print(p1.add) <span class="comment"># &lt;bound method &lt;lambda&gt; of &lt;__main__.Point object at 0x000001EC6C2A86A0&gt;&gt;</span></span><br><span class="line">print(p1.add(p2)) <span class="comment"># 绑定 # Point(14, 26)</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 为实例增加方法，未绑定</span></span><br><span class="line"><span class="keyword">if</span> <span class="keyword">not</span> hasattr(p1, <span class="string">'sub'</span>):</span><br><span class="line">    setattr(p1, <span class="string">'sub'</span>, <span class="keyword">lambda</span> self, other: Point(self.x - other.x, self.y - other.y))</span><br><span class="line"></span><br><span class="line">print(p1.sub(p1, p1)) <span class="comment"># Point(0, 0)</span></span><br><span class="line">print(p1.sub) <span class="comment"># &lt;function &lt;lambda&gt; at 0x0000018C324E5620&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># add在谁里面， sub在谁里面</span></span><br><span class="line">print(p1.__dict__) <span class="comment"># &#123;'x': 4, 'y': 16, 'z': 16, 'sub': &lt;function &lt;lambda&gt; at 0x00000180472D5620&gt;&#125;</span></span><br><span class="line">print(Point.__dict__)</span><br><span class="line"><span class="comment"># &#123;'__module__': '__main__', '__init__': &lt;function Point.__init__ at 0x00000180472D5158&gt;,\</span></span><br><span class="line"><span class="comment"># '__str__': &lt;function Point.__str__ at 0x00000180472D5268&gt;, 'show': &lt;function Point.show at 0x00000180472D5598&gt;, \</span></span><br><span class="line"><span class="comment"># '__dict__': &lt;attribute '__dict__' of 'Point' objects&gt;, '__weakref__': &lt;attribute '__weakref__' of 'Point' objects&gt;,\</span></span><br><span class="line"><span class="comment"># '__doc__': None, 'add': &lt;function &lt;lambda&gt; at 0x00000180472D51E0&gt;&#125;</span></span><br></pre></td></tr></table></figure></p><h2 id="思考"><a href="#思考" class="headerlink" title="思考"></a>思考</h2><ul><li>这种动态增加属性的方式和装饰器修饰一个类、Mixin方式的差异在哪里</li></ul><p>这种动态增删属性的方式是运行时改变类或者实例的方式，但是装饰器或Mixin都是定义时就决定了，因此反射能力具有更大的灵活性</p><h2 id="练习"><a href="#练习" class="headerlink" title="练习"></a>练习</h2><ul><li>命令分发器，通过名称找到对应的函数执行</li></ul><p>思路：名称找对象的方法<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Dispatcher</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">reg</span><span class="params">(self, name, fn)</span>:</span></span><br><span class="line">        setattr(self, name, fn)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">run</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">            cmd = input(<span class="string">'&gt;&gt;&gt;'</span>).strip()</span><br><span class="line">            <span class="keyword">if</span> cmd == <span class="string">'quit'</span>:</span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line"></span><br><span class="line">            getattr(self, cmd, <span class="keyword">lambda</span> :print(<span class="string">'Unknowm Cmd &#123;&#125;'</span>.format(cmd)))()</span><br><span class="line"></span><br><span class="line">dis = Dispatcher()</span><br><span class="line">dis.reg(<span class="string">'ls'</span>, <span class="keyword">lambda</span>  :print(<span class="string">'ls'</span>))</span><br><span class="line"></span><br><span class="line">dis.run()</span><br></pre></td></tr></table></figure></p><p>上例中使用getattr方法找到对象的属性的方式，比自己维护一个字典来建立名词和函数之间的关系的方式好多了</p><h1 id="反射相关的魔术方法"><a href="#反射相关的魔术方法" class="headerlink" title="反射相关的魔术方法"></a>反射相关的魔术方法</h1><p><code>__getattr__()</code>、<code>__setattrr__()</code>、<code>__delattr__()</code></p><h2 id="getattr"><a href="#getattr" class="headerlink" title="__getattr__()"></a><code>__getattr__()</code></h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Base</span>:</span></span><br><span class="line">    n = <span class="number">0</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Point</span><span class="params">(Base)</span>:</span></span><br><span class="line">    z = <span class="number">6</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, x, y)</span>:</span></span><br><span class="line">        self.x = x</span><br><span class="line">        self.y = y</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">show</span><span class="params">(self)</span>:</span></span><br><span class="line">        print(self.x, self.y)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__getattr__</span><span class="params">(self, item)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> <span class="string">"missing &#123;&#125;"</span>.format(item)</span><br><span class="line"></span><br><span class="line">p1 = Point(<span class="number">4</span>,<span class="number">5</span>)</span><br><span class="line">print(p1.x) <span class="comment"># 4</span></span><br><span class="line">print(p1.z) <span class="comment"># 6</span></span><br><span class="line">print(p1.n) <span class="comment"># 0</span></span><br><span class="line">print(p1.y) <span class="comment"># 5</span></span><br></pre></td></tr></table></figure><p>实例属性会按照继承关系找，如果找不到，就会执行<code>__getattr__()</code>方法，如果没有这个方法，就会抛出AttrbuteError异常表示找不到属性</p><ul><li>查找属性的顺序：<br><code>instance.__dict__</code> –&gt; <code>instance.__class__.__dict__</code> –&gt; <code>继承的祖先类(直到object)的__dict</code> –&gt; 找不到调用<code>__getattr__()</code><h2 id="setattrr"><a href="#setattrr" class="headerlink" title="__setattrr__()"></a><code>__setattrr__()</code></h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Base</span>:</span></span><br><span class="line">    n = <span class="number">0</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Point</span><span class="params">(Base)</span>:</span></span><br><span class="line">    z = <span class="number">6</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, x, y)</span>:</span></span><br><span class="line">        self.x = x</span><br><span class="line">        self.y = y</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">show</span><span class="params">(self)</span>:</span></span><br><span class="line">        print(self.x, self.y)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__getattr__</span><span class="params">(self, item)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> <span class="string">"missing &#123;&#125;"</span>.format(item)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__setattr__</span><span class="params">(self, key, value)</span>:</span></span><br><span class="line">        print(<span class="string">"setattr &#123;&#125;=&#123;&#125;"</span>.format(key,value))</span><br><span class="line"></span><br><span class="line">p1 = Point(<span class="number">4</span>,<span class="number">5</span>)</span><br><span class="line">print(<span class="number">1</span>, p1.x)</span><br><span class="line">print(<span class="number">2</span>, p1.z) </span><br><span class="line">print(<span class="number">3</span>, p1.n)</span><br><span class="line">print(<span class="number">4</span>, p1.t)</span><br><span class="line">p1.x = <span class="number">50</span></span><br><span class="line">print(<span class="number">5</span>, p1.x)</span><br><span class="line">print(<span class="number">6</span>, p1.__dict__)</span><br><span class="line">p1.__dict__[<span class="string">'x'</span>] = <span class="number">60</span></span><br><span class="line">print(<span class="number">7</span>, p1.__dict__)</span><br><span class="line">print(<span class="number">8</span>, p1.x)</span><br><span class="line"></span><br><span class="line">执行结果</span><br><span class="line">setattr x=<span class="number">4</span></span><br><span class="line">setattr y=<span class="number">5</span></span><br><span class="line"><span class="number">1</span> missing x</span><br><span class="line"><span class="number">2</span> <span class="number">6</span></span><br><span class="line"><span class="number">3</span> <span class="number">0</span></span><br><span class="line"><span class="number">4</span> missing t</span><br><span class="line">setattr x=<span class="number">50</span></span><br><span class="line"><span class="number">5</span> missing x</span><br><span class="line"><span class="number">6</span> &#123;&#125;</span><br><span class="line"><span class="number">7</span> &#123;<span class="string">'x'</span>: <span class="number">60</span>&#125;</span><br><span class="line"><span class="number">8</span> <span class="number">60</span></span><br></pre></td></tr></table></figure></li></ul><p>实例通过.点号设置属性，例如<code>self.x = x</code>属性赋值，就会调用<code>__setattr_-()</code>，属性要加到实例的<code>__dict__</code>中，就需要自己完成<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Point</span><span class="params">(Base)</span>:</span></span><br><span class="line">    z = <span class="number">6</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, x, y)</span>:</span></span><br><span class="line">        self.x = x</span><br><span class="line">        self.y = y</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">show</span><span class="params">(self)</span>:</span></span><br><span class="line">        print(self.x, self.y)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__getattr__</span><span class="params">(self, item)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> <span class="string">"missing &#123;&#125;"</span>.format(item)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__setattr__</span><span class="params">(self, key, value)</span>:</span></span><br><span class="line">        print(<span class="string">"setattr &#123;&#125;=&#123;&#125;"</span>.format(key,value))</span><br><span class="line">        self.__dict__[key] = value <span class="comment"># 操作字典</span></span><br></pre></td></tr></table></figure></p><p><code>__setattr__()</code>方法，可以拦截对实例属性的增加、修改操作，如果要设置生效，需要自己操作实例的<code>__dict__</code></p><h3 id="例子"><a href="#例子" class="headerlink" title="例子"></a>例子</h3><p><code>__getattr__</code>和<code>__setattr__</code>综合使用<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">B</span>:</span></span><br><span class="line">    b = <span class="number">200</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">A</span><span class="params">(B)</span>:</span></span><br><span class="line">    z = <span class="number">100</span></span><br><span class="line">    d = &#123;&#125;</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, x, y)</span>:</span></span><br><span class="line">        self.x = x</span><br><span class="line">        setattr(self, <span class="string">'y'</span>, y)</span><br><span class="line">        self.__dict__[<span class="string">'a'</span>] = <span class="number">5</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__getattr__</span><span class="params">(self, item)</span>:</span></span><br><span class="line">        print(<span class="string">'------'</span>, item)</span><br><span class="line">        <span class="keyword">return</span> self.d[item]</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__setattr__</span><span class="params">(self, key, value)</span>:</span></span><br><span class="line">        print(<span class="string">'setattr key '</span>, key)</span><br><span class="line">        print(<span class="string">'setattr key '</span>, value)</span><br><span class="line">        self.d[key] = value</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__delattr__</span><span class="params">(self, item)</span>:</span></span><br><span class="line">        print(<span class="string">'can not del &#123;&#125;'</span>.format(item))</span><br><span class="line"></span><br><span class="line">a = A(<span class="number">4</span>, <span class="number">5</span>)</span><br><span class="line">print(a.__dict__)</span><br><span class="line">print(A.__dict__)</span><br><span class="line">print(a.x , a.y)</span><br><span class="line">print(a.a)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 执行结果</span></span><br><span class="line">setattr key  x</span><br><span class="line">setattr key  <span class="number">4</span></span><br><span class="line">setattr key  y</span><br><span class="line">setattr key  <span class="number">5</span></span><br><span class="line">&#123;<span class="string">'a'</span>: <span class="number">5</span>&#125;</span><br><span class="line">&#123;<span class="string">'__module__'</span>: <span class="string">'__main__'</span>, <span class="string">'z'</span>: <span class="number">100</span>, <span class="string">'d'</span>: &#123;<span class="string">'x'</span>: <span class="number">4</span>, <span class="string">'y'</span>: <span class="number">5</span>&#125;,\</span><br><span class="line"> <span class="string">'__init__'</span>: &lt;function A.__init__ at <span class="number">0x000001062E6C5158</span>&gt;,\</span><br><span class="line">  <span class="string">'__getattr__'</span>: &lt;function A.__getattr__ at <span class="number">0x000001062E6C5268</span>&gt;, \</span><br><span class="line">  <span class="string">'__setattr__'</span>: &lt;function A.__setattr__ at <span class="number">0x000001062E6C5598</span>&gt;, \</span><br><span class="line">  <span class="string">'__delattr__'</span>: &lt;function A.__delattr__ at <span class="number">0x000001062E6C5620</span>&gt;, \</span><br><span class="line">  <span class="string">'__doc__'</span>: <span class="literal">None</span>&#125;</span><br><span class="line">------ x</span><br><span class="line">------ y</span><br><span class="line"><span class="number">4</span> <span class="number">5</span></span><br><span class="line"><span class="number">5</span></span><br></pre></td></tr></table></figure></p><h2 id="delattr"><a href="#delattr" class="headerlink" title="__delattr__()"></a><code>__delattr__()</code></h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Point</span>:</span></span><br><span class="line">    Z = <span class="number">5</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, x, y)</span>:</span></span><br><span class="line">        self.x = x</span><br><span class="line">        self.y = y</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__delattr__</span><span class="params">(self, item)</span>:</span></span><br><span class="line">        print(<span class="string">'Can not del &#123;&#125;'</span>.format(item))</span><br><span class="line"></span><br><span class="line">p = Point(<span class="number">4</span>, <span class="number">5</span>)</span><br><span class="line"><span class="keyword">del</span> p.x</span><br><span class="line">p.z = <span class="number">15</span></span><br><span class="line"><span class="keyword">del</span> p.z</span><br><span class="line"><span class="keyword">del</span> p.Z</span><br><span class="line">print(Point.__dict__)</span><br><span class="line">print(p.__dict__)</span><br><span class="line"><span class="keyword">del</span> Point.Z</span><br><span class="line">print(Point.__dict__)</span><br></pre></td></tr></table></figure><p>执行结果<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">Can <span class="keyword">not</span> <span class="keyword">del</span> x</span><br><span class="line">Can <span class="keyword">not</span> <span class="keyword">del</span> z</span><br><span class="line">Can <span class="keyword">not</span> <span class="keyword">del</span> Z</span><br><span class="line">&#123;<span class="string">'__module__'</span>: <span class="string">'__main__'</span>, <span class="string">'Z'</span>: <span class="number">5</span>, <span class="string">'__init__'</span>: &lt;function Point.__init__ at <span class="number">0x0000029FBF8B5158</span>&gt;, \</span><br><span class="line"><span class="string">'__delattr__'</span>: &lt;function Point.__delattr__ at <span class="number">0x0000029FBF8B5268</span>&gt;, <span class="string">'__dict__'</span>: &lt;attribute <span class="string">'__dict__'</span> of <span class="string">'Point'</span> objects&gt;, \</span><br><span class="line"><span class="string">'__weakref__'</span>: &lt;attribute <span class="string">'__weakref__'</span> of <span class="string">'Point'</span> objects&gt;, <span class="string">'__doc__'</span>: <span class="literal">None</span>&#125;</span><br><span class="line">&#123;<span class="string">'x'</span>: <span class="number">4</span>, <span class="string">'y'</span>: <span class="number">5</span>, <span class="string">'z'</span>: <span class="number">15</span>&#125;</span><br><span class="line">&#123;<span class="string">'__module__'</span>: <span class="string">'__main__'</span>, <span class="string">'__init__'</span>: &lt;function Point.__init__ at <span class="number">0x0000029FBF8B5158</span>&gt;, \</span><br><span class="line"><span class="string">'__delattr__'</span>: &lt;function Point.__delattr__ at <span class="number">0x0000029FBF8B5268</span>&gt;, <span class="string">'__dict__'</span>: &lt;attribute <span class="string">'__dict__'</span> of <span class="string">'Point'</span> objects&gt;,\</span><br><span class="line"> <span class="string">'__weakref__'</span>: &lt;attribute <span class="string">'__weakref__'</span> of <span class="string">'Point'</span> objects&gt;, <span class="string">'__doc__'</span>: <span class="literal">None</span>&#125;</span><br></pre></td></tr></table></figure></p><p>可以阻止通过实例来删除属性的操作。但是通过类依然可以删除属性</p><h2 id="getattribute"><a href="#getattribute" class="headerlink" title="__getattribute__()"></a><code>__getattribute__()</code></h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Base</span>:</span></span><br><span class="line">    n = <span class="number">0</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Point</span><span class="params">(Base)</span>:</span></span><br><span class="line">    z = <span class="number">6</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, x , y)</span>:</span></span><br><span class="line">        self.x = x</span><br><span class="line">        self.y = y</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__getattr__</span><span class="params">(self, item)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> <span class="string">"missing &#123;&#125;"</span>.format(item)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__getattribute__</span><span class="params">(self, item)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> item</span><br><span class="line"></span><br><span class="line">p1 = Point(<span class="number">4</span>, <span class="number">5</span>)</span><br><span class="line">print(p1.__dict__) <span class="comment"># __dict__</span></span><br><span class="line">print(p1.x) <span class="comment"># x</span></span><br><span class="line">print(p1.z) <span class="comment"># z</span></span><br><span class="line">print(p1.n) <span class="comment"># n</span></span><br><span class="line">print(p1.t) <span class="comment"># t</span></span><br><span class="line">print(Point.__dict__)</span><br><span class="line"><span class="comment"># &#123;'__module__': '__main__', 'z': 6, '__init__': &lt;function Point.__init__ at 0x0000016930285158&gt;,\</span></span><br><span class="line"> <span class="string">'__getattr__'</span>: &lt;function Point.__getattr__ at <span class="number">0x0000016930285268</span>&gt;, \</span><br><span class="line"> <span class="string">'__getattribute__'</span>: &lt;function Point.__getattribute__ at <span class="number">0x0000016930285598</span>&gt;, <span class="string">'__doc__'</span>: <span class="literal">None</span>&#125;</span><br><span class="line"></span><br><span class="line">print(Point.z) <span class="comment"># 6</span></span><br></pre></td></tr></table></figure><p>实例的所有的属性访问，第一个都会调用<code>__getattribute__</code>方法，它阻止了属性的查找，该方法应该返回（计算后的）值或者抛出一个AttributeError异常</p><ul><li>它的return值将作为属性查找的结果</li><li><p>如果抛出AttributeError异常，则会直接调用<code>__getattr__</code>方法，表示属性没有找到</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Base</span>:</span></span><br><span class="line">    n = <span class="number">0</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Point</span><span class="params">(Base)</span>:</span></span><br><span class="line">    z = <span class="number">6</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, x , y)</span>:</span></span><br><span class="line">        self.x = x</span><br><span class="line">        self.y = y</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__getattr__</span><span class="params">(self, item)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> <span class="string">"missing &#123;&#125;"</span>.format(item)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__getattribute__</span><span class="params">(self, item)</span>:</span></span><br><span class="line">        <span class="comment"># raise AttributeError("Not Found")</span></span><br><span class="line">        <span class="comment"># pass</span></span><br><span class="line">        <span class="comment"># return self.__dict__[item] # RecursionError</span></span><br><span class="line">        <span class="keyword">return</span> object.__getattribute__(self, item)</span><br><span class="line">p1 = Point(<span class="number">4</span>, <span class="number">5</span>)</span><br><span class="line">print(p1.__dict__) <span class="comment"># &#123;'x': 4, 'y': 5&#125;</span></span><br><span class="line">print(p1.x) <span class="comment"># 4</span></span><br><span class="line">print(p1.z) <span class="comment"># 6</span></span><br><span class="line">print(p1.n) <span class="comment"># 0</span></span><br><span class="line">print(p1.t) <span class="comment"># missing t</span></span><br><span class="line">print(Point.__dict__)</span><br><span class="line"><span class="comment"># &#123;'__module__': '__main__', 'z': 6, '__init__': &lt;function Point.__init__ at 0x0000029AF7765158&gt;, \</span></span><br><span class="line"><span class="string">'__getattr__'</span>: &lt;function Point.__getattr__ at <span class="number">0x0000029AF7765268</span>&gt;, \</span><br><span class="line"><span class="string">'__getattribute__'</span>: &lt;function Point.__getattribute__ at <span class="number">0x0000029AF7765598</span>&gt;, <span class="string">'__doc__'</span>: <span class="literal">None</span>&#125;</span><br><span class="line"></span><br><span class="line">print(Point.z) <span class="comment"># 6</span></span><br></pre></td></tr></table></figure></li><li><p><code>__getattribute__</code>方法中为了避免在该方法中无限的递归，它的实现应该永远调用基类的同名方法打以访问需要的任何属性，例如<code>object.__getattribute__(self, item)</code></p></li><li>除非明确地知道<code>__getattribute__</code>方法用来做什么，否则不要使用它<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2>|魔术方法|意义|<br>|:–|:–|<br>|<code>__getattr__()</code>|当通过搜索实例、实例的类及祖先类<strong>查不到</strong>属性，就会调用此方法|<br>|<code>__setattr__()</code>|通过<code>.</code>点访问实例属性，进行增加、修改都要调用它|<br>|<code>__delattr__()</code>|当通过实例来删除属性时调用此方法|<br>|<code>__getattribute__()</code>|实例所有的属性调用都从这个方法开始|</li><li>属性查找顺序：<br><code>实例调用__getattribute__()</code> –&gt; <code>instance.__dict__</code> –&gt; <code>instance.__class__.__dict__</code> –&gt; <code>继承的祖先类(直到object)的__dict__</code>–&gt;<code>调用__getattr__()</code></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;概述&quot;&gt;&lt;a href=&quot;#概述&quot; class=&quot;headerlink&quot; title=&quot;概述&quot;&gt;&lt;/a&gt;概述&lt;/h1&gt;&lt;p&gt;运行时，区别于编译时，指的是程序被加载到内存中执行的时候&lt;br&gt;反射，reflection，指的是运行时获取类型定义信息&lt;br&gt;一个对象能够
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title></title>
    <link href="https://hubhack.github.io/%E5%90%8E%E7%AB%AF/python/%E5%9F%BA%E7%A1%80/Python--%E9%AD%94%E6%9C%AF%E6%96%B9%E6%B3%95--%E4%B8%8A%E4%B8%8B%E6%96%87%E7%AE%A1%E7%90%86/"/>
    <id>https://hubhack.github.io/后端/python/基础/Python--魔术方法--上下文管理/</id>
    <published>2019-08-22T03:06:41.502Z</published>
    <updated>2019-08-19T01:37:46.960Z</updated>
    
    <content type="html"><![CDATA[<p>@<a href="魔术方法">TOC</a></p><h1 id="上下文管理"><a href="#上下文管理" class="headerlink" title="上下文管理"></a>上下文管理</h1><p>文件IO操作可以对文件对象使用上下文管理，使用<code>with..as</code>语法<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">with</span> open(<span class="string">'test'</span>) <span class="keyword">as</span> f:</span><br><span class="line"><span class="keyword">pass</span></span><br></pre></td></tr></table></figure></p><p>仿照上例写一个自己的类，实现上下文管理<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Point</span>：</span></span><br><span class="line"><span class="class"><span class="title">pass</span></span></span><br><span class="line"><span class="class"></span></span><br><span class="line"><span class="class"><span class="title">with</span> <span class="title">Point</span><span class="params">()</span> <span class="title">as</span> <span class="title">p</span>:</span> <span class="comment"># AttributeError: __exit__</span></span><br><span class="line"><span class="keyword">pass</span></span><br></pre></td></tr></table></figure></p><p>提示属性错误，没有<code>__exit__</code>，看了需要这个属性<br>某些版本会显示没有<code>__enter__</code></p><h1 id="上下文管理对象"><a href="#上下文管理对象" class="headerlink" title="上下文管理对象"></a>上下文管理对象</h1><p>当一个对象同时实现了<code>__enter()__</code>和<code>__exit__()</code>方法，它就属于上席文管理的对象<br>|方法|意义|<br>|:–|:–|<br>|<code>__enter__</code>|进入与此对象相关的上下文。如果存在该方法，with语法会把该方法的返回值作为绑定到as子句中指定的变量上|<br>|<code>__exit__</code>|退出与此对象相关的上下文|<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Point</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self)</span>:</span></span><br><span class="line">        print(<span class="string">'init ========='</span>)</span><br><span class="line">        time.sleep(<span class="number">1</span>)</span><br><span class="line">        print(<span class="string">'init over ====='</span>)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__enter__</span><span class="params">(self)</span>:</span></span><br><span class="line">        print(<span class="string">'enter ========'</span>)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__exit__</span><span class="params">(self, exc_type, exc_val, exc_tb)</span>:</span></span><br><span class="line">        print(<span class="string">'exit ========='</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">with</span> Point() <span class="keyword">as</span> p:</span><br><span class="line">    print(<span class="string">'in with ========='</span>)</span><br><span class="line">    time.sleep(<span class="number">2</span>)</span><br><span class="line">    print(<span class="string">'with over ========'</span>)</span><br><span class="line"></span><br><span class="line">print(<span class="string">'======end======'</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 执行结果</span></span><br><span class="line">init =========</span><br><span class="line">init over =====</span><br><span class="line">enter ========</span><br><span class="line"><span class="keyword">in</span> <span class="keyword">with</span> =========</span><br><span class="line"><span class="keyword">with</span> over ========</span><br><span class="line">exit =========</span><br><span class="line">======end======</span><br></pre></td></tr></table></figure></p><ul><li>实例化对象的时候，并不会调用enter，进入with语句块调用<code>__enter__</code>方法，然后执行语句体，最后离开with语句块的时候，调用<code>__exit__</code>方法</li><li>with可以开启一个上下文运行环境，在执行前做一些准备工作，执行后做一些首位工作。</li><li>注意，with并不开启一个新的作用域<h1 id="上下文管理的安全性"><a href="#上下文管理的安全性" class="headerlink" title="上下文管理的安全性"></a>上下文管理的安全性</h1></li><li>异常对上下文的影响<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Point</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self)</span>:</span></span><br><span class="line">        print(<span class="string">'init ========='</span>)</span><br><span class="line">        time.sleep(<span class="number">1</span>)</span><br><span class="line">        print(<span class="string">'init over ====='</span>)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__enter__</span><span class="params">(self)</span>:</span></span><br><span class="line">        print(<span class="string">'enter ========'</span>)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__exit__</span><span class="params">(self, exc_type, exc_val, exc_tb)</span>:</span></span><br><span class="line">        print(<span class="string">'exit ========='</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">with</span> Point() <span class="keyword">as</span> p:</span><br><span class="line">    print(<span class="string">'in with ========='</span>)</span><br><span class="line">    <span class="keyword">raise</span> Exception(<span class="string">'error'</span>)</span><br><span class="line">    time.sleep(<span class="number">2</span>)</span><br><span class="line">    print(<span class="string">'with over ========'</span>)</span><br><span class="line"></span><br><span class="line">print(<span class="string">'======end======'</span>)</span><br></pre></td></tr></table></figure></li></ul><p>执行结果<br><img src="https://img-blog.csdnimg.cn/20190525114734965.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3B5dGhvbl9scXg=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>虽然有异常弹出，但是enter和exit照样执行，<strong>上下文管理是安全的</strong></p><ul><li>极端的例子<br>调用sys.exit()，它会退出当前解释器<br>打开python解释器，在里面输入 sys.exit()，窗口直接关闭，也就是说碰到这一句，Python运行环境直接退出<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Point</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self)</span>:</span></span><br><span class="line">        print(<span class="string">'init ========='</span>)</span><br><span class="line">        time.sleep(<span class="number">1</span>)</span><br><span class="line">        print(<span class="string">'init over ====='</span>)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__enter__</span><span class="params">(self)</span>:</span></span><br><span class="line">        print(<span class="string">'enter ========'</span>)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__exit__</span><span class="params">(self, exc_type, exc_val, exc_tb)</span>:</span></span><br><span class="line">        print(<span class="string">'exit ========='</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">with</span> Point() <span class="keyword">as</span> p:</span><br><span class="line">    print(<span class="string">'in with ========='</span>)</span><br><span class="line">    <span class="keyword">import</span> sys</span><br><span class="line">    sys.exit(<span class="number">1</span>)</span><br><span class="line">    time.sleep(<span class="number">2</span>)</span><br><span class="line">    print(<span class="string">'with over ========'</span>)</span><br><span class="line"></span><br><span class="line">print(<span class="string">'======end======'</span>)</span><br></pre></td></tr></table></figure></li></ul><p>执行结果<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">init =========</span><br><span class="line">init over =====</span><br><span class="line">enter ========</span><br><span class="line"><span class="keyword">in</span> <span class="keyword">with</span> =========</span><br><span class="line">exit =========</span><br><span class="line"></span><br><span class="line">Process finished <span class="keyword">with</span> exit code <span class="number">1</span></span><br></pre></td></tr></table></figure></p><p>从执行结果来看，依然执行了<code>__exit__</code>函数，哪怕是退出Python运行环境<br><strong>说明上下文管理很安全</strong></p><h1 id="with语句"><a href="#with语句" class="headerlink" title="with语句"></a>with语句</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Point</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self)</span>:</span></span><br><span class="line">        print(<span class="string">'init'</span>)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__enter__</span><span class="params">(self)</span>:</span></span><br><span class="line">        print(<span class="string">'enter'</span>)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__exit__</span><span class="params">(self, exc_type, exc_val, exc_tb)</span>:</span></span><br><span class="line">        print(<span class="string">'exit'</span>)</span><br><span class="line"></span><br><span class="line">f = open(<span class="string">'t3.py'</span>)</span><br><span class="line"><span class="keyword">with</span> f <span class="keyword">as</span> p:</span><br><span class="line">    print(f)</span><br><span class="line">    print(p)</span><br><span class="line">    print(<span class="number">1</span>,f <span class="keyword">is</span> p) <span class="comment"># 打印什么</span></span><br><span class="line">    print(<span class="number">2</span>,f == p) <span class="comment"># 打印什么</span></span><br><span class="line"></span><br><span class="line">p = Point()</span><br><span class="line"><span class="keyword">with</span> p <span class="keyword">as</span> f:</span><br><span class="line">    print(<span class="string">'in with-----'</span>)</span><br><span class="line">    print(<span class="number">3</span>,p == f)</span><br><span class="line">    print(<span class="string">'with over'</span>)</span><br><span class="line"></span><br><span class="line">print(<span class="string">'======end======'</span>)</span><br></pre></td></tr></table></figure><p>执行结果<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">&lt;_io.TextIOWrapper name=<span class="string">'t3.py'</span> mode=<span class="string">'r'</span> encoding=<span class="string">'cp936'</span>&gt;</span><br><span class="line">&lt;_io.TextIOWrapper name=<span class="string">'t3.py'</span> mode=<span class="string">'r'</span> encoding=<span class="string">'cp936'</span>&gt;</span><br><span class="line"><span class="number">1</span> <span class="literal">True</span></span><br><span class="line"><span class="number">2</span> <span class="literal">True</span></span><br><span class="line">init</span><br><span class="line">enter</span><br><span class="line"><span class="keyword">in</span> <span class="keyword">with</span>-----</span><br><span class="line"><span class="number">3</span> <span class="literal">False</span></span><br><span class="line"><span class="keyword">with</span> over</span><br><span class="line">exit</span><br><span class="line">======end======</span><br></pre></td></tr></table></figure></p><p>问题在于<code>__enter__</code>方法上，它将自己的返回值赋给f。修改上例<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Point</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self)</span>:</span></span><br><span class="line">        print(<span class="string">'init'</span>)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__enter__</span><span class="params">(self)</span>:</span></span><br><span class="line">        print(<span class="string">'enter'</span>)</span><br><span class="line">        <span class="keyword">return</span> self <span class="comment"># 增加返回值</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__exit__</span><span class="params">(self, exc_type, exc_val, exc_tb)</span>:</span></span><br><span class="line">        print(<span class="string">'exit'</span>)</span><br><span class="line"></span><br><span class="line">p = Point()</span><br><span class="line"><span class="keyword">with</span> p <span class="keyword">as</span> f:</span><br><span class="line">    print(<span class="string">'in with-----'</span>)</span><br><span class="line">    print(p == f)</span><br><span class="line">    print(<span class="string">'with over'</span>)</span><br><span class="line"></span><br><span class="line">print(<span class="string">'======end======'</span>)</span><br></pre></td></tr></table></figure></p><p>执行结果<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">init</span><br><span class="line">enter</span><br><span class="line"><span class="keyword">in</span> <span class="keyword">with</span>-----</span><br><span class="line"><span class="literal">True</span></span><br><span class="line"><span class="keyword">with</span> over</span><br><span class="line">exit</span><br><span class="line">======end======</span><br></pre></td></tr></table></figure></p><p>with语句，会调用with后的对象的<code>__enter__</code>方法，如果有as，则将该方法的返回值赋给as子句的变量<br>上例，可以等价为<code>f = p.__enter__()</code></p><h2 id="方法的参数"><a href="#方法的参数" class="headerlink" title="方法的参数"></a>方法的参数</h2><p><code>__enter__</code>方法 没有其他参数<br><code>__exit__</code>方法有3个参数<br><code>__exit__(self, exc_type, exc_value, traceback)</code></p><ul><li>这三个参数都与异常有关。</li><li>如果该上下文退出时没有异常，这3个参数都为None</li><li>如果有异常，参数意义如下：<br><code>exc_type</code>，异常类型<br><code>exc_value</code>，异常的值<br><code>traceback</code>，异常的追踪信息</li><li><code>__exit__</code>方法返回一个等效True的值，则压制异常；否则，继续抛出异常<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Point</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self)</span>:</span></span><br><span class="line">        print(<span class="string">'init'</span>)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__enter__</span><span class="params">(self)</span>:</span></span><br><span class="line">        print(<span class="string">'enter'</span>)</span><br><span class="line">        <span class="keyword">return</span> self <span class="comment"># 增加返回值</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__exit__</span><span class="params">(self, exc_type, exc_val, exc_tb)</span>:</span></span><br><span class="line">        print(<span class="number">1</span>, exc_type)</span><br><span class="line">        print(<span class="number">2</span>, exc_val)</span><br><span class="line">        print(<span class="number">3</span>, exc_tb)</span><br><span class="line">        print(<span class="string">'exit'</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="string">'abc'</span> <span class="comment"># return 值恒等为True，压制报错</span></span><br><span class="line">        <span class="comment"># return None # 0 # []</span></span><br><span class="line"></span><br><span class="line">p = Point()</span><br><span class="line"><span class="keyword">with</span> p <span class="keyword">as</span> f:</span><br><span class="line">    print(<span class="string">'in with-----'</span>)</span><br><span class="line">    <span class="keyword">raise</span> Exception(<span class="string">'Error'</span>)</span><br><span class="line">    print(<span class="string">'with over'</span>)</span><br><span class="line"></span><br><span class="line">print(<span class="string">'======end======'</span>)</span><br></pre></td></tr></table></figure></li></ul><p>执行结果<br><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">init</span><br><span class="line">enter</span><br><span class="line"><span class="keyword">in</span> <span class="keyword">with</span>-----</span><br><span class="line"><span class="number">1</span> &lt;<span class="class"><span class="keyword">class</span> '<span class="title">Exception</span>'&gt;</span></span><br><span class="line"><span class="class">2 <span class="title">Error</span></span></span><br><span class="line"><span class="class">3 &lt;<span class="title">traceback</span> <span class="title">object</span> <span class="title">at</span> 0<span class="title">x00000259B3BFDB88</span>&gt;</span></span><br><span class="line"><span class="class"><span class="title">exit</span></span></span><br><span class="line">======end======</span><br></pre></td></tr></table></figure></p><h2 id="练习"><a href="#练习" class="headerlink" title="练习"></a>练习</h2><p>为加法函数计时<br>方法1、使用装饰器显示该函数的执行市场<br>方法2、使用上下文管理方法来显示该函数的执行时长<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">add</span><span class="params">(x, y)</span>:</span></span><br><span class="line">    time.sleep(<span class="number">2</span>)</span><br><span class="line">    <span class="keyword">return</span> x + y</span><br></pre></td></tr></table></figure></p><h3 id="装饰器实现"><a href="#装饰器实现" class="headerlink" title="装饰器实现"></a>装饰器实现</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">import</span> datetime</span><br><span class="line"><span class="keyword">from</span> functools <span class="keyword">import</span> wraps</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">timeit</span><span class="params">(fn)</span>:</span></span><br><span class="line"><span class="meta">    @wraps(fn)</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">wrapper</span><span class="params">(*args, **kwargs)</span>:</span></span><br><span class="line">        start = datetime.datetime.now()</span><br><span class="line">        ret = fn(*args, **kwargs)</span><br><span class="line">        delta = (datetime.datetime.now() - start).total_seconds()</span><br><span class="line">        print(<span class="string">'&#123;&#125; took &#123;&#125;s'</span>.format(fn.__name__,delta))</span><br><span class="line">        <span class="keyword">return</span> ret</span><br><span class="line">    <span class="keyword">return</span> wrapper</span><br><span class="line"></span><br><span class="line"><span class="meta">@timeit</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">add</span><span class="params">(x, y)</span>:</span></span><br><span class="line">    time.sleep(<span class="number">2</span>)</span><br><span class="line">    <span class="keyword">return</span> x + y</span><br><span class="line"></span><br><span class="line">print(add(<span class="number">4</span>,<span class="number">5</span>))</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">add</span><span class="params">(x, y)</span>:</span></span><br><span class="line">    time.sleep(<span class="number">2</span>)</span><br><span class="line">    <span class="keyword">return</span> x + y</span><br><span class="line"></span><br><span class="line"><span class="comment"># 执行结果</span></span><br><span class="line">add took <span class="number">2.000913</span>s</span><br><span class="line"><span class="number">9</span></span><br></pre></td></tr></table></figure><h3 id="上下文实现"><a href="#上下文实现" class="headerlink" title="上下文实现"></a>上下文实现</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">import</span> datetime</span><br><span class="line"><span class="keyword">from</span> functools <span class="keyword">import</span> wraps</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">timeit</span><span class="params">(fn)</span>:</span></span><br><span class="line"><span class="meta">    @wraps(fn)</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">wrapper</span><span class="params">(*args, **kwargs)</span>:</span></span><br><span class="line">        start = datetime.datetime.now()</span><br><span class="line">        ret = fn(*args, **kwargs)</span><br><span class="line">        delta = (datetime.datetime.now() - start).total_seconds()</span><br><span class="line">        print(<span class="string">'&#123;&#125; took &#123;&#125;s'</span>.format(fn.__name__,delta))</span><br><span class="line">        <span class="keyword">return</span> ret</span><br><span class="line">    <span class="keyword">return</span> wrapper</span><br><span class="line"></span><br><span class="line"><span class="meta">@timeit</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">add</span><span class="params">(x, y)</span>:</span></span><br><span class="line">    time.sleep(<span class="number">2</span>)</span><br><span class="line">    <span class="keyword">return</span> x + y</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">TimeIt</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, fn)</span>:</span></span><br><span class="line">        self.fn = fn</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__enter__</span><span class="params">(self)</span>:</span></span><br><span class="line">        self.start = datetime.datetime.now()</span><br><span class="line">        <span class="keyword">return</span> self.fn</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__exit__</span><span class="params">(self, exc_type, exc_val, exc_tb)</span>:</span></span><br><span class="line">        delta = (datetime.datetime.now() - self.start).total_seconds()</span><br><span class="line">        print(<span class="string">"&#123;&#125; took &#123;&#125;s"</span>.format(self.fn.__name__,delta))</span><br><span class="line"></span><br><span class="line"><span class="keyword">with</span> TimeIt(add) <span class="keyword">as</span> fn:</span><br><span class="line">    print(add(<span class="number">4</span>, <span class="number">7</span>))</span><br><span class="line">   </span><br><span class="line"><span class="comment"># 执行结果</span></span><br><span class="line">add took <span class="number">2.000563</span>s</span><br><span class="line"><span class="number">11</span></span><br><span class="line">add took <span class="number">2.000563</span>s</span><br></pre></td></tr></table></figure><h3 id="可调用对象实现"><a href="#可调用对象实现" class="headerlink" title="可调用对象实现"></a>可调用对象实现</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">import</span> datetime</span><br><span class="line"><span class="keyword">from</span> functools <span class="keyword">import</span> wraps</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">timeit</span><span class="params">(fn)</span>:</span></span><br><span class="line"><span class="meta">    @wraps(fn)</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">wrapper</span><span class="params">(*args, **kwargs)</span>:</span></span><br><span class="line">        start = datetime.datetime.now()</span><br><span class="line">        ret = fn(*args, **kwargs)</span><br><span class="line">        delta = (datetime.datetime.now() - start).total_seconds()</span><br><span class="line">        print(<span class="string">'&#123;&#125; took &#123;&#125;s'</span>.format(fn.__name__,delta))</span><br><span class="line">        <span class="keyword">return</span> ret</span><br><span class="line">    <span class="keyword">return</span> wrapper</span><br><span class="line"></span><br><span class="line"><span class="meta">@timeit</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">add</span><span class="params">(x, y)</span>:</span></span><br><span class="line">    time.sleep(<span class="number">2</span>)</span><br><span class="line">    <span class="keyword">return</span> x + y</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">TimeIt</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, fn)</span>:</span></span><br><span class="line">        self.fn = fn</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__enter__</span><span class="params">(self)</span>:</span></span><br><span class="line">        self.start = datetime.datetime.now()</span><br><span class="line">        <span class="keyword">return</span> self.fn</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__exit__</span><span class="params">(self, exc_type, exc_val, exc_tb)</span>:</span></span><br><span class="line">        delta = (datetime.datetime.now() - self.start).total_seconds()</span><br><span class="line">        print(<span class="string">"&#123;&#125; took &#123;&#125;s"</span>.format(self.fn.__name__,delta))</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__call__</span><span class="params">(self, x, y)</span>:</span></span><br><span class="line">        print(x, y)</span><br><span class="line">        <span class="keyword">return</span> self.fn(x, y)</span><br><span class="line"></span><br><span class="line"><span class="keyword">with</span> TimeIt(add) <span class="keyword">as</span> timeitobj:</span><br><span class="line">    print(timeitobj(<span class="number">4</span>, <span class="number">7</span>))</span><br><span class="line"></span><br><span class="line"><span class="comment"># 执行结果</span></span><br><span class="line">add took <span class="number">2.000302</span>s</span><br><span class="line"><span class="number">11</span></span><br><span class="line">add took <span class="number">2.000302</span>s</span><br></pre></td></tr></table></figure><p>将上面代码的类当装饰器使用<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">import</span> datetime</span><br><span class="line"><span class="keyword">from</span> functools <span class="keyword">import</span> wraps</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">TimeIt</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, fn)</span>:</span></span><br><span class="line">        self.fn = fn</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__enter__</span><span class="params">(self)</span>:</span></span><br><span class="line">        self.start = datetime.datetime.now()</span><br><span class="line">        <span class="keyword">return</span> self.fn</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__exit__</span><span class="params">(self, exc_type, exc_val, exc_tb)</span>:</span></span><br><span class="line">        delta = (datetime.datetime.now() - self.start).total_seconds()</span><br><span class="line">        print(<span class="string">"&#123;&#125; took &#123;&#125;s"</span>.format(self.fn.__name__,delta))</span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__call__</span><span class="params">(self, *args, **kwargs)</span>:</span></span><br><span class="line">        self.start = datetime.datetime.now()</span><br><span class="line">        ret = self.fn(*args, **kwargs)</span><br><span class="line">        self.delta = (datetime.datetime.now() - self.start).total_seconds()</span><br><span class="line">        print(<span class="string">'&#123;&#125; took &#123;&#125;s'</span>.format(self.fn.__name__, self.delta))</span><br><span class="line">        <span class="keyword">return</span> ret</span><br><span class="line"></span><br><span class="line"><span class="meta">@TimeIt</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">add</span><span class="params">(x, y)</span>:</span></span><br><span class="line">    <span class="string">"""This is add function."""</span></span><br><span class="line">    time.sleep(<span class="number">2</span>)</span><br><span class="line">    <span class="keyword">return</span> x + y</span><br><span class="line"></span><br><span class="line">add(<span class="number">4</span>, <span class="number">5</span>)</span><br><span class="line">print(add.__doc__)</span><br><span class="line"><span class="comment"># print(add.__name__) # 异常，没有此属性</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 执行结果</span></span><br><span class="line">add took <span class="number">2.000581</span>s</span><br><span class="line"><span class="literal">None</span></span><br></pre></td></tr></table></figure></p><p><strong>解决文档字符串的问题</strong></p><ul><li><p>方法一<br>直接修改<code>__doc__</code></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">TimeIt</span>:</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, fn=None)</span>:</span></span><br><span class="line">self.fn = fn</span><br><span class="line"><span class="comment"># 把函数对象的文档字符串赋给类</span></span><br><span class="line">self.__doc__ = fn.__foc__</span><br></pre></td></tr></table></figure></li><li><p>方法2<br>使用<code>functools.wraps</code>函数</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">import</span> datetime</span><br><span class="line"><span class="keyword">from</span> functools <span class="keyword">import</span> wraps</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">TimeIt</span>:</span></span><br><span class="line">    <span class="string">"""This is A Class"""</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, fn)</span>:</span></span><br><span class="line">        self.fn = fn</span><br><span class="line">        <span class="comment"># 把函数对象的文档字符串赋给类</span></span><br><span class="line">        <span class="comment"># self.__doc__ = fn.__doc__</span></span><br><span class="line">        <span class="comment"># update_wrapper(self, fn)</span></span><br><span class="line">        wraps(fn)(self)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__enter__</span><span class="params">(self)</span>:</span></span><br><span class="line">        self.start = datetime.datetime.now()</span><br><span class="line">        <span class="keyword">return</span> self.fn</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__exit__</span><span class="params">(self, exc_type, exc_val, exc_tb)</span>:</span></span><br><span class="line">        delta = (datetime.datetime.now() - self.start).total_seconds()</span><br><span class="line">        print(<span class="string">"&#123;&#125; took &#123;&#125;s"</span>.format(self.fn.__name__,delta))</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__call__</span><span class="params">(self, *args, **kwargs)</span>:</span></span><br><span class="line">        self.start = datetime.datetime.now()</span><br><span class="line">        ret = self.fn(*args, **kwargs)</span><br><span class="line">        self.delta = (datetime.datetime.now() - self.start).total_seconds()</span><br><span class="line">        print(<span class="string">'&#123;&#125; took &#123;&#125;s'</span>.format(self.fn.__name__, self.delta))</span><br><span class="line">        <span class="keyword">return</span> ret</span><br><span class="line"></span><br><span class="line"><span class="meta">@TimeIt</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">add</span><span class="params">(x, y)</span>:</span></span><br><span class="line">    <span class="string">"""This is add function."""</span></span><br><span class="line">    time.sleep(<span class="number">2</span>)</span><br><span class="line">    <span class="keyword">return</span> x + y</span><br><span class="line"></span><br><span class="line">print(add(<span class="number">4</span>, <span class="number">5</span>))</span><br><span class="line">print(add.__doc__)</span><br><span class="line">print(TimeIt(add).__doc__)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 执行结果</span></span><br><span class="line">add took <span class="number">2.000641</span>s</span><br><span class="line"><span class="number">9</span></span><br><span class="line">This <span class="keyword">is</span> add function.</span><br><span class="line">This <span class="keyword">is</span> add function.</span><br></pre></td></tr></table></figure></li></ul><p>上面的类即可以用在上下文管理，又可以用作装饰器</p><h1 id="上下文应用场景"><a href="#上下文应用场景" class="headerlink" title="上下文应用场景"></a>上下文应用场景</h1><ol><li>增强功能<br>在代码执行的前后增加代码，以增强其功能。类似装饰器的功能</li><li>资源管理<br>打开了资源需要关闭，例如文件对象、网络连接、数据库连接等</li><li>权限验证<br>在执行代码之前，做权限的验证，在<code>__enter__</code>中处理<h1 id="contextlib-contextmanager"><a href="#contextlib-contextmanager" class="headerlink" title="contextlib.contextmanager"></a>contextlib.contextmanager</h1></li></ol><ul><li>它是一个装饰器实现上下文管理，装饰一个<strong>函数</strong>，而不用像类一样实现<code>__enter__</code>和<code>__exit__</code>方法</li><li>对下面的函数有要求，<strong>必须有yield</strong>，也就是这个函数必须返回一个生成器，<strong>且只有yield一个值</strong></li><li>这个装饰器接受一个生成器对象作为参数<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> contextlib</span><br><span class="line"></span><br><span class="line"><span class="meta">@contextlib.contextmanager</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">foo</span><span class="params">()</span>:</span></span><br><span class="line">    print(<span class="string">'enter'</span>) <span class="comment"># 相当于__enter__()</span></span><br><span class="line">    <span class="keyword">yield</span> <span class="comment"># yield 5, yield的值只能有一个，作为__enter__方法的返回值</span></span><br><span class="line">    print(<span class="string">'exit'</span>) <span class="comment"># 相当于 __exit__()</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">with</span> foo() <span class="keyword">as</span> f:</span><br><span class="line">    <span class="comment"># raise Exception()</span></span><br><span class="line">    print(f)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 执行结果</span></span><br><span class="line">enter</span><br><span class="line"><span class="literal">None</span></span><br><span class="line">exit</span><br></pre></td></tr></table></figure></li></ul><p><strong>as后的f接受yield语句的返回值</strong></p><ul><li>上面程序如果打开 <code>raise Exception()</code>语句，则<code>print(&#39;exit&#39;)</code>不会执行</li><li><p>解决办法：增加<code>try finally</code></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> contextlib</span><br><span class="line"></span><br><span class="line"><span class="meta">@contextlib.contextmanager</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">foo</span><span class="params">()</span>:</span></span><br><span class="line">    print(<span class="string">'enter'</span>) <span class="comment"># 相当于__enter__()</span></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        <span class="keyword">yield</span> <span class="comment"># yield 5, yield的值只能有一个，作为__enter__方法的返回值</span></span><br><span class="line">    <span class="keyword">finally</span>:</span><br><span class="line">        print(<span class="string">'exit'</span>) <span class="comment"># 相当于 __exit__()</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">with</span> foo() <span class="keyword">as</span> f:</span><br><span class="line">    <span class="keyword">raise</span> Exception()</span><br><span class="line">    print(f)</span><br></pre></td></tr></table></figure><p>执行结果<br><img src="https://img-blog.csdnimg.cn/20190525165804986.png" alt="在这里插入图片描述"><br>上例当yield发生处为生成器函数增加了上下文管理。这就是为函数增加上下文机制的方式</p><ul><li>把yield之前的当做<code>__enter__</code>方法执行</li><li>把yield之后的当做<code>__exit__</code>方法执行</li><li>把yield的值作为<code>__enter__</code>的返回值<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> contextlib</span><br><span class="line"><span class="keyword">import</span> datetime</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line"><span class="meta">@contextlib.contextmanager</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">foo</span><span class="params">(x, y)</span>:</span> <span class="comment"># 为生成器函数增加了上下文管理</span></span><br><span class="line">    start = datetime.datetime.now()</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        time.sleep(<span class="number">2</span>)</span><br><span class="line">        <span class="keyword">yield</span> x + y <span class="comment">#yield的值只能有一个，__enter__方法的返回值</span></span><br><span class="line">    <span class="keyword">finally</span>:</span><br><span class="line">        delta = (datetime.datetime.now() - start).total_seconds()</span><br><span class="line">        print(delta) <span class="comment"># 相当于 __exit__()</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">with</span> foo(<span class="number">4</span>, <span class="number">5</span>) <span class="keyword">as</span> f:</span><br><span class="line">    <span class="comment"># raise Exception()</span></span><br><span class="line">    print(f)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 执行结果</span></span><br><span class="line"><span class="number">9</span></span><br><span class="line"><span class="number">2.000907</span></span><br></pre></td></tr></table></figure></li></ul></li></ul><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>如果业务逻辑加单可以使用函数加<code>contextlib.contextmanager</code>装饰器方式，如果业务复杂，用类的方式加<code>__enter__</code>和<code>__exit__</code>方法方便</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;@&lt;a href=&quot;魔术方法&quot;&gt;TOC&lt;/a&gt;&lt;/p&gt;
&lt;h1 id=&quot;上下文管理&quot;&gt;&lt;a href=&quot;#上下文管理&quot; class=&quot;headerlink&quot; title=&quot;上下文管理&quot;&gt;&lt;/a&gt;上下文管理&lt;/h1&gt;&lt;p&gt;文件IO操作可以对文件对象使用上下文管理，使用&lt;cod
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title></title>
    <link href="https://hubhack.github.io/%E5%90%8E%E7%AB%AF/python/%E5%9F%BA%E7%A1%80/Python--%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1--%E7%B1%BB%E7%9A%84%E7%BB%A7%E6%89%BF/"/>
    <id>https://hubhack.github.io/后端/python/基础/Python--面向对象--类的继承/</id>
    <published>2019-08-22T03:06:41.497Z</published>
    <updated>2019-08-19T01:38:22.606Z</updated>
    
    <content type="html"><![CDATA[<p>@<a href="类的继承">TOC</a></p><h1 id="基本概念"><a href="#基本概念" class="headerlink" title="基本概念"></a>基本概念</h1><p>面向对象三要素之一，继承Inheritance<br>在面向对象的世界中，从父类继承，就可以直接拥有父类的属性和方法，这样可以减少代码、多复用。子类可以定义自己的属性和方法</p><h1 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h1><p>格式如下<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> 子类名<span class="params">(基类<span class="number">1</span>[,基类<span class="number">2</span>,...])</span>:</span></span><br><span class="line">语句块</span><br></pre></td></tr></table></figure></p><p>如果类定义时，没有基类列表，等同于继承自object。在Python3中，object类是所有对象的<strong>根基类</strong><br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">A</span>:</span></span><br><span class="line"><span class="keyword">pass</span></span><br><span class="line"><span class="comment"># 等价于</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">A</span><span class="params">(object)</span>:</span></span><br><span class="line"><span class="keyword">pass</span></span><br></pre></td></tr></table></figure></p><p>注意，上例在Python2中，两种写法是不同的<br>Python支持多继承，继承也可以多级</p><ul><li>继承<br>class Son(Father) 这种形式就是父类继承，括号中写上继承的类的列表<br>继承可以让子类从父类获取特征（属性和方法）</li><li>父类<br>Father就是Son的父类，也称为基类、超类</li><li>子类<br>Son就是Father的子类，也称为派生类<h2 id="单一继承-括号类写一个"><a href="#单一继承-括号类写一个" class="headerlink" title="单一继承(括号类写一个)"></a>单一继承(括号类写一个)</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Animal</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">shout</span><span class="params">(self)</span>:</span></span><br><span class="line">        print(<span class="string">'Animal shouts'</span>)</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Cat</span><span class="params">(Animal)</span>:</span></span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line">a = Animal()</span><br><span class="line">a.shout() <span class="comment"># Animal shouts</span></span><br><span class="line">c = Cat()</span><br><span class="line">c.shout() <span class="comment"># Animal shouts</span></span><br></pre></td></tr></table></figure></li></ul><h2 id="取当前实例类型的名称"><a href="#取当前实例类型的名称" class="headerlink" title="取当前实例类型的名称"></a>取当前实例类型的名称</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Animal</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">shout</span><span class="params">(self)</span>:</span></span><br><span class="line">        print(<span class="string">'&#123;&#125; shouts'</span>.format(type(self).__name__))</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Cat</span><span class="params">(Animal)</span>:</span></span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line">a = Animal()</span><br><span class="line">a.shout() <span class="comment"># Animal shouts</span></span><br><span class="line">c = Cat()</span><br><span class="line">c.shout() <span class="comment"># Cat shouts</span></span><br></pre></td></tr></table></figure><h2 id="继承的特殊属性和方法"><a href="#继承的特殊属性和方法" class="headerlink" title="继承的特殊属性和方法"></a>继承的特殊属性和方法</h2><p><img src="https://img-blog.csdnimg.cn/20190519173830170.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3B5dGhvbl9scXg=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Animal</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">shout</span><span class="params">(self)</span>:</span></span><br><span class="line">        print(<span class="string">'&#123;&#125; shouts'</span>.format(type(self).__name__))</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Cat</span><span class="params">(Animal)</span>:</span></span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Dog</span><span class="params">(Animal)</span>:</span></span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line">print(Cat.__base__) <span class="comment"># 类的基类 </span></span><br><span class="line">print(Dog.__bases__) <span class="comment"># 类的基类元祖 </span></span><br><span class="line">print(Animal.__bases__)  <span class="comment"># 类的基类元祖 </span></span><br><span class="line"></span><br><span class="line"><span class="comment"># mro：方法解析顺序，可看清楚继承路线</span></span><br><span class="line">print(Cat.mro() <span class="comment"># 显示方法查找顺序，基类的列表</span></span><br><span class="line">print(Cat.__mro__) <span class="comment">#显示方法查找顺序，基类的元组</span></span><br><span class="line"></span><br><span class="line">print(Animal.__subclasses__()) <span class="comment"># 类的子类列表</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 打印结果</span></span><br><span class="line">&lt;<span class="class"><span class="keyword">class</span> '<span class="title">__main__</span>.<span class="title">Animal</span>'&gt;</span></span><br><span class="line"><span class="class"><span class="params">(&lt;class <span class="string">'__main__.Animal'</span>&gt;,)</span></span></span><br><span class="line"><span class="class"><span class="params">(&lt;class <span class="string">'object'</span>&gt;,)</span></span></span><br><span class="line">[&lt;class '__main__.Cat'&gt;, &lt;class '__main__.Animal'&gt;, &lt;class 'object'&gt;]</span><br><span class="line">(&lt;class '__main__.Cat'&gt;, &lt;class '__main__.Animal'&gt;, &lt;class 'object'&gt;)</span><br><span class="line">[&lt;class '__main__.Cat'&gt;, &lt;class '__main__.Dog'&gt;]</span><br></pre></td></tr></table></figure></p><ul><li>int的子类<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">print(int.__subclasses__()) <span class="comment"># [&lt;class 'bool'&gt;]</span></span><br></pre></td></tr></table></figure></li></ul><h2 id="继承中的访问控制"><a href="#继承中的访问控制" class="headerlink" title="继承中的访问控制"></a>继承中的访问控制</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Animal</span>:</span></span><br><span class="line">   __COUNT = <span class="number">100</span></span><br><span class="line">   HEIGHT = <span class="number">0</span></span><br><span class="line"></span><br><span class="line">   <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self,age, weight, height)</span>:</span></span><br><span class="line">       self.__COUNT += <span class="number">1</span></span><br><span class="line">       self.age = age</span><br><span class="line">       self.__weight = weight</span><br><span class="line">       self.HGIGHT = height</span><br><span class="line"></span><br><span class="line">   <span class="function"><span class="keyword">def</span> <span class="title">eat</span><span class="params">(self)</span>:</span></span><br><span class="line">        print(<span class="string">'&#123;&#125; eat'</span>.format(self.__class__.__name__))</span><br><span class="line"></span><br><span class="line">   <span class="function"><span class="keyword">def</span> <span class="title">__getweight</span><span class="params">(self)</span>:</span></span><br><span class="line">        print(self.__weight)</span><br><span class="line"></span><br><span class="line"><span class="meta">   @classmethod</span></span><br><span class="line">   <span class="function"><span class="keyword">def</span> <span class="title">showcount1</span><span class="params">(cls)</span>:</span></span><br><span class="line">        print(cls)</span><br><span class="line">        print(cls.__dict__)</span><br><span class="line">        print(cls.__COUNT)</span><br><span class="line"></span><br><span class="line"><span class="meta">   @classmethod</span></span><br><span class="line">   <span class="function"><span class="keyword">def</span> <span class="title">__showcount2</span><span class="params">(cls)</span>:</span></span><br><span class="line">        print(cls.__COUNT)</span><br><span class="line"></span><br><span class="line">   <span class="function"><span class="keyword">def</span> <span class="title">showcount3</span><span class="params">(self)</span>:</span></span><br><span class="line">        print(self.__COUNT)</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Cat</span><span class="params">(Animal)</span>:</span></span><br><span class="line">    NAME = <span class="string">'CAT'</span></span><br><span class="line">    __COUNT = <span class="number">200</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># c = Cat() # __init__ 函数参数错误</span></span><br><span class="line">c = Cat(<span class="number">3</span>, <span class="number">5</span>, <span class="number">15</span>)</span><br><span class="line">c.eat() <span class="comment"># Cat eat</span></span><br><span class="line">print(c.HEIGHT) <span class="comment">#  0</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># print(c.__COUNT)</span></span><br><span class="line"><span class="comment"># AttributeError, 可通过c._Animal__COUNT访问 # 101</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># c.__getweight()</span></span><br><span class="line"><span class="comment"># AttributeError, 可通过c._Animal__getweight()访问 # 5</span></span><br><span class="line"></span><br><span class="line">c.showcount1()</span><br><span class="line"><span class="comment"># 打印结果</span></span><br><span class="line"><span class="comment"># &lt;class '__main__.Cat'&gt;</span></span><br><span class="line"><span class="comment"># &#123;'__module__': '__main__', 'NAME': 'CAT', '_Cat__COUNT': 200, '__doc__': None&#125;</span></span><br><span class="line"><span class="comment"># 100</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># c.__showcount2</span></span><br><span class="line"><span class="comment"># AttributeError # 可通过c._Animal__showcount2访问</span></span><br><span class="line"></span><br><span class="line">c.showcount3() <span class="comment"># 101</span></span><br><span class="line">print(c.NAME) <span class="comment"># CAT</span></span><br><span class="line"></span><br><span class="line">print(<span class="string">"&#123;&#125;"</span>.format(Animal.__dict__))</span><br><span class="line"></span><br><span class="line">print(<span class="string">"&#123;&#125;"</span>.format(Cat.__dict__))</span><br><span class="line"><span class="comment"># &#123;'__module__': '__main__', 'NAME': 'CAT', '_Cat__COUNT': 200, '__doc__': None&#125;</span></span><br><span class="line">print(c.__dict__) </span><br><span class="line"><span class="comment"># &#123;'_Animal__COUNT': 101, 'age': 3, '_Animal__weight': 5, 'HGIGHT': 15&#125;</span></span><br><span class="line"></span><br><span class="line">print(c.__class__.mro()) </span><br><span class="line"><span class="comment"># [&lt;class '__main__.Cat'&gt;, &lt;class '__main__.Animal'&gt;, &lt;class 'object'&gt;]</span></span><br></pre></td></tr></table></figure><h1 id="方法的重写、覆盖override"><a href="#方法的重写、覆盖override" class="headerlink" title="方法的重写、覆盖override"></a>方法的重写、覆盖override</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Animal</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">shout</span><span class="params">(self)</span>:</span></span><br><span class="line">        print(<span class="string">'Animal shouts'</span>)</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Cat</span><span class="params">(Animal)</span>:</span></span><br><span class="line">    <span class="comment"># 覆盖了父类方法</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">shout</span><span class="params">(self)</span>:</span></span><br><span class="line">        print(<span class="string">'miao'</span>)</span><br><span class="line"></span><br><span class="line">a = Animal()</span><br><span class="line">a.shout()</span><br><span class="line">c = Cat() <span class="comment"># Animal shouts</span></span><br><span class="line">c.shout() <span class="comment"># miao</span></span><br><span class="line"></span><br><span class="line">print(a.__dict__)</span><br><span class="line">print(c.__dict__)</span><br><span class="line">print(Animal.__dict__)</span><br><span class="line">print(Cat.__dict__)</span><br></pre></td></tr></table></figure><ul><li>Cat中能够有覆盖自己的方法?<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Animal</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">shout</span><span class="params">(self)</span>:</span></span><br><span class="line">        print(<span class="string">'Animal shouts'</span>)</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Cat</span><span class="params">(Animal)</span>:</span></span><br><span class="line">    <span class="comment"># 覆盖了父类的方法</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">shout</span><span class="params">(self)</span>:</span></span><br><span class="line">        print(<span class="string">'miao'</span>)</span><br><span class="line">        </span><br><span class="line">    <span class="comment"># 覆盖了自身的方法，显示调用了父类的方法</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">shout</span><span class="params">(self)</span>:</span></span><br><span class="line">        print(super()) <span class="comment"># &lt;super: &lt;class 'Cat'&gt;, &lt;Cat object&gt;&gt;</span></span><br><span class="line">        print(super(Cat, self)) <span class="comment"># &lt;super: &lt;class 'Cat'&gt;, &lt;Cat object&gt;&gt;</span></span><br><span class="line">        print(super(self.__class__, self)) <span class="comment"># &lt;super: &lt;class 'Cat'&gt;, &lt;Cat object&gt;&gt;</span></span><br><span class="line"></span><br><span class="line">        super().shout() <span class="comment"># Animal shouts</span></span><br><span class="line">        super(Cat, self).shout() <span class="comment"># 等价于super() # Animal shouts</span></span><br><span class="line">        self.__class__.__base__.shout(self) <span class="comment"># 不推荐 # Animal shouts</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">a = Animal()</span><br><span class="line">a.shout() <span class="comment"># Animal shouts</span></span><br><span class="line">c = Cat() </span><br><span class="line">c.shout() <span class="comment"># miao</span></span><br><span class="line"></span><br><span class="line">print(a.__dict__)</span><br><span class="line">print(c.__dict__)</span><br><span class="line">print(Animal.__dict__)</span><br><span class="line">print(Cat.__dict__)</span><br></pre></td></tr></table></figure></li></ul><h2 id="super"><a href="#super" class="headerlink" title="super()"></a>super()</h2><ul><li>可以访问到父类的类属性</li></ul><h2 id="类方法和静态方法"><a href="#类方法和静态方法" class="headerlink" title="类方法和静态方法"></a>类方法和静态方法</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Animal</span>:</span></span><br><span class="line"><span class="meta">    @classmethod</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">class_method</span><span class="params">(cls)</span>:</span></span><br><span class="line">        print(<span class="string">'class_method_animal'</span>)</span><br><span class="line"></span><br><span class="line"><span class="meta">    @staticmethod</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">static_method</span><span class="params">()</span>:</span></span><br><span class="line">        print(<span class="string">'static_method_animal'</span>)</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Cat</span><span class="params">(Animal)</span>:</span></span><br><span class="line"><span class="meta">    @classmethod</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">class_method</span><span class="params">(cls)</span>:</span></span><br><span class="line">        print(<span class="string">'class_method_cat'</span>)</span><br><span class="line"></span><br><span class="line"><span class="meta">    @staticmethod</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">static_method</span><span class="params">()</span>:</span></span><br><span class="line">        print(<span class="string">'static_method_cat'</span>)</span><br><span class="line"></span><br><span class="line">c = Cat()</span><br><span class="line">c.class_method() <span class="comment"># class_method_cat</span></span><br><span class="line">c.static_method() <span class="comment"># static_method_cat</span></span><br><span class="line"></span><br><span class="line">print(Cat.__dict__)</span><br><span class="line">print(Animal.__dict__)</span><br><span class="line"></span><br><span class="line">Cat.static_method() <span class="comment"># static_method_cat</span></span><br><span class="line">Animal.static_method() <span class="comment"># static_method_animal</span></span><br></pre></td></tr></table></figure><p>这些方法都可以覆盖，原理都一样，属性字典的搜索顺序</p><h1 id="继承时使用初始化"><a href="#继承时使用初始化" class="headerlink" title="继承时使用初始化"></a>继承时使用初始化</h1><ul><li><p>初始化只跟实例字典相关</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">A</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self,a, d=<span class="number">10</span>)</span>:</span></span><br><span class="line">        self.a = a</span><br><span class="line">        self.d = d</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">B</span><span class="params">(A)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, b, c)</span>:</span></span><br><span class="line">        A.__init__(self, b + c, b - c)</span><br><span class="line">        self.b = b</span><br><span class="line">        self.c = c</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">printv</span><span class="params">(self)</span>:</span></span><br><span class="line">        print(self.b) <span class="comment"># 200</span></span><br><span class="line">        print(self.a) <span class="comment"># 500</span></span><br><span class="line"></span><br><span class="line">f = B(<span class="number">200</span>, <span class="number">300</span>)</span><br><span class="line">print(f.__dict__) <span class="comment"># &#123;'a': 500, 'd': -100, 'b': 200, 'c': 300&#125;</span></span><br><span class="line">print(f.__class__.__bases__) <span class="comment"># (&lt;class '__main__.A'&gt;,)</span></span><br><span class="line">f.printv()</span><br></pre></td></tr></table></figure></li><li><p>如果父类定义了<code>__init__</code>方法，应该在子类的<strong>init</strong>中调用它</p></li><li>那么，子类什么时候自动调用父类的<strong>init</strong>方法呢？<h2 id="示例1"><a href="#示例1" class="headerlink" title="示例1"></a>示例1</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">A</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self)</span>:</span></span><br><span class="line">        self.a1 = <span class="string">'a1'</span></span><br><span class="line">        self.a2 = <span class="string">'a2'</span></span><br><span class="line">        print(<span class="string">'init in A'</span>)</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">B</span><span class="params">(A)</span>:</span></span><br><span class="line">   <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line">b = B() <span class="comment"># init in A</span></span><br><span class="line">print(b.__dict__) <span class="comment"># &#123;'a1': 'a1', 'a2': 'a2'&#125;</span></span><br></pre></td></tr></table></figure></li></ul><p>B实例的初始化会自动调用基类A的<code>__init__</code>方法，所以<code>print(&#39;init in A&#39;)</code>会打印出来</p><h2 id="示例2"><a href="#示例2" class="headerlink" title="示例2"></a>示例2</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">A</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self)</span>:</span></span><br><span class="line">        self.a1 = <span class="string">'a1'</span></span><br><span class="line">        self.a2 = <span class="string">'a2'</span></span><br><span class="line">        print(<span class="string">'init in A'</span>)</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">B</span><span class="params">(A)</span>:</span></span><br><span class="line">   <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self)</span>:</span></span><br><span class="line">       self.b1 = <span class="string">'b1'</span></span><br><span class="line">       print(<span class="string">'init in B'</span>)</span><br><span class="line"></span><br><span class="line">b = B() <span class="comment"># init in B</span></span><br><span class="line">print(b.__dict__) <span class="comment"># &#123;'b1': 'b1'&#125;</span></span><br></pre></td></tr></table></figure><p>B实例一旦定义了初始化<code>__init__</code>方法，就不会自动调用父类的初始化<code>__init__</code>方法，需要手动调用<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">A</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self)</span>:</span></span><br><span class="line">        self.a1 = <span class="string">'a1'</span></span><br><span class="line">        self.a2 = <span class="string">'a2'</span></span><br><span class="line">        print(<span class="string">'init in A'</span>)</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">B</span><span class="params">(A)</span>:</span></span><br><span class="line">   <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self)</span>:</span></span><br><span class="line">       self.b1 = <span class="string">'b1'</span></span><br><span class="line">       print(<span class="string">'init in B'</span>)</span><br><span class="line">       A.__init__(self)</span><br><span class="line"></span><br><span class="line">b = B() <span class="comment"># init in B</span></span><br><span class="line"></span><br><span class="line">print(b.__dict__) <span class="comment"># 注意看__a2</span></span><br><span class="line"><span class="comment"># init in A</span></span><br><span class="line"><span class="comment"># &#123;'b1': 'b1', 'a1': 'a1', '_A__a2': 'a2'&#125;</span></span><br></pre></td></tr></table></figure></p><h2 id="正确初始化"><a href="#正确初始化" class="headerlink" title="正确初始化"></a>正确初始化</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Animal</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, age)</span>:</span></span><br><span class="line">        print(<span class="string">'init in Animal'</span>)</span><br><span class="line">        self.age = age</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">show</span><span class="params">(self)</span>:</span></span><br><span class="line">        print(self.age)</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Cat</span><span class="params">(Animal)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, age, weight)</span>:</span></span><br><span class="line">        <span class="comment"># 调用父类的__init__方法的顺序有时决定着show方法的结果</span></span><br><span class="line">        super().__init__(age)</span><br><span class="line">        print(<span class="string">'init in Cat'</span>)</span><br><span class="line">        self.age = age + <span class="number">1</span></span><br><span class="line">        self.weight = weight</span><br><span class="line">        super().__init__(age)</span><br><span class="line"></span><br><span class="line">c = Cat(<span class="number">10</span>, <span class="number">5</span>)</span><br><span class="line"><span class="comment"># 打印结果</span></span><br><span class="line"><span class="comment"># init in Animal</span></span><br><span class="line"><span class="comment"># init in Cat</span></span><br><span class="line"><span class="comment"># init in Animal</span></span><br><span class="line">c.show() <span class="comment">#10</span></span><br></pre></td></tr></table></figure><ul><li>注意，调用父类的<code>__init__</code>方法，出现在不同的位置，可能导致出现不同的结果</li><li><p>将上例中所有的实例属性改成私有变量</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Animal</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, age)</span>:</span></span><br><span class="line">        print(<span class="string">'init in Animal'</span>)</span><br><span class="line">        self.__age = age</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">show</span><span class="params">(self)</span>:</span></span><br><span class="line">        print(self.__age)</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Cat</span><span class="params">(Animal)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, age, weight)</span>:</span></span><br><span class="line">        <span class="comment"># 调用父类的__init__方法的顺序有时决定着show方法的结果</span></span><br><span class="line">        super().__init__(age)</span><br><span class="line">        print(<span class="string">'init in Cat'</span>)</span><br><span class="line">        self.__age = age + <span class="number">1</span></span><br><span class="line">        self.__weight = weight</span><br><span class="line">        super().__init__(age)</span><br><span class="line"></span><br><span class="line">c = Cat(<span class="number">10</span>, <span class="number">5</span>)</span><br><span class="line"><span class="comment"># 打印结果</span></span><br><span class="line"><span class="comment"># init in Animal</span></span><br><span class="line"><span class="comment"># init in Cat</span></span><br><span class="line"><span class="comment"># init in Animal</span></span><br><span class="line">c.show() <span class="comment"># 10</span></span><br><span class="line"></span><br><span class="line">print(c.__dict__) <span class="comment"># &#123;'_Animal__age': 10, '_Cat__age': 11, '_Cat__weight': 5&#125;</span></span><br></pre></td></tr></table></figure></li><li><p>上例中打印10，原因看<code>__dict__</code>就知道了。因为父类Animal的show方法中<code>_age</code>会被解释为<code>_Animal__age</code>，因此显示的是10，而不是11</p></li><li>这样的设计不好，Cat的实例c应该显示自己的属性值更好</li></ul><p>解决的办法：</p><ul><li>一个原则，自己的私有属性，就该自己的方法读取和修改，不要借助其他类的方法，即使是父类或者派生类的方法</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;@&lt;a href=&quot;类的继承&quot;&gt;TOC&lt;/a&gt;&lt;/p&gt;
&lt;h1 id=&quot;基本概念&quot;&gt;&lt;a href=&quot;#基本概念&quot; class=&quot;headerlink&quot; title=&quot;基本概念&quot;&gt;&lt;/a&gt;基本概念&lt;/h1&gt;&lt;p&gt;面向对象三要素之一，继承Inheritance&lt;br&gt;在面向对
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title></title>
    <link href="https://hubhack.github.io/%E5%90%8E%E7%AB%AF/python/%E5%9F%BA%E7%A1%80/Python--%E9%80%92%E5%BD%92%E5%87%BD%E6%95%B0/"/>
    <id>https://hubhack.github.io/后端/python/基础/Python--递归函数/</id>
    <published>2019-08-22T03:06:41.492Z</published>
    <updated>2019-08-19T01:38:17.808Z</updated>
    
    <content type="html"><![CDATA[<p>@<a href>TOC</a></p><h1 id="函数执行流程"><a href="#函数执行流程" class="headerlink" title="函数执行流程"></a>函数执行流程</h1><p><img src="https://img-blog.csdnimg.cn/20190415143707387.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3B5dGhvbl9scXg=,size_16,color_FFFFFF,t_70" alt></p><ul><li>全局帧中生成foo1、foo2、foo3、main函数对象</li><li>main函数调用</li><li>main中查找内建函数print压栈，将常量字符串压栈，调用函数，弹出栈顶</li><li>main中全局查找函数foo1压栈，将常量100、101压栈，调用函数foo1，创建栈帧。print函数压栈，字符串和变量b、b1压栈，调用函数，弹出栈顶，返回值。</li><li>main中全局查找foo2函数压栈，将常量200压栈，调用foo2，创建栈帧。foo3函数压栈，变量c引用压栈，调用foo3，创建栈帧。foo3完成print函数调用后返回。foo2恢复调用，执行print后，返回值。main中foo2调用结束弹出栈顶。main继续执行print函数调用，弹出栈顶，main函数返回</li></ul><h1 id="递归Recursion"><a href="#递归Recursion" class="headerlink" title="递归Recursion"></a>递归Recursion</h1><ul><li>函数直接或者间接调用自身就是 递归</li><li>递归需要有边界条件、递归前进段（计算的过程）、递归返回段（拿到返回值的过程）</li><li>递归一定要有<strong>边界条件</strong></li><li>当边界条件不满足的时候，递归前进</li><li>当边界条件满足的时候，递归返回<h2 id="递归要求"><a href="#递归要求" class="headerlink" title="递归要求"></a>递归要求</h2></li><li>递归一定要有退出条件，递归调用一定要执行到这个退出条件。没有退出条件的递归调用，就是无限调用</li><li>递归调用的深度不宜过深</li><li>Python对递归条用的深度做了限制，以保护解释器</li><li>超过递归深度限制，抛出RecursionReeor：maxinum recursion depth exceeded 超出最大深度</li><li>使用sys.getrecursionlimit()可<strong>查看递归层次限制</strong>，CPython 限制1000<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"></span><br><span class="line">print(sys.getrecursionlimit()) <span class="comment">#输出结果 1000</span></span><br></pre></td></tr></table></figure></li></ul><h2 id="递归的性能fib-35项比较"><a href="#递归的性能fib-35项比较" class="headerlink" title="递归的性能fib 35项比较"></a>递归的性能fib 35项比较</h2><ul><li><p>for循环</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> datetime</span><br><span class="line">start = datetime.datetime.now()</span><br><span class="line">a = <span class="number">0</span></span><br><span class="line">b = <span class="number">1</span></span><br><span class="line">n = <span class="number">35</span></span><br><span class="line"><span class="comment">#循环实现</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(n<span class="number">-1</span>):</span><br><span class="line">    a, b = b, a + b</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    <span class="keyword">pass</span> <span class="comment"># print(b) 9227465</span></span><br><span class="line"></span><br><span class="line">delte</span><br></pre></td></tr></table></figure></li><li><p>循环稍微复杂一些，但是只要不是死循环，可以多次迭代直至算出结果</p></li><li>fib函数代码极简易懂，但是只能获取取到最外层的函数调用，内部递归结果都是中间结果。而且给定一个n都要进行近2n次递归，深度越深<h1 id="递归总结"><a href="#递归总结" class="headerlink" title="递归总结"></a>递归总结</h1></li><li>递归是一种很自然的表达，符合逻辑思维</li><li>递归相对运行效率低，每一次调用函数都要开辟栈帧</li><li>递归有深度限制，如果递归层次太深，函数反复压栈，栈内存很快就溢出了</li><li>如果是有限次数的递归，可以使用递归调用，或者使用循环代替，循环代码稍微复杂一些，但是只要不是死循环，可以多次迭代直至算出结果</li><li>绝大多数递归，都可以使用循环实现</li><li>即使递归代码很简洁，但是<strong>能不用则不用</strong>递归</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;@&lt;a href&gt;TOC&lt;/a&gt;&lt;/p&gt;
&lt;h1 id=&quot;函数执行流程&quot;&gt;&lt;a href=&quot;#函数执行流程&quot; class=&quot;headerlink&quot; title=&quot;函数执行流程&quot;&gt;&lt;/a&gt;函数执行流程&lt;/h1&gt;&lt;p&gt;&lt;img src=&quot;https://img-blog.csd
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title></title>
    <link href="https://hubhack.github.io/%E5%90%8E%E7%AB%AF/python/%E5%9F%BA%E7%A1%80/Python--%E6%A0%91%E7%9A%84%E9%81%8D%E5%8E%86%E5%92%8C%E5%A0%86%E6%8E%92%E5%BA%8F/"/>
    <id>https://hubhack.github.io/后端/python/基础/Python--树的遍历和堆排序/</id>
    <published>2019-08-22T03:06:41.482Z</published>
    <updated>2019-08-19T01:38:42.408Z</updated>
    
    <content type="html"><![CDATA[<p>@<a href>TOC</a></p><h1 id="二叉树的遍历"><a href="#二叉树的遍历" class="headerlink" title="二叉树的遍历"></a>二叉树的遍历</h1><h2 id="遍历"><a href="#遍历" class="headerlink" title="遍历"></a>遍历</h2><ul><li>迭代所有元素一遍<h2 id="树的遍历"><a href="#树的遍历" class="headerlink" title="树的遍历"></a>树的遍历</h2>对树中所有元素不重复地访问一遍，也称作扫描<h3 id="广度优先遍历"><a href="#广度优先遍历" class="headerlink" title="广度优先遍历"></a>广度优先遍历</h3></li><li>层序遍历<h3 id="深度优先遍历"><a href="#深度优先遍历" class="headerlink" title="深度优先遍历"></a>深度优先遍历</h3></li><li>前序遍历</li><li>中序遍历</li><li>后序遍历<h2 id="遍历序列"><a href="#遍历序列" class="headerlink" title="遍历序列"></a>遍历序列</h2></li><li>将树中所有元素遍历一遍后，得到的元素的序列。将层次结构转换成了线性结构 <h3 id="层序遍历"><a href="#层序遍历" class="headerlink" title="层序遍历"></a>层序遍历</h3></li><li>按照树的层次，从第一层开始，自左向右遍历元素</li><li>遍历序列<ul><li>ABCDEFGHI<br><img src="https://img-blog.csdnimg.cn/20190515085511593.png" alt="在这里插入图片描述"><h3 id="深度优先遍历-1"><a href="#深度优先遍历-1" class="headerlink" title="深度优先遍历"></a>深度优先遍历</h3></li></ul></li><li>设树的根结点为D，左子树为L，右子树为R，且要求L一定在R之前，则有下面几种遍历方式：<ul><li>前序遍历，也叫先序遍历、也叫先根遍历，DLR</li><li>中序遍历，也叫中根遍历，LDR</li><li>后序遍历，也叫后根遍历，LRD  <h4 id="前序遍历DLR"><a href="#前序遍历DLR" class="headerlink" title="前序遍历DLR"></a>前序遍历DLR</h4></li></ul></li><li>从根结点开始，先左子树后右子树</li><li>每个子树内部依然是先根结点，再左子树后右子树。递归遍历</li><li>遍历序列<ul><li>A BDGH CEIF<br><img src="https://img-blog.csdnimg.cn/20190515085530265.png" alt="在这里插入图片描述"><h4 id="中序遍历LDR"><a href="#中序遍历LDR" class="headerlink" title="中序遍历LDR"></a>中序遍历LDR</h4></li></ul></li><li>从根结点的左子树开始遍历，然后是根结点，再右子树</li><li>每个子树内部，也是先左子树，后根结点，再右子树。对遍历</li><li>遍历序列<ul><li>左图：GDHB A IECF</li><li>右图：GDHB A EICF<br><img src="https://img-blog.csdnimg.cn/20190515090221438.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3B5dGhvbl9scXg=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><h4 id="后序遍历LRD"><a href="#后序遍历LRD" class="headerlink" title="后序遍历LRD"></a>后序遍历LRD</h4></li></ul></li><li>先左子树，后右子树，再根结点</li><li>每个子树内部依然是先左子树，后右子树，再根结点。递归遍历</li><li>遍历序列<br>GHDB IEFC A<br><img src="https://img-blog.csdnimg.cn/20190516094234759.png" alt="在这里插入图片描述"><h1 id="堆排序Heap-Sort"><a href="#堆排序Heap-Sort" class="headerlink" title="堆排序Heap Sort"></a>堆排序Heap Sort</h1><h2 id="堆Heap"><a href="#堆Heap" class="headerlink" title="堆Heap"></a>堆Heap</h2></li><li>堆是一个完全二叉树</li><li>每个非叶子结点都要大于或者等于其左右孩子结点的值称为大顶堆</li><li>每个非叶子结点都要小鱼或者等于其左右孩子结点的值称为小顶堆</li><li>根结点一定是大顶堆中的最大值，一定是小顶堆中的最小值<h3 id="大顶堆"><a href="#大顶堆" class="headerlink" title="大顶堆"></a>大顶堆</h3></li><li>完全二叉树的每个非叶子结点都要大于或者等于其左右孩子结点的值称为大顶堆</li><li>根结点一定是大顶堆中的最大值<br><img src="https://img-blog.csdnimg.cn/20190516094524860.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3B5dGhvbl9scXg=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><h3 id="小顶堆"><a href="#小顶堆" class="headerlink" title="小顶堆"></a>小顶堆</h3><ul><li>完全二叉树的每个非叶子结点都要小于或者等于其左右孩子结点的值称为小顶堆</li><li>根结点一定是小顶堆中的最小值<br><img src="https://img-blog.csdnimg.cn/20190516094614965.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3B5dGhvbl9scXg=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><h3 id="1-构建完全二叉树"><a href="#1-构建完全二叉树" class="headerlink" title="1. 构建完全二叉树"></a>1. 构建完全二叉树</h3></li></ul></li><li>待排序数字为 30，20，80，40，50，10，60，70，90</li><li>构建一个完全二叉树存放数据，并根绝性质5对元素编号，放入顺序的数据结构中</li><li>构造一个列表为[0,30,20,80,40,50,10,60,70,90]<h3 id="2-构建大顶堆"><a href="#2-构建大顶堆" class="headerlink" title="2. 构建大顶堆"></a>2. 构建大顶堆</h3><h4 id="核心算法"><a href="#核心算法" class="headerlink" title="核心算法"></a>核心算法</h4></li><li>度数为2的结点A，如果它的左右孩子结点的最大值比它大的，将这个最大值和该结点交换</li><li>度数为1的结点A，如果它的左孩子的值大于它，则交换</li><li>如果结点A被交换到新的位置，还需要和其孩子结点重复上面的过程<h4 id="起点结点的选择"><a href="#起点结点的选择" class="headerlink" title="起点结点的选择"></a>起点结点的选择</h4></li><li>从完全二叉树的最后一个结点的双亲结点开始，即最后一层的最右边叶子结点的父结点开始</li><li>结点数为n，则起始结点的编号为n//2(性质5) <h4 id="下一个结点的选择"><a href="#下一个结点的选择" class="headerlink" title="下一个结点的选择"></a>下一个结点的选择</h4></li><li>从起始结点开始向左找其同层结点，到头后再从上一层的最右边结点开始继续向左逐个查找，直至根结点<br><img src="https://img-blog.csdnimg.cn/20190516094821825.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3B5dGhvbl9scXg=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><h3 id="3-大顶堆的目标"><a href="#3-大顶堆的目标" class="headerlink" title="3. 大顶堆的目标"></a>3. 大顶堆的目标</h3></li><li>确保每个非叶子结点的都比其左右孩子结点的值大<br><img src="https://img-blog.csdnimg.cn/20190516095330207.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3B5dGhvbl9scXg=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><h3 id="4-排序"><a href="#4-排序" class="headerlink" title="4. 排序"></a>4. 排序</h3></li><li>将大顶堆根结点逐个最大值和最后一个叶子结点交换，那么最后一个叶子结点就是最大值，将这个叶子结点排除在待排序结点之外</li><li>从根结点开始（新的根结点），重新调整为大顶堆后，重复上一步<br><img src="https://img-blog.csdnimg.cn/2019051609544482.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3B5dGhvbl9scXg=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/20190516095454235.png" alt="在这里插入图片描述"></li><li>堆顶和最后一个结点交换，并排序最后一个结点<br><img src="https://img-blog.csdnimg.cn/20190516095539732.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3B5dGhvbl9scXg=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/20190516100116882.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3B5dGhvbl9scXg=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/20190516100133390.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3B5dGhvbl9scXg=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><h2 id="算法实现"><a href="#算法实现" class="headerlink" title="算法实现"></a>算法实现</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> math</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">print_tree</span><span class="params">(array,unit_width=<span class="number">2</span>)</span>:</span></span><br><span class="line">    <span class="string">'''</span></span><br><span class="line"><span class="string">     i  前空格      元素间</span></span><br><span class="line"><span class="string">   1 3  7=2**3-1  0 2*7+1 2*前空格+1</span></span><br><span class="line"><span class="string">   2 2  3=2**2-1  7=2**3+1</span></span><br><span class="line"><span class="string">   3 1  1=2**1-1  3=2**1+1</span></span><br><span class="line"><span class="string">   4 0  0=2**0-1  1=2*0+1</span></span><br><span class="line"><span class="string">    '''</span></span><br><span class="line">    length = len(array)</span><br><span class="line">    index = <span class="number">1</span></span><br><span class="line">    <span class="comment"># 因为使用时前面补0了,不然应该是math.ceil(math.log2(len(array)+1)</span></span><br><span class="line">    depth = math.ceil(math.log2(length)) <span class="comment"># 4</span></span><br><span class="line">    <span class="comment"># print(depth)</span></span><br><span class="line"></span><br><span class="line">    space = <span class="string">' '</span> * unit_width</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(depth<span class="number">-1</span>, <span class="number">-1</span>, <span class="number">-1</span>):</span><br><span class="line">        pre = <span class="number">2</span> ** i - <span class="number">1</span></span><br><span class="line">        print(pre * space, end=<span class="string">""</span>) <span class="comment"># 前置空格</span></span><br><span class="line">        offset = <span class="number">2</span> ** (depth - i - <span class="number">1</span>)</span><br><span class="line">        line = array[index:index+offset] <span class="comment"># 取数字</span></span><br><span class="line">        interval = (<span class="number">2</span> * pre + <span class="number">1</span>) * space <span class="comment"># 间隔的空格</span></span><br><span class="line">        print(interval.join(map(<span class="keyword">lambda</span> x:<span class="string">"&#123;:2&#125;"</span>.format(x), line)))</span><br><span class="line"></span><br><span class="line">        index += offset</span><br><span class="line"></span><br><span class="line"><span class="comment"># Heap Sort 堆排序</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 为了和编码对应，增加一个无用的0在首位</span></span><br><span class="line">origin = [<span class="number">0</span>, <span class="number">30</span>, <span class="number">20</span>, <span class="number">80</span>, <span class="number">40</span>, <span class="number">50</span>, <span class="number">10</span>, <span class="number">60</span>, <span class="number">70</span>, <span class="number">90</span>]</span><br><span class="line"></span><br><span class="line">total = len(origin) - <span class="number">1</span> <span class="comment"># 初始待排序元素个数，即n</span></span><br><span class="line">print_tree(origin)</span><br><span class="line">print(<span class="string">"="</span>*<span class="number">50</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">heap_adjust</span><span class="params">(n ,i, array:list)</span>:</span></span><br><span class="line">    <span class="string">'''</span></span><br><span class="line"><span class="string">      调整当前节点(核心算法)</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    调整的结点的起点在n//2，保证所有调整的结点都有孩子结点</span></span><br><span class="line"><span class="string">    :param n: 待比较数个数</span></span><br><span class="line"><span class="string">    :param i: 当前结点的下标</span></span><br><span class="line"><span class="string">    :param array: 待排序数据</span></span><br><span class="line"><span class="string">    :return: None</span></span><br><span class="line"><span class="string">    '''</span></span><br><span class="line">    <span class="keyword">while</span> <span class="number">2</span> * i &lt;= n:</span><br><span class="line">        <span class="comment"># 孩子结点判断 2i为左孩子, 2i+1为右孩子</span></span><br><span class="line">        lchile_index = <span class="number">2</span> * i</span><br><span class="line">        max_child_index = lchile_index <span class="comment"># n=2i</span></span><br><span class="line">        <span class="keyword">if</span> n &gt; lchile_index <span class="keyword">and</span> array[lchile_index +<span class="number">1</span>] &gt; array[lchile_index] :<span class="comment"># n&gt;2i说明还有右孩子</span></span><br><span class="line">            max_child_index = lchile_index + <span class="number">1</span> <span class="comment"># n=2i+1</span></span><br><span class="line"></span><br><span class="line">        <span class="comment"># 和子树的根结点比较</span></span><br><span class="line">        <span class="keyword">if</span> array[max_child_index] &gt; array[i]:</span><br><span class="line">            array[i], array[max_child_index] = array[max_child_index], array[i]</span><br><span class="line">            i = max_child_index <span class="comment"># 被交换后，需要判断是否还需要调整</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">    <span class="comment"># print_tree(array)</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 构建大顶堆、大根堆</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">max_heap</span><span class="params">(total, array:list)</span>:</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(total // <span class="number">2</span>, <span class="number">0</span>, <span class="number">-1</span>):</span><br><span class="line">        heap_adjust(total, i, array)</span><br><span class="line">    <span class="keyword">return</span> array</span><br><span class="line"></span><br><span class="line">print_tree(max_heap(total, origin))</span><br><span class="line">print(<span class="string">"="</span> * <span class="number">50</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 排序</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">sort</span><span class="params">(total, array:list)</span>:</span></span><br><span class="line">    <span class="keyword">while</span> total &gt; <span class="number">1</span>:</span><br><span class="line">        array[<span class="number">1</span>], array[total] = array[total], array[<span class="number">1</span>] <span class="comment"># 堆顶和最后一个结点交换</span></span><br><span class="line">        total -= <span class="number">1</span></span><br><span class="line">        <span class="keyword">if</span> total == <span class="number">2</span> <span class="keyword">and</span> array[total] &gt;= array[total - <span class="number">1</span>]:</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">        heap_adjust(total, <span class="number">1</span>, array)</span><br><span class="line">    <span class="keyword">return</span> array</span><br><span class="line"></span><br><span class="line">print_tree(sort(total, origin))</span><br><span class="line">print(<span class="string">"="</span>*<span class="number">50</span>)</span><br><span class="line">print(origin[<span class="number">1</span>:])</span><br></pre></td></tr></table></figure></li></ul><h3 id="打印结果"><a href="#打印结果" class="headerlink" title="打印结果"></a>打印结果</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">              30</span><br><span class="line">      20              80</span><br><span class="line">  40      50      10      60</span><br><span class="line">70  90</span><br><span class="line">==================================================</span><br><span class="line">              90</span><br><span class="line">      70              80</span><br><span class="line">  40      50      10      60</span><br><span class="line">20  30</span><br><span class="line">==================================================</span><br><span class="line">              10</span><br><span class="line">      20              30</span><br><span class="line">  40      50      60      70</span><br><span class="line">80  90</span><br><span class="line">==================================================</span><br><span class="line">[10, 20, 30, 40, 50, 60, 70, 80, 90]</span><br></pre></td></tr></table></figure><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><ul><li>是利用堆性质的一种选择排序，在堆顶选出最大值或者最小值</li><li>时间复杂度<br>堆排序的时间复杂度为O(nlogn)<br>由于堆排序对原始记录的排序状态并不敏感，因此它无论是最好、最坏和平均时间复杂度均为O(nlogn)<br><img src="https://img-blog.csdnimg.cn/2019051610044591.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3B5dGhvbl9scXg=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><h3 id="空间复杂度"><a href="#空间复杂度" class="headerlink" title="空间复杂度"></a>空间复杂度</h3></li><li>只是使用了一个交换用的空间，空间复杂度就是O(1)<h3 id="稳定性"><a href="#稳定性" class="headerlink" title="稳定性"></a>稳定性</h3></li><li>不稳定的排序算法</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;@&lt;a href&gt;TOC&lt;/a&gt;&lt;/p&gt;
&lt;h1 id=&quot;二叉树的遍历&quot;&gt;&lt;a href=&quot;#二叉树的遍历&quot; class=&quot;headerlink&quot; title=&quot;二叉树的遍历&quot;&gt;&lt;/a&gt;二叉树的遍历&lt;/h1&gt;&lt;h2 id=&quot;遍历&quot;&gt;&lt;a href=&quot;#遍历&quot; class=&quot;
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title></title>
    <link href="https://hubhack.github.io/%E5%90%8E%E7%AB%AF/python/%E5%9F%BA%E7%A1%80/Python--%E6%9C%AA%E5%AE%9E%E7%8E%B0%E5%92%8C%E6%9C%AA%E5%AE%9E%E7%8E%B0%E5%BC%82%E5%B8%B8%E3%80%81%E8%BF%90%E7%AE%97%E7%AC%A6%E9%87%8D%E8%BD%BD%E5%8F%8D%E5%90%91%E7%AE%97%E6%B3%95/"/>
    <id>https://hubhack.github.io/后端/python/基础/Python--未实现和未实现异常、运算符重载反向算法/</id>
    <published>2019-08-22T03:06:41.477Z</published>
    <updated>2019-08-19T01:37:23.318Z</updated>
    
    <content type="html"><![CDATA[<h1 id="未实现和未实现异常"><a href="#未实现和未实现异常" class="headerlink" title="未实现和未实现异常"></a>未实现和未实现异常</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">print(type(<span class="built_in">NotImplemented</span>))</span><br><span class="line">print(type(NotImplementedError))</span><br><span class="line"></span><br><span class="line"><span class="comment"># &lt;class 'NotImplementedType'&gt;</span></span><br><span class="line"><span class="comment"># &lt;class 'type'&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># raise NotImplemented # TypeError: exceptions must derive from BaseException</span></span><br><span class="line"><span class="keyword">raise</span> NotImplementedError <span class="comment"># NotImplementedError</span></span><br></pre></td></tr></table></figure><p>NotImplemented是个值，单值，是NotImplementedType的实例<br>NotImplementedError是类型，是异常类，返回type</p><h1 id="运算符重载中的反响方法"><a href="#运算符重载中的反响方法" class="headerlink" title="运算符重载中的反响方法"></a>运算符重载中的反响方法</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">A</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, x)</span>:</span></span><br><span class="line">        self.x = x</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__add__</span><span class="params">(self, other)</span>:</span></span><br><span class="line">        print(self, <span class="string">'add'</span>)</span><br><span class="line">        <span class="keyword">return</span> self.x + other.x</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__iadd__</span><span class="params">(self, other)</span>:</span></span><br><span class="line">        print(self, <span class="string">'iadd'</span>)</span><br><span class="line">        <span class="keyword">return</span> A(self.x + other.x)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__radd__</span><span class="params">(self, other)</span>:</span></span><br><span class="line">        print(self, <span class="string">'radd'</span>)</span><br><span class="line">        <span class="keyword">return</span> self.x + other.x</span><br><span class="line">a = A(<span class="number">4</span>)</span><br><span class="line">a + <span class="number">1</span></span><br></pre></td></tr></table></figure><ul><li><p>运行结果<br><img src="https://img-blog.csdnimg.cn/20190528175353884.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3B5dGhvbl9scXg=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>出现了AttributeError，因为1是int类型，没有x这个属性，A类的<code>__add__</code>被执行了</p></li><li><p>测试<code>1 + a</code> ，运行结果如下<br><img src="https://img-blog.csdnimg.cn/2019052817550824.png" alt="在这里插入图片描述"><br>这次执行的是实例a的<code>__radd__</code>方法<br><code>1 + a</code>等价于<code>1.__add__(a)</code>，也就是<code>int.__add__(1, a)</code>，而int类型实现了<code>__add__</code>方法，没有抛出异常，而是执行了实例a的<code>__radd__</code>方法</p></li><li><p>分析下面例子代码</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">A</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, x)</span>:</span></span><br><span class="line">        self.x = x</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__add__</span><span class="params">(self, other)</span>:</span></span><br><span class="line">        print(self, <span class="string">'add'</span>)</span><br><span class="line">        <span class="keyword">return</span> self.x + other.x</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__iadd__</span><span class="params">(self, other)</span>:</span></span><br><span class="line">        print(self, <span class="string">'iadd'</span>)</span><br><span class="line">        <span class="keyword">return</span> A(self.x + other.x)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__radd__</span><span class="params">(self, other)</span>:</span></span><br><span class="line">        print(self, <span class="string">'radd'</span>)</span><br><span class="line">        <span class="keyword">return</span> self.x + other.x</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">B</span>:</span> <span class="comment"># 未实现__add__</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, x )</span>:</span></span><br><span class="line">        self.x = x</span><br><span class="line">a = A(<span class="number">4</span>)</span><br><span class="line">b = B(<span class="number">10</span>)</span><br><span class="line">print(a + b)</span><br><span class="line">print(b + a)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 执行结果</span></span><br><span class="line">&lt;__main__.A object at <span class="number">0x0000021577038400</span>&gt; add</span><br><span class="line"><span class="number">14</span></span><br><span class="line">&lt;__main__.A object at <span class="number">0x0000021577038400</span>&gt; radd</span><br><span class="line"><span class="number">14</span></span><br></pre></td></tr></table></figure></li></ul><p><code>b + a</code> 等价于<code>b.__add__(a)</code>，但是类B没有实现<code>__add__</code>方法，反而去找a的<code>__radd__</code>方法<br><code>1 + a</code>等价于<code>1.__add__(a)</code>，而int类型实现了<code>__add__</code>方法，不过这个方法对于这种加法的返回值是==NotImplemented==，解释器发现是这个值，就会发起对第二操作对象的<code>__radd__</code>方法的调用</p><ul><li><p>B类也等价于下面的实现</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">B</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, x )</span>:</span></span><br><span class="line">        self.x = x</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__add__</span><span class="params">(self, other)</span>:</span></span><br><span class="line">        <span class="keyword">if</span> isinstance(other, type(self)):</span><br><span class="line">            <span class="keyword">return</span> self.x + other.x</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="built_in">NotImplemented</span></span><br></pre></td></tr></table></figure></li><li><p>1 + a 用如下方法解决</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">A</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, x)</span>:</span></span><br><span class="line">        self.x = x</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__add__</span><span class="params">(self, other)</span>:</span></span><br><span class="line">        print(self, <span class="string">'add'</span>)</span><br><span class="line">        <span class="keyword">if</span> hasattr(other, <span class="string">'x'</span>):</span><br><span class="line">            <span class="keyword">return</span> self.x + other.x</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">try</span>:</span><br><span class="line">                x = int(other)</span><br><span class="line">            <span class="keyword">except</span>:</span><br><span class="line">                x = <span class="number">0</span></span><br><span class="line">            <span class="keyword">return</span> self.x + x</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__iadd__</span><span class="params">(self, other)</span>:</span></span><br><span class="line">        print(self, <span class="string">'iadd'</span>)</span><br><span class="line">        <span class="keyword">return</span> A(self.x + other.x)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__radd__</span><span class="params">(self, other)</span>:</span></span><br><span class="line">        print(self, <span class="string">'radd'</span>)</span><br><span class="line">        <span class="keyword">return</span> self + other</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">B</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, x)</span>:</span></span><br><span class="line">        self.x = x</span><br><span class="line"></span><br><span class="line">a = A(<span class="number">4</span>)</span><br><span class="line">b = B(<span class="number">20</span>)</span><br><span class="line">print(a + b)</span><br><span class="line">print(b + a)</span><br><span class="line">print(a + <span class="number">2</span>)</span><br><span class="line">print(<span class="number">2</span> + a)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 执行结果</span></span><br><span class="line">&lt;__main__.A object at <span class="number">0x000001C4AA548400</span>&gt; add</span><br><span class="line"><span class="number">24</span></span><br><span class="line">&lt;__main__.A object at <span class="number">0x000001C4AA548400</span>&gt; radd</span><br><span class="line">&lt;__main__.A object at <span class="number">0x000001C4AA548400</span>&gt; add</span><br><span class="line"><span class="number">24</span></span><br><span class="line">&lt;__main__.A object at <span class="number">0x000001C4AA548400</span>&gt; add</span><br><span class="line"><span class="number">6</span></span><br><span class="line">&lt;__main__.A object at <span class="number">0x000001C4AA548400</span>&gt; radd</span><br><span class="line">&lt;__main__.A object at <span class="number">0x000001C4AA548400</span>&gt; add</span><br><span class="line"><span class="number">6</span></span><br></pre></td></tr></table></figure></li></ul><p><code>&#39;abc&#39; + a</code> ， 字符串也实现了<code>__add__</code>方法，不过默认是处理不了和其他类型的加法，就返回NotImplemented</p><p><img src="https://img-blog.csdnimg.cn/20190528184351941.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3B5dGhvbl9scXg=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;未实现和未实现异常&quot;&gt;&lt;a href=&quot;#未实现和未实现异常&quot; class=&quot;headerlink&quot; title=&quot;未实现和未实现异常&quot;&gt;&lt;/a&gt;未实现和未实现异常&lt;/h1&gt;&lt;figure class=&quot;highlight python&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title></title>
    <link href="https://hubhack.github.io/%E5%90%8E%E7%AB%AF/python/%E5%9F%BA%E7%A1%80/Python--%E6%97%A5%E5%BF%97%E5%88%86%E6%9E%90%E3%80%81%E5%88%86%E5%8F%91(queue%E6%A8%A1%E5%9D%97%E3%80%81threading%E6%A8%A1%E5%9D%97)%E3%80%81%E5%88%86%E6%9E%90%E5%99%A8%EF%BC%88IP%E3%80%81PV%E3%80%81useragent%EF%BC%89/"/>
    <id>https://hubhack.github.io/后端/python/基础/Python--日志分析、分发(queue模块、threading模块)、分析器（IP、PV、useragent）/</id>
    <published>2019-08-22T03:06:41.472Z</published>
    <updated>2019-08-19T01:38:48.123Z</updated>
    
    <content type="html"><![CDATA[<p>@<a href>TOC</a></p><h1 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h1><p>生成中会生产大量的系统日志、应用程序日志、安全日志等，通过对日志的分析可以了解服务器的负载、健康状况，可以分析客户的分布情况、客户行为，甚至基于这些分析可以做出预测</p><ul><li>一般采集流程<br>日资产处 -&gt; 采集(Logstash、Flume、Scribe)  -&gt; 存储 -&gt; 分析 -&gt; 存储（数据库、NoSQL） -&gt; 可视化</li><li>开源实时日志分析ELK平台<br>Logstash收集日志，并存放到ElasticSearch集群中，Kibana则从ES集群中查询数据生成图表，返回浏览器端<h1 id="数据提取"><a href="#数据提取" class="headerlink" title="数据提取"></a>数据提取</h1><h2 id="半结构化数据"><a href="#半结构化数据" class="headerlink" title="半结构化数据"></a>半结构化数据</h2></li><li>日志是半结构化数据，是有组织的、有格式的数据。可以分割成行和咧，就可以当做表理解和处理了，当然也可以分析里面的数据<h3 id="文本分析"><a href="#文本分析" class="headerlink" title="文本分析"></a>文本分析</h3></li><li>日志是文本文件，需要依赖文件IO、字符串操作、正则表达式等技术</li><li>通过这些技术就能够把日志中需要的数据提取出来<br><img src="https://img-blog.csdnimg.cn/20190514103032405.png" alt="在这里插入图片描述"></li><li>这是最常见的日志，nginx、tomcat等WEB Server都会产生这样的日志。如何提取出数据？<br>这里面每一段有效的数据对后期的分析都是必须的<h4 id="提取数据代码实现"><a href="#提取数据代码实现" class="headerlink" title="提取数据代码实现"></a>提取数据代码实现</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 使用正则表达式</span></span><br><span class="line"><span class="keyword">import</span> re</span><br><span class="line"></span><br><span class="line">line = <span class="string">'''183.60.212.153 - - [19/Feb/2013:10:23:29 +0800] \</span></span><br><span class="line"><span class="string">"GET /o2o/media.html?menu=3 HTTP/1.1" 200 16691 "-" \</span></span><br><span class="line"><span class="string">"Mozilla/5.0 (compatible; EasouSpider; +http://www.easou.com/search/spider.html)"'''</span></span><br><span class="line"></span><br><span class="line">pattern = <span class="string">'([\d.]&#123;7,&#125;) - - \[(.+)\] \</span></span><br><span class="line"><span class="string">"(.+) (.+) (.+)" (\d&#123;3&#125;) (\d+) "[^"]+" "([^"]+)"'</span></span><br><span class="line">regex = re.compile(pattern)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">extract</span><span class="params">(logline:str)</span>:</span></span><br><span class="line">    m = regex.match(logline)</span><br><span class="line">    <span class="keyword">if</span> m :</span><br><span class="line">        print(m.groups())</span><br><span class="line"></span><br><span class="line">extract(line)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 输出结果</span></span><br><span class="line">(<span class="string">'183.60.212.153'</span>, <span class="string">'19/Feb/2013:10:23:29 +0800'</span>, <span class="string">'GET'</span>,\</span><br><span class="line"> <span class="string">'/o2o/media.html?menu=3'</span>, <span class="string">'HTTP/1.1'</span>, <span class="string">'200'</span>, <span class="string">'16691'</span>, \</span><br><span class="line"> <span class="string">'Mozilla/5.0 (compatible; EasouSpider; \</span></span><br><span class="line"><span class="string"> +http://www.easou.com/search/spider.html)'</span>)</span><br></pre></td></tr></table></figure></li></ul><p>使用上面的分组就可以提取到所有想要数据的分组</p><h4 id="类型转换"><a href="#类型转换" class="headerlink" title="类型转换"></a>类型转换</h4><p>fields中的数据是有类型的，例如时间、状态码等。对不同的field要做不同的类型转换，甚至是自定义的转换</p><ul><li>19/Feb/2013:10:23:29 +0800 对应格式 %d/%b/%Y:%H:%M:%S %Z</li><li>使用datetime类的strptime方法<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> datatime</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">convert_time</span><span class="params">(timestr)</span>:</span></span><br><span class="line">    <span class="keyword">return</span> datetime.datetime.strptime(timestr, <span class="string">'%d/%b/%Y:%H:%M:%S %z'</span>)</span><br></pre></td></tr></table></figure></li></ul><p>可以得到<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">lambda</span> timestr:datetime.datetime.strptime(timestr, <span class="string">'%d/%b/%Y:%H:%M:%S %z'</span>)</span><br></pre></td></tr></table></figure></p><ul><li>状态码和字节数<br>都是整型，使用int函数转换<h4 id="映射"><a href="#映射" class="headerlink" title="映射"></a>映射</h4>对每一个字段命名，然后与值和类型转换的方法对应<br>最简单的方式，就是使用正则表达式分组<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> re</span><br><span class="line"><span class="keyword">import</span> datetime</span><br><span class="line"></span><br><span class="line">line = <span class="string">'''183.60.212.153 - - [19/Feb/2013:10:23:29 +0800] \</span></span><br><span class="line"><span class="string">"GET /o2o/media.html?menu=3 HTTP/1.1" 200 16691 "-" \</span></span><br><span class="line"><span class="string">"Mozilla/5.0 (compatible; EasouSpider; +http://www.easou.com/search/spider.html)"'''</span></span><br><span class="line"></span><br><span class="line">pattern = <span class="string">'(?P&lt;remote&gt;[\d.]&#123;7,&#125;) - - \[(?P&lt;datetime&gt;.+)\] \</span></span><br><span class="line"><span class="string">"(?P&lt;method&gt;.+) (?P&lt;url&gt;.+) (?P&lt;protocol&gt;.+)" \</span></span><br><span class="line"><span class="string">(?P&lt;status&gt;\d&#123;3&#125;) (?P&lt;size&gt;\d+) "[^"]+" "(?P&lt;useragent&gt;[^"]+)"'</span></span><br><span class="line">regex = re.compile(pattern)</span><br><span class="line"></span><br><span class="line">conversion = &#123;</span><br><span class="line">    <span class="string">'datetime'</span>: <span class="keyword">lambda</span> timestr:datetime.datetime.strptime(timestr,<span class="string">'%d/%b/%Y:%H:%M:%S %z'</span>),</span><br><span class="line">    <span class="string">'status'</span>:int,</span><br><span class="line">    <span class="string">'size'</span>:int</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">extract</span><span class="params">(logline:str)</span>:</span></span><br><span class="line">    m = regex.match(logline)</span><br><span class="line">    <span class="keyword">if</span> m :</span><br><span class="line">        <span class="keyword">return</span> &#123;k:conversion.get(k, <span class="keyword">lambda</span> x:x)(v) <span class="keyword">for</span> k,v <span class="keyword">in</span> m.groupdict().items()&#125;</span><br><span class="line"></span><br><span class="line">print(extract(line))</span><br><span class="line"></span><br><span class="line"><span class="comment"># 打印结果</span></span><br><span class="line">&#123;<span class="string">'remote'</span>: <span class="string">'183.60.212.153'</span>, \</span><br><span class="line"><span class="string">'datetime'</span>: datetime.datetime(<span class="number">2013</span>, <span class="number">2</span>, <span class="number">19</span>, <span class="number">10</span>, <span class="number">23</span>, <span class="number">29</span>, tzinfo=datetime.timezone(datetime.timedelta(<span class="number">0</span>, <span class="number">28800</span>))),\</span><br><span class="line"> <span class="string">'method'</span>: <span class="string">'GET'</span>, <span class="string">'url'</span>: <span class="string">'/o2o/media.html?menu=3'</span>, \</span><br><span class="line"> <span class="string">'protocol'</span>: <span class="string">'HTTP/1.1'</span>, <span class="string">'status'</span>: <span class="number">200</span>, <span class="string">'size'</span>: <span class="number">16691</span>,\</span><br><span class="line">  <span class="string">'useragent'</span>: <span class="string">'Mozilla/5.0 (compatible; EasouSpider; +http://www.easou.com/search/spider.html)'</span>&#125;</span><br></pre></td></tr></table></figure></li></ul><h3 id="异常处理"><a href="#异常处理" class="headerlink" title="异常处理"></a>异常处理</h3><p>日志中不免会出现一些不匹配的行，需要处理<br>这里使用re.match方法，有可能匹配不上。所以要增加一个判断<br>采用抛出异常的方式，让调用者获得异常并自行处理<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">extract</span><span class="params">(logline:str)</span>:</span></span><br><span class="line">    <span class="string">"""返回字段的字典,抛出异常说明匹配失败"""</span></span><br><span class="line">    m = regex.match(logline)</span><br><span class="line">    <span class="keyword">if</span> m :</span><br><span class="line">        <span class="keyword">return</span> &#123;k:conversion.get(k, <span class="keyword">lambda</span> x:x)(v) <span class="keyword">for</span> k,v <span class="keyword">in</span> m.groupdict().items()&#125;</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">raise</span> Exception(<span class="string">'No match. &#123;&#125;'</span>.format(line)) <span class="comment"># 或输出日志记录</span></span><br></pre></td></tr></table></figure></p><p> 也可以采用返回一个特殊值的方式，告知调用者没有匹配<br> <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">extract</span><span class="params">(logline:str)</span>:</span></span><br><span class="line">   <span class="string">"""返回字段的字典,抛出异常说明匹配失败"""</span></span><br><span class="line">   m = regex.match(logline)</span><br><span class="line">   <span class="keyword">if</span> m :</span><br><span class="line">       <span class="keyword">return</span> &#123;k:conversion.get(k, <span class="keyword">lambda</span> x:x)(v) <span class="keyword">for</span> k,v <span class="keyword">in</span> m.groupdict().items()&#125;</span><br><span class="line">   <span class="keyword">else</span>:</span><br><span class="line">       <span class="keyword">return</span> <span class="literal">None</span> <span class="comment"># 或输出日志记录</span></span><br></pre></td></tr></table></figure></p><p> 通过返回值,在函数外部获取了None，同样也可以才去一些措施。本次采用返回None的实现</p><h1 id="数据载入"><a href="#数据载入" class="headerlink" title="数据载入"></a>数据载入</h1><p> 对于本项目来说，数据就是日志的一行行记录，载入数据就是文件IO的读取。将获取数据的方法封装成函数<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">load</span><span class="params">(path)</span>:</span></span><br><span class="line">    <span class="string">"""装载日志文件"""</span></span><br><span class="line">    <span class="keyword">with</span> open(path) <span class="keyword">as</span> f:</span><br><span class="line">        <span class="keyword">for</span> line <span class="keyword">in</span> f:</span><br><span class="line">            fields = extract(line)</span><br><span class="line">            <span class="keyword">if</span> fields:</span><br><span class="line">                <span class="keyword">yield</span> fields</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                <span class="keyword">continue</span> <span class="comment"># TODO 以后处理,丢弃数据或记录在日志中</span></span><br></pre></td></tr></table></figure></p><h1 id="日志文件的加载"><a href="#日志文件的加载" class="headerlink" title="日志文件的加载"></a>日志文件的加载</h1><ul><li>目前实现的代码中，只能接受一个路径，修改为接受一批路径</li><li>可以约定一下路径下文件的存放方式：<br>如果送来的是一批路径，就迭代其中路径<br>如果路径是一个普通文件，就直接加载这个文件<br>如果路径是一个目录，就遍历路径下所有指定类型的文件，每一个文件按照行处理<br>可以提供参数处理是否递归子目录<h2 id="完整代码"><a href="#完整代码" class="headerlink" title="完整代码"></a>完整代码</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pathlib <span class="keyword">import</span> Path</span><br><span class="line"><span class="keyword">import</span> re</span><br><span class="line"><span class="keyword">import</span> datetime</span><br><span class="line"></span><br><span class="line">pattern = <span class="string">'(?P&lt;remote&gt;[\d.]&#123;7,&#125;) - - \[(?P&lt;datetime&gt;.+)\] \</span></span><br><span class="line"><span class="string">"(?P&lt;method&gt;.+) (?P&lt;url&gt;.+) (?P&lt;protocol&gt;.+)" \</span></span><br><span class="line"><span class="string">(?P&lt;status&gt;\d&#123;3&#125;) (?P&lt;size&gt;\d+) "[^"]+" "(?P&lt;useragent&gt;[^"]+)"'</span></span><br><span class="line">regex = re.compile(pattern)</span><br><span class="line"></span><br><span class="line">conversion = &#123;</span><br><span class="line">    <span class="string">'datetime'</span>: <span class="keyword">lambda</span> datestr:datetime.datetime.strptime(datestr,<span class="string">'%d/%b/%Y:%H:%M:%S %z'</span>),</span><br><span class="line">    <span class="string">'status'</span>:int,</span><br><span class="line">    <span class="string">'size'</span>:int</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">extract</span><span class="params">(logline:str)</span> -&gt; dict:</span></span><br><span class="line">    <span class="string">"""返回字段的字典,抛出异常说明匹配失败"""</span></span><br><span class="line">    m = regex.match(logline)</span><br><span class="line">    <span class="keyword">if</span> m :</span><br><span class="line">        <span class="keyword">return</span> &#123;k:conversion.get(k, <span class="keyword">lambda</span> x:x)(v) <span class="keyword">for</span> k,v <span class="keyword">in</span> m.groupdict().items()&#125;</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">raise</span> Exception(<span class="string">'No match. &#123;&#125;'</span>.format(line)) <span class="comment"># 或输出日志记录</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">loadfile</span><span class="params">(filename:str,encoding=<span class="string">'utf-8'</span>)</span>:</span></span><br><span class="line">    <span class="string">"""装载日志文件"""</span></span><br><span class="line">    <span class="keyword">with</span> open(filename,encoding=encoding) <span class="keyword">as</span> f:</span><br><span class="line">        <span class="keyword">for</span> line <span class="keyword">in</span> f:</span><br><span class="line">            fields = extract(line)</span><br><span class="line">            <span class="keyword">if</span> fields:</span><br><span class="line">                <span class="keyword">yield</span> fields</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                <span class="keyword">continue</span> <span class="comment"># TODO 以后处理,丢弃数据或记录在日志中</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">load</span><span class="params">(*paths, encoding=<span class="string">'utf-8'</span>, ext=<span class="string">'*.log'</span>, recursive=False)</span>:</span></span><br><span class="line">    <span class="string">"""装载日志文件"""</span></span><br><span class="line">    <span class="keyword">for</span> x <span class="keyword">in</span> paths:</span><br><span class="line">        print(x)</span><br><span class="line">        p = Path(x)</span><br><span class="line">        <span class="keyword">if</span> p.is_dir(): <span class="comment"># 处理目录</span></span><br><span class="line">            <span class="keyword">if</span> isinstance(ext, str):</span><br><span class="line">                ext = [ext]</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                ext = list(ext)</span><br><span class="line">            <span class="keyword">for</span> e <span class="keyword">in</span> ext:</span><br><span class="line">                files = p.rglob(e) <span class="keyword">if</span> recursive <span class="keyword">else</span> p.glob(e) <span class="comment"># 是否递归</span></span><br><span class="line">                <span class="keyword">for</span> file <span class="keyword">in</span> files:</span><br><span class="line">                    <span class="keyword">yield</span> <span class="keyword">from</span> loadfile(str(file.absolute()), encoding=encoding) <span class="comment">#file.absolute() 取文件绝对路径</span></span><br><span class="line">        <span class="keyword">elif</span> p.is_file(): <span class="comment"># 处理文件</span></span><br><span class="line">            <span class="keyword">yield</span> <span class="keyword">from</span> loadfile(str(p.absolute()), encoding=encoding)</span><br></pre></td></tr></table></figure></li></ul><h1 id="分发"><a href="#分发" class="headerlink" title="分发"></a>分发</h1><h2 id="生产者消费者模型"><a href="#生产者消费者模型" class="headerlink" title="生产者消费者模型"></a>生产者消费者模型</h2><ul><li>一个系统的健康运行，需要监控并处理很多数据，包括日志</li><li>对其中已有数据进行采集、分析</li><li>被监控对象就是数据的生产者producer，数据的处理程序就是数据的消费者consumer<h3 id="生产者消费者传统模型"><a href="#生产者消费者传统模型" class="headerlink" title="生产者消费者传统模型"></a>生产者消费者传统模型</h3><img src="https://img-blog.csdnimg.cn/20190514145612646.png" alt="在这里插入图片描述"></li><li>最不容易解决的就是生产者和消费者速度要匹配的问题</li><li>但是，真实情况下往往生产和消费的速度就不能够很好的匹配<h4 id="解决办法"><a href="#解决办法" class="headerlink" title="解决办法"></a>解决办法</h4></li><li>队列queue<h4 id="作用"><a href="#作用" class="headerlink" title="作用"></a>作用</h4></li><li>解耦、缓冲<br><img src="https://img-blog.csdnimg.cn/20190514145916923.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3B5dGhvbl9scXg=,size_16,color_FFFFFF,t_70" alt="-"><br>日志生产者往往会部署好几个程序，日志产生的也很多，而消费者也会有多个程序，去提取日志分析处理</li><li>数据的生产是最不稳定的。可能会造成短时间数据的“潮涌”，需要缓冲</li><li>消费者消费能力不一样，有快有慢，消费者可以自己决定消费缓冲区中的数据</li><li>单机时，可以使用标准库queue模块的类来构建进程内的队列，满足多个线程间的生产消费需求</li><li>大型系统可以使用第三方消息中间件– RabbitMQ、RocketMQ、Kafka等<h2 id="数据处理所需模块"><a href="#数据处理所需模块" class="headerlink" title="数据处理所需模块"></a>数据处理所需模块</h2><h3 id="queue模块-–-队列"><a href="#queue模块-–-队列" class="headerlink" title="queue模块 – 队列"></a>queue模块 – 队列</h3></li><li>Queue先进先出,LifoQueue后进先出<br><img src="https://img-blog.csdnimg.cn/2019051415142824.png" alt="在这里插入图片描述"><h4 id="queue模块提供了一个先进先出的队列Queue"><a href="#queue模块提供了一个先进先出的队列Queue" class="headerlink" title="queue模块提供了一个先进先出的队列Queue"></a>queue模块提供了一个先进先出的队列Queue</h4><h5 id="queue-Queue-maxsize-0"><a href="#queue-Queue-maxsize-0" class="headerlink" title="queue.Queue(maxsize=0)"></a>queue.Queue(maxsize=0)</h5></li><li>创建FIFO队列，返回Queue对象</li><li>maxsize 小于等于0，队列长度没有限制<h5 id="queue-get-block-True-timeout-None"><a href="#queue-get-block-True-timeout-None" class="headerlink" title="queue.get(block=True, timeout=None)"></a>queue.get(block=True, timeout=None)</h5></li><li>从队列中移除元素并返回这个元素</li><li>block为阻塞，timeout为超时<br>block为True，是阻塞。timeout为None就是一直阻塞<br>block为True但是timeout有值，就阻塞到一定秒数抛出Empty异常<br>block为False，是非阻塞。timeout将被忽略，要么成功返回一个元素，要么抛出empty异常<h5 id="queue-put-item-block-True-timeout-None"><a href="#queue-put-item-block-True-timeout-None" class="headerlink" title="queue.put(item, block=True, timeout=None)"></a>queue.put(item, block=True, timeout=None)</h5></li><li>把一个元素加入到队列中去<br>block=True，timeout=None，一直阻塞直至有空位放元素<br>block=True，timeout=5，阻塞5秒就抛出Full异常<br>block=False，timeout失效，立即返回，能塞进去就塞，不能则返回抛出Full异常<h5 id="Queue-put-nowait-item"><a href="#Queue-put-nowait-item" class="headerlink" title="Queue.put_nowait(item)"></a>Queue.put_nowait(item)</h5></li><li><p>等价于put(item,False)，也就是能塞进去就塞，不能则返回抛出Full异常</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Queue测试</span></span><br><span class="line"><span class="keyword">from</span> queue <span class="keyword">import</span> Queue</span><br><span class="line"><span class="keyword">import</span> random</span><br><span class="line"></span><br><span class="line">q = Queue()</span><br><span class="line"></span><br><span class="line">q.put(random.randint(<span class="number">1</span>,<span class="number">100</span>)</span><br><span class="line">q.put(random.randint(<span class="number">1</span>,<span class="number">100</span>)</span><br><span class="line"></span><br><span class="line">print(q.get())</span><br><span class="line">print(q.get())</span><br><span class="line"><span class="comment"># print(q.get()) # 阻塞</span></span><br><span class="line"><span class="comment"># print(q.get(timeout-3)) # 阻塞，但超时抛异常</span></span><br><span class="line">print(q.get_nowait()) <span class="comment"># 不阻塞，没数据立即抛异常</span></span><br></pre></td></tr></table></figure></li><li><p>注意： Queue的数据一旦被get后，就会从队列中消失</p><h3 id="threading模块–线程"><a href="#threading模块–线程" class="headerlink" title="threading模块–线程"></a>threading模块–线程</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> threading</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">handle</span><span class="params">(a, b)</span>:</span></span><br><span class="line">    print(a, b)</span><br><span class="line">    print(<span class="string">'-'</span> * <span class="number">30</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 定义线程</span></span><br><span class="line"><span class="comment"># target线程中运行的函数; args这个函数运行时需要的实参的元组</span></span><br><span class="line">t = threading.Thread(target=handle, args=(<span class="number">4</span>, <span class="number">5</span>))</span><br><span class="line"></span><br><span class="line"><span class="comment"># 启动线程</span></span><br><span class="line">t.start()</span><br></pre></td></tr></table></figure></li><li><p>上面的代码执行一次就退出了线程，如果想让线程不退出，修改handel函数如下</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> threading</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">handle</span><span class="params">(a, b)</span>:</span></span><br><span class="line">    <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">        print(a, b)</span><br><span class="line">        print(<span class="string">'-'</span> * <span class="number">30</span>)</span><br><span class="line">        time.sleep(<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 定义线程</span></span><br><span class="line"><span class="comment"># target线程中运行的函数; args这个函数运行时需要的实参的元组</span></span><br><span class="line">t = threading.Thread(target=handle, args=(<span class="number">4</span>, <span class="number">5</span>))</span><br><span class="line"></span><br><span class="line"><span class="comment"># 启动线程</span></span><br><span class="line">t.start()</span><br></pre></td></tr></table></figure></li></ul><p>为了让生产者的生产数据和消费者的消费数据同时进行，可以使用不同的线程</p><h2 id="数据处理流程"><a href="#数据处理流程" class="headerlink" title="数据处理流程"></a>数据处理流程</h2><ul><li>生产者（数据源）生产数据，缓冲到消息队列中</li><li>数据处理流程：<br><img src="https://img-blog.csdnimg.cn/20190514161623205.png" alt="在这里插入图片描述"><h3 id="分发器的实现"><a href="#分发器的实现" class="headerlink" title="分发器的实现"></a>分发器的实现</h3></li><li>数据分析的程序有很多，例如PV分析、IP分析、UserAgent分析等</li><li>同一套数据可能要被多个分析程序并行处理：<br>需要使用多线程来并行处理<br>多个分许程序又需要同一份数据，这就是一份变多分</li><li>数据处理流程：<br><img src="https://img-blog.csdnimg.cn/2019051416245047.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3B5dGhvbl9scXg=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></li><li>这是一个典型的分发器<br>注册统计分析函数，并为其提供一个单独的数据队列<br>收集日志数据<br>将一份日志数据发送到多个已注册的分析函数的队列中去<br>为了并行，每一个分析函数都在一个独立的线程中执行<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> queue <span class="keyword">import</span> Queue</span><br><span class="line"><span class="keyword">import</span> threading</span><br><span class="line"></span><br><span class="line"><span class="comment"># 消息队列, 分发</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">dispatcher</span><span class="params">(src)</span>:</span></span><br><span class="line">    handlers = []</span><br><span class="line">    queues = []</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">reg</span><span class="params">(handle)</span>:</span></span><br><span class="line">        q = Queue()</span><br><span class="line">        queues.append(q)</span><br><span class="line"></span><br><span class="line">        t = threading.Thread(target=handle, args=(q,))</span><br><span class="line">        handlers.append(t)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">run</span><span class="params">()</span>:</span></span><br><span class="line">        <span class="keyword">for</span> t <span class="keyword">in</span> handlers:</span><br><span class="line">            t.start() <span class="comment"># 启动线程,运行所有的处理函数</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> item <span class="keyword">in</span> src:</span><br><span class="line">            <span class="keyword">for</span> q <span class="keyword">in</span> queues:</span><br><span class="line">                q.put(item)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> reg, run</span><br><span class="line"></span><br><span class="line">reg, run = dispatcher(load(<span class="string">'/logs'</span>))</span><br></pre></td></tr></table></figure></li></ul><h1 id="分析器"><a href="#分析器" class="headerlink" title="分析器"></a>分析器</h1><h2 id="IP分析"><a href="#IP分析" class="headerlink" title="IP分析"></a>IP分析</h2><p>分析一段时间内，不同IP字出现的次数。基于IP可以分析出用户的地理分布<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># IP分析</span></span><br><span class="line"><span class="meta">@reg</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">ip_handle</span><span class="params">(q:Queue)</span>:</span></span><br><span class="line">    ips = &#123;&#125;</span><br><span class="line">    <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">        data = q.get() <span class="comment"># 阻塞读取</span></span><br><span class="line">        ip = data.get(<span class="string">'remote'</span>)</span><br><span class="line">        <span class="keyword">if</span> ip:</span><br><span class="line">            ips[ip] = ips.get(ip, <span class="number">0</span>) + <span class="number">1</span></span><br><span class="line">        print(len(ips), ips.keys())</span><br><span class="line">        print(sorted(ips.itmes(), key=<span class="keyword">lambda</span> x:x[<span class="number">1</span>], reverse=<span class="literal">True</span>))</span><br></pre></td></tr></table></figure></p><p>这段程序可以得到对于所有文档一个IP的统计</p><h2 id="PV分析"><a href="#PV分析" class="headerlink" title="PV分析"></a>PV分析</h2><p>PV指的是Page view，也就是页面浏览量或页面点击量<br>PV分析，就是按照URL分析</p><ul><li>不同URL被不同的用户访问了几次？</li><li>两种计算：<br>1.同一个用户不管刷新多少下同一个页面，就算1次<br>2.同意用户刷新同一个页面也算1次<h3 id="url分析"><a href="#url分析" class="headerlink" title="url分析"></a>url分析</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> urllib.parse <span class="keyword">import</span> urlparse</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">urls = [</span><br><span class="line">    <span class="string">'http://www.python.org'</span></span><br><span class="line">    <span class="string">'/index.html'</span></span><br><span class="line">    <span class="string">'/index.html?id=5&amp;age=20'</span></span><br><span class="line">]</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i, url <span class="keyword">in</span> enumerate(urls, <span class="number">1</span>):</span><br><span class="line">    t = urlparse(url)</span><br><span class="line">    print(i, url)</span><br><span class="line">    print(i, t, t.path)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 打印结果</span></span><br><span class="line">1 http://www.python.org/index.html/index.html?id=5&amp;age=20</span><br><span class="line"><span class="number">1</span> ParseResult(scheme=<span class="string">'http'</span>, netloc=<span class="string">'www.python.org'</span>,\</span><br><span class="line"> path=<span class="string">'/index.html/index.html'</span>, params=<span class="string">''</span>, query=<span class="string">'id=5&amp;age=20'</span>,\</span><br><span class="line">  fragment=<span class="string">''</span>) /index.html/index.html</span><br></pre></td></tr></table></figure></li></ul><h3 id="pv分析"><a href="#pv分析" class="headerlink" title="pv分析"></a>pv分析</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@reg</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">pv_handle</span><span class="params">(q:Queue)</span>:</span></span><br><span class="line">    pvs = &#123;&#125;</span><br><span class="line">    <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">        data = q.get()</span><br><span class="line">        ip = data.get(<span class="string">'remote'</span>)</span><br><span class="line">        url = data.get(<span class="string">'url'</span>)</span><br><span class="line">        <span class="keyword">if</span> ip <span class="keyword">and</span> url:</span><br><span class="line">            path = urlparse(url).path</span><br><span class="line">            <span class="keyword">if</span> path <span class="keyword">not</span> <span class="keyword">in</span> pvs:</span><br><span class="line">                pvs[path] = &#123;&#125;</span><br><span class="line">            pvs[path][ip] = pvs[path].get(ip, <span class="number">0</span>) + <span class="number">1</span></span><br><span class="line">        print(pvs)</span><br></pre></td></tr></table></figure><h2 id="useragent分析"><a href="#useragent分析" class="headerlink" title="useragent分析"></a>useragent分析</h2><ul><li>useragent指的是，软件按照一定的格式向远端的服务器提供一个表示自己的字符串</li><li>在HTTP协议中，使用user-agent字段传送这个字符串</li><li><p>注意：这个值可以被修改</p><h3 id="格式"><a href="#格式" class="headerlink" title="格式"></a>格式</h3><p>现在浏览器的user-agent值格式一般如下：<br><img src="https://img-blog.csdnimg.cn/20190514215216941.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3B5dGhvbl9scXg=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h3 id="信息提取"><a href="#信息提取" class="headerlink" title="信息提取"></a>信息提取</h3><p>pyyaml、ua-parser、user-agents模块</p><h4 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h4><p>$ pip install pyyaml ua-parser user-agents</p><h4 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> user_agents <span class="keyword">import</span> parse</span><br><span class="line"></span><br><span class="line">useragents = [</span><br><span class="line">    <span class="string">"Mozilla/5.0 (Windows NT 6.1; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko)\</span></span><br><span class="line"><span class="string">    chrome/57.0.2987.133 Safari/537.36"</span>,</span><br><span class="line">    <span class="string">"Mozilla/5.0 (Windows NT 6.1; Win64; x64; rv:56.0) Gecko/20100101 Firefox/56.0"</span>,</span><br><span class="line">    <span class="string">"Mozilla/5.0 (X11; Ubuntu; Linux x86_64; rv:52.0) Gecko/20100101 Firefox/52.0"</span>,</span><br><span class="line">    <span class="string">"Mozilla/5.0 (compatible; MSIE 10.0; Windows NT 6.1; WOW64; Trident/6.0; SLCC2;\</span></span><br><span class="line"><span class="string">    .NET CLR 2.0.50727; .NET CLR 3.5.30729; NET CLR 3.0.30729; Media Center PC 6.0; .NET4.0C; .NET4.0E)"</span></span><br><span class="line">]</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> uastring <span class="keyword">in</span> useragents:</span><br><span class="line">    ua = parse(uastring)</span><br><span class="line">    print(ua.browser, ua.browser.family, ua.browser.version, ua.browser.version_string)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 运行结果</span></span><br><span class="line">Browser(family=<span class="string">'Safari'</span>, version=(), version_string=<span class="string">''</span>) Safari () </span><br><span class="line">Browser(family=<span class="string">'Firefox'</span>, version=(<span class="number">56</span>, <span class="number">0</span>), version_string=<span class="string">'56.0'</span>) Firefox (<span class="number">56</span>, <span class="number">0</span>) <span class="number">56.0</span></span><br><span class="line">Browser(family=<span class="string">'Firefox'</span>, version=(<span class="number">52</span>, <span class="number">0</span>), version_string=<span class="string">'52.0'</span>) Firefox (<span class="number">52</span>, <span class="number">0</span>) <span class="number">52.0</span></span><br><span class="line">Browser(family=<span class="string">'IE'</span>, version=(<span class="number">10</span>, <span class="number">0</span>), version_string=<span class="string">'10.0'</span>) IE (<span class="number">10</span>, <span class="number">0</span>) <span class="number">10.0</span></span><br></pre></td></tr></table></figure></li><li><p>ua.browser.famliy和ua.browser.version_string分别返回浏览器名称、版本号</p><h3 id="数据分析"><a href="#数据分析" class="headerlink" title="数据分析"></a>数据分析</h3></li><li><p>conversion 增加对useragent的处理</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> user_agents <span class="keyword">import</span> parse</span><br><span class="line"></span><br><span class="line">conversion = &#123;</span><br><span class="line">    <span class="string">'datetime'</span>: <span class="keyword">lambda</span> datestr:datetime.datetime.strptime(datestr,<span class="string">'%d/%b/%Y:%H:%M:%S %z'</span>),</span><br><span class="line">    <span class="string">'status'</span>:int,</span><br><span class="line">    <span class="string">'length'</span>:int</span><br><span class="line">    <span class="string">'useragent'</span>:<span class="keyword">lambda</span> ua:parse(ua)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>增加浏览器分析函数</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># UserAgent分析</span></span><br><span class="line"><span class="meta">@reg</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">ua_handle</span><span class="params">(q:Queue)</span>:</span></span><br><span class="line">browsers = &#123;&#125;</span><br><span class="line"><span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">data = q.get()</span><br><span class="line">ua = data.get(<span class="string">'uaeragent'</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> ua:</span><br><span class="line">key = ua.browser.family, ua.browser.version_string</span><br><span class="line">browsers[key] = browsers.get(key, <span class="number">0</span>) + <span class="number">1</span></span><br><span class="line"></span><br><span class="line">print(browsers)</span><br></pre></td></tr></table></figure></li></ul><h3 id="完整代码-1"><a href="#完整代码-1" class="headerlink" title="完整代码"></a>完整代码</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> user_agents <span class="keyword">import</span> parse</span><br><span class="line"><span class="keyword">from</span> pathlib <span class="keyword">import</span> Path</span><br><span class="line"><span class="keyword">import</span> datetime</span><br><span class="line"><span class="keyword">import</span> re</span><br><span class="line"></span><br><span class="line">pattern = <span class="string">'(?P&lt;remote&gt;[\d.]&#123;7,&#125;) - - \[(?P&lt;datetime&gt;.+)\] \</span></span><br><span class="line"><span class="string">"(?P&lt;method&gt;.+) (?P&lt;url&gt;.+) (?P&lt;protocol&gt;.+)" \</span></span><br><span class="line"><span class="string">(?P&lt;status&gt;\d&#123;3&#125;) (?P&lt;size&gt;\d+) "[^"]+" "(?P&lt;useragent&gt;[^"]+)"'</span></span><br><span class="line">regex = re.compile(pattern)</span><br><span class="line"></span><br><span class="line">conversion = &#123;</span><br><span class="line">    <span class="string">'datetime'</span>: <span class="keyword">lambda</span> datestr:datetime.datetime.strptime(datestr,<span class="string">'%d/%b/%Y:%H:%M:%S %z'</span>),</span><br><span class="line">    <span class="string">'status'</span>:int,</span><br><span class="line">    <span class="string">'length'</span>:int</span><br><span class="line">    <span class="string">'useragent'</span>:<span class="keyword">lambda</span> ua:parse(ua)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">extract</span><span class="params">(logline:str)</span> -&gt; dict:</span></span><br><span class="line">    <span class="string">"""返回字段的字典，如果返回None说明匹配失败"""</span></span><br><span class="line">    m = regex.match(logline)</span><br><span class="line">    <span class="keyword">if</span> m:</span><br><span class="line">        <span class="keyword">return</span> &#123;k:conversion.get(k, <span class="keyword">lambda</span> x:x)(v) <span class="keyword">for</span> k, v <span class="keyword">in</span> m.groupdict().items()&#125;</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">None</span> <span class="comment"># 或输出日志记录</span></span><br><span class="line">    </span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">loadfile</span><span class="params">(filename:str, encoding=<span class="string">'utf-8'</span>)</span>:</span></span><br><span class="line">    <span class="string">"""装载日志文件"""</span></span><br><span class="line">    <span class="keyword">with</span> open(filename, encoding=encoding) <span class="keyword">as</span> f:</span><br><span class="line">        <span class="keyword">for</span> line <span class="keyword">in</span> f:</span><br><span class="line">            fields = extract(line)</span><br><span class="line">            <span class="keyword">if</span> fields:</span><br><span class="line">                <span class="keyword">yield</span> fields</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                <span class="keyword">continue</span> <span class="comment"># TODO 以后处理，丢弃数据或记录在日志中</span></span><br><span class="line">                </span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">load</span><span class="params">(*paths, encoding=<span class="string">'utf-8'</span>, ext=<span class="string">'*.log'</span>, recursive=False)</span>:</span></span><br><span class="line">    <span class="string">"""装载日志文件"""</span></span><br><span class="line">    <span class="keyword">for</span> x <span class="keyword">in</span> paths:</span><br><span class="line">        print(x)</span><br><span class="line">        p = Path(x)</span><br><span class="line">        <span class="keyword">if</span> p.is_dir(): <span class="comment"># 处理目录</span></span><br><span class="line">            <span class="keyword">if</span> isinstance(ext, str):</span><br><span class="line">                ext = [ext]</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                ext = list(ext)</span><br><span class="line">                </span><br><span class="line">            <span class="keyword">for</span> e <span class="keyword">in</span> ext:</span><br><span class="line">                files = p.rglob(e) <span class="keyword">if</span> recursive <span class="keyword">else</span> p.glob(e) <span class="comment"># 是否递归</span></span><br><span class="line">                <span class="keyword">for</span> file <span class="keyword">in</span> files:</span><br><span class="line">                    <span class="keyword">yield</span> <span class="keyword">from</span> loadfile(str(file.absolute()), encoding=encoding)     </span><br><span class="line">         <span class="keyword">elif</span> p.is_file():</span><br><span class="line">             <span class="keyword">yield</span> <span class="keyword">from</span> loadfile(str(p.absolute()), encoding=encoding)</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> queue <span class="keyword">import</span> Queue</span><br><span class="line"><span class="keyword">import</span> threading</span><br><span class="line"></span><br><span class="line"><span class="comment"># 消息队列，分发</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">dispatcher</span><span class="params">(src)</span>:</span></span><br><span class="line">    handlers = []</span><br><span class="line">    queues = []</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">reg</span><span class="params">(handle)</span>:</span></span><br><span class="line">        q = Queue()</span><br><span class="line">        queues.append(q)</span><br><span class="line">        </span><br><span class="line">        t = threading.Thread(target=handle, args=(q,))</span><br><span class="line">        handlers.append(t)</span><br><span class="line">        </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">run</span><span class="params">()</span>:</span></span><br><span class="line">        <span class="keyword">for</span> t <span class="keyword">in</span> handlers:</span><br><span class="line">            t.start() <span class="comment"># 启动线程，运行所有的处理函数</span></span><br><span class="line">        <span class="keyword">for</span> item <span class="keyword">in</span> src: <span class="comment"># 将数据源取到的数据分发到所有队列中</span></span><br><span class="line">            <span class="keyword">for</span> q <span class="keyword">in</span> queues:</span><br><span class="line">                q.put(item)</span><br><span class="line">                </span><br><span class="line">    <span class="keyword">return</span> reg,run</span><br><span class="line"></span><br><span class="line">reg, run = dispatcher(load(<span class="string">'.'</span>))</span><br><span class="line"></span><br><span class="line"><span class="comment"># IP分析</span></span><br><span class="line"><span class="meta">@reg</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">ip_handle</span><span class="params">(q:Queue)</span>:</span></span><br><span class="line">    ips = &#123;&#125;</span><br><span class="line">    <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">        data = q.get() <span class="comment"># 阻塞读取</span></span><br><span class="line">        ip = data.get(<span class="string">'remote'</span>)</span><br><span class="line">        <span class="keyword">if</span> ip:</span><br><span class="line">            ips[ip] = ips.get(ip, <span class="number">0</span>) + <span class="number">1</span></span><br><span class="line">        <span class="comment"># print(len(ips), ips.key())</span></span><br><span class="line">        <span class="comment"># print（sorted(ips.items(), key=lambda x:x[1], reverse=True))</span></span><br><span class="line">        </span><br><span class="line"><span class="keyword">from</span> urllib.parse <span class="keyword">import</span> urlparse</span><br><span class="line"></span><br><span class="line"><span class="comment"># PV分析</span></span><br><span class="line"><span class="meta">@reg</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">pv_handle</span><span class="params">(q:Queue)</span>:</span></span><br><span class="line">    pvs = &#123;&#125;</span><br><span class="line">    <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">        data = q.get()</span><br><span class="line">        ip = data.get(<span class="string">'remote'</span>)</span><br><span class="line">        url = data.get(<span class="string">'url'</span>)</span><br><span class="line">        <span class="keyword">if</span> ip <span class="keyword">and</span> url:</span><br><span class="line">            path = urlparse(url).path</span><br><span class="line">            <span class="keyword">if</span> path <span class="keyword">not</span> <span class="keyword">in</span> pvs:</span><br><span class="line">                pvs[path] = &#123;&#125;</span><br><span class="line">            pvs[path][ip] = pvs[path].get(ip, <span class="number">0</span>) + <span class="number">1</span></span><br><span class="line">        <span class="comment"># print(pvs)</span></span><br><span class="line">        </span><br><span class="line"><span class="comment"># UserAgent分析</span></span><br><span class="line"><span class="meta">@reg</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">ua_handle</span><span class="params">(q:Queue)</span>:</span></span><br><span class="line">    browsers = &#123;&#125;</span><br><span class="line">    <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">        data = q.get()</span><br><span class="line">        ua = data.get(<span class="string">'useragent'</span>)</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">if</span> ua:</span><br><span class="line">            key = ua.browser.family, ua.browser.version_string</span><br><span class="line">            browsers[key] = browsers.get(key, <span class="number">0</span>) + <span class="number">1</span></span><br><span class="line">        </span><br><span class="line">        print(browsers)</span><br><span class="line"></span><br><span class="line">run()</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;@&lt;a href&gt;TOC&lt;/a&gt;&lt;/p&gt;
&lt;h1 id=&quot;概述&quot;&gt;&lt;a href=&quot;#概述&quot; class=&quot;headerlink&quot; title=&quot;概述&quot;&gt;&lt;/a&gt;概述&lt;/h1&gt;&lt;p&gt;生成中会生产大量的系统日志、应用程序日志、安全日志等，通过对日志的分析可以了解服务器的负载、
      
    
    </summary>
    
    
  </entry>
  
</feed>
